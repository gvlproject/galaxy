{"version":3,"sources":["webpack:///admin.bundled.js","webpack:///./galaxy/scripts/apps/admin.js","webpack:///./galaxy/scripts/mvc/ui/ui-misc.js?fd98*","webpack:///./galaxy/scripts/mvc/ui/ui-portlet.js?0568*","webpack:///./galaxy/scripts/mvc/form/form-view.js?db3b*","webpack:///./galaxy/scripts/mvc/ui/ui-buttons.js?4ced*","webpack:///./galaxy/scripts/mvc/grid/grid-view.js?be4f*","webpack:///./galaxy/scripts/mvc/ui/ui-list.js?ecf1*","webpack:///./galaxy/scripts/mvc/ui/ui-options.js?405a*","webpack:///./galaxy/scripts/mvc/ui/ui-select-default.js?402d*","webpack:///./galaxy/scripts/mvc/ui/popup-menu.js?a948*","webpack:///./galaxy/scripts/mvc/form/form-data.js?6144*","webpack:///./galaxy/scripts/mvc/ui/ui-table.js?4ded*","webpack:///./galaxy/scripts/mvc/form/form-input.js?af7f*","webpack:///./galaxy/scripts/mvc/form/form-parameters.js?0ee1*","webpack:///./galaxy/scripts/mvc/form/form-repeat.js?7c22*","webpack:///./galaxy/scripts/mvc/form/form-section.js?2ccb*","webpack:///./galaxy/scripts/mvc/grid/grid-model.js?e551*","webpack:///./galaxy/scripts/mvc/grid/grid-template.js?73e1*","webpack:///./galaxy/scripts/mvc/ui/ui-color-picker.js?fa1d*","webpack:///./galaxy/scripts/mvc/ui/ui-drilldown.js?de06*","webpack:///./galaxy/scripts/mvc/ui/ui-select-content.js?e092*","webpack:///./galaxy/scripts/mvc/ui/ui-select-ftp.js?cf41*","webpack:///./galaxy/scripts/mvc/ui/ui-select-library.js?fd76*","webpack:///./galaxy/scripts/mvc/ui/ui-slider.js?93a7*","webpack:///./galaxy/scripts/layout/router.js?1c11","webpack:///./galaxy/scripts/mvc/form/form-wrapper.js?ceac","webpack:///./galaxy/scripts/apps/panels/admin-panel.js"],"names":["webpackJsonp","module","exports","__webpack_require__","_","jQuery","$","GalaxyApp","AdminPanel","FormWrapper","GridView","QueryStringParsing","Router","Page","window","app","options","bootstrapped","Galaxy","debug","AdminRouter","extend","routes","(/)admin(/)users","(/)admin(/)roles","(/)admin(/)groups","(/)admin(/)tool_versions","(/)admin(/)quotas","(/)admin(/)forms(/)(:form_id)","authenticate","args","name","user","id","get","show_users","this","page","display","url_base","root","url_data","params","dict_format","show_roles","show_groups","show_tool_versions","show_quotas","show_forms","form_id","form_defs","reset_user_password","title","url","icon","submit_title","redirect","manage_roles_and_groups_for_user","manage_users_and_groups_for_role","manage_users_and_roles_for_group","manage_users_and_groups_for_quota","create_role","create_group","create_quota","rename_role","rename_group","rename_quota","edit_quota","set_quota_default","View","config","active_view","Left","call","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","Backbone","Utils","Select","Slider","Options","Drilldown","Buttons","Modal","Label","tagName","initialize","model","Model","setElement","listenTo","render","new_title","set","value","$el","removeClass","addClass","html","Message","message","status","cls","persistent","fade","update","messageForDisplay","timeout","clearTimeout","self","setTimeout","fadeOut","escape","UnescapedMessage","Input","type","placeholder","disabled","readonly","visible","area","color","style","events","input","new_val","undefined","attr","css","datalist","isArray","length","autocomplete","source","request","response","change","_onchange","val","each","attr_name","removeAttr","Hidden","append","$info","$hidden","show","text","hide","Upload","$file","$text","$wait","on","e","_readFile","file","target","files","reader","FileReader","onload","wait","result","readAsText","Button","ButtonDefault","ButtonIcon","ButtonCheck","ButtonMenu","ButtonLink","RadioButton","Checkbox","Radio","apply","Ui","uid","buttons","body","scrollable","nopadding","operations","collapsible","collapsible_button","collapsed","onchange_title","_template","$body","$title_text","$title_icon","$header","$content","$backdrop","$buttons","$operations","tooltip","onclick","attributes","off","collapse","expand","prop","make_text_editable","on_finish","empty","item","header","fadeIn","enableButton","find","disableButton","hideOperation","showOperation","setOperation","callback","height","setIcon","disable","enable","Portlet","FormSection","FormData","initial_errors","always_refresh","new_model","data","matchModel","node","input_id","input_list","isEqual","field","field_list","new_options","indexOf","i","opt","push","label","trigger","emit","active","is_dynamic","unwait","highlight","silent","input_element","element_list","error","portlet","$panel","parents","filter","first","animate","scrollTop","offset","top","errors","error_messages","matchResponse","Manager","_renderForm","create","current_check","checksum","refresh_on_change","new_check","reset","remove","section","inputs","wait_text","wait_cls","percentage","$icon","$title","$progress","$progress_bar","placement","width","href","icons","onchange","total","$button","$menu","pull","onunload","tag","collection","Collection","$root","where","preventDefault","submodel","suboptions","$link","divider","addMenu","add","merge","ajaxSettings","traditional","GridModel","Templates","PopupMenu","grid","grid_config","add_tag_to_grid_filter","tag_name","tag_value","advanced_search","is","slideToggle","add_filter_condition","items","filters","v","k","ajax","param","success","embedded","init_grid","use_panels","padding","overflow","handle_refresh","refresh_frames","inArray","currHistoryPanel","loadCurrentHistory","replace","footer","use_hide_message","init_grid_elements","init_grid_controls","init_refresh_on_change","click","submit_operation","select","keyup","set_sort_condition","submit","column_key","text_input_obj","text_input","parent","remove_filter_condition","set_categorical_filter","check_all_items","checkboxes","check_count","update_checked","rating","set_page","execute","items_length","index","button","popup","operation","_add_operation","settings","operation_config","allowed","allow_popup","addItem","url_args","confirmation_text","confirm","func","encode_id","findItemByHtml","add_filter","t","filter_element","container","go_page_one","remove_filter","col_key","cur_sort","new_sort","substring","sort_arrow","new_value","category_filter","cur_value","trim","filter_value","new_page","page_num","parseInt","split","cur_page","children","operation_button","operation_name","number_of_checked_ids","findWhere","item_ids","check","state","c","href_parts","href_parms_str","href_parms","toLowerCase","location","get_url_data","can_async_op","update_grid","go_to","async","$div","closest","load","method","alert","response_text","insert","json","parseJSON","complete","multiple","optional","v_id","v_name","_refresh","lst","isEmpty","_templateRow","Base","error_text","_changeValue","_changeWait","_changeData","_changeVisible","$message","$options","all_button","_getValue","_templateOptions","option","_templateOption","_messageShow","_setValue","values","selected","BaseIcons","pair","prototype","data2","empty_text","searchable","individual","pagesize","_changeDisabled","_renderSearchable","_renderClassic","$select","$dropdown","$resize","$resize_icon","event","currentY","pageY","currentHeight","minHeight","Math","max","select2","prepend","_match","term","String","toUpperCase","order","tags","matched_tags","closeOnSelect","query","q","results","found","slice","more","formatResult","reduce","memo","exists","d","sorter","keep","sort","setOnChange","a","b","menu","_renderAndShow","clickEvent","appendTo","_getShownPosition","_setUpCloseBehavior","position","template","li","join","map","checked","menuWidth","x","pageX","min","document","scrollLeft","left","closePopup","err","contents","one","splice","removeItem","findIndexByHtml","has","toString","make_popupmenu","button_element","initial_options","convertedOptions","optionVal","optionKey","newOption","convertLinksToOptions","$parent","selector","elem","linkHref","linkTarget","confirmText","fromExistingDom","$buttonElement","$menuElement","menuElementLinkSelector","make_popup_menus","menuSelector","buttonSelectorBuildFn","popupMenusCreated","fromDom","sum","JSON","stringify","flat_id","input_value","flat_dict","result_dict","convert","identifier","head","section_label","block_indices","block_prefix","block_label","pos","substr","test_param","selectedCase","matchCase","flat","ignore","collapsible_value","payload","p_id","dict","_iterate","match","visitInputs","search","new_id","separator","Array","child","hasClass","truevalue","falsevalue","cases","prefix","context","key","cache","j","content","ondblclick","onconfirm","selectable","cls_tr","$thead","$tbody","$tmessage","row","_row","row_count","dblclick","addHeader","appendHeader","align","wrapper","_commit","del","delAll","before","after","size","_onclick","old_value","_ondblclick","app_options","text_enable","text_disable","cls_enable","cls_disable","$field","$preview","$collapsible","$collapsible_text","$collapsible_icon","$error_text","$error","backdrop","help_text","help_argument","collapsible_state","SelectContent","SelectLibrary","SelectFtp","ColorPicker","types","password","data_column","genomebuild","data_collection","integer","float","boolean","drill_down","hidden","hidden_data","baseurl","library_data","ftpfile","upload","input_def","fieldClass","_fieldSelect","_fieldText","_fieldData","extensions","flavor","is_workflow","SelectClass","_fieldDrilldown","str_value","_fieldSlider","precise","_fieldHidden","info","_fieldBoolean","_fieldColor","_fieldLibrary","_fieldFtp","_fieldUpload","list","button_new","onnew","$list","button_delete","ondel","hideOptions","Repeat","InputElement","Parameters","parameters","_addConditional","_addRepeat","_addSection","_addRow","case_def","section_row","nonhidden","sub_section","_append","sub_section_id","block_index","repeat","n_cache","default","help","expanded","hide_label","text_value","collapsible_preview","argument","fixed","defaults","async_ops","categorical_filters","sort_key","show_item_checkboxes","num_pages","op","cur_val","condition","condition_index","pairs","get_url","tmpl","grid_header","grid_table","info_text","global_actions","show_popup","action","grid_filters","columns","column","extra","num_rows_rendered","encoded_id","current_item_id","nowrap","column_settings","column_config","link","attach_popup","label_id_prefix","use_paging","num_page_links","cur_page_num","page_link_range","min_page","min_offset","max_offset","max_range","max_page","page_index","allow_multiple","found_global","global_operation","legend","default_filter_dict","advanced_search_display","show_advanced_search_link","filterable","f_key","d_key","standard_search_display","grid_column_filter","column_label","is_text","temp_column","column_filter","seperator","cf_label","cf","cf_key","cf_arg","filter_key","sanitize","colors","standard","base","theme","$view","$value","_build","$boxes","_templateCheck","hex","rgb","_content","line_def","_templateContent","$line","$box","_templateBox","bottom","header_index","element","_setState","header_id","is_expanded","$subgroup","attach","iterate","$tmpl","level","has_options","new_header","$group","Batch","DISABLED","ENABLED","LINKED","Configurations","src","batch","data_multiple","workflow_data","workflow_data_multiple","workflow_data_collection","module_data","module_data_collection","src_labels","hda","hdca","pagelimit","statustimer","button_product","$batch_div","$batch","linked","clone","enabled","lastenter","_handleDrop","history","_changeCurrent","_changeType","current","id_list","fields","_batch","details","hid","$batchfield","batchmode","button_type","config_id","textify","button_data","button_width","margin-left","select_options","ev","drop_data","parse","originalEvent","dataTransfer","getData","new_src","history_content_type","current_value","_handleDropStatus","map_over_type","List","ftpfile_list","Table","Libraries","LibraryDatasets","library_id","fetch","libraries","datasets","library_select","dataset_list","library_current","step","$slider","pressed","which","_isParameter","opts","has_slider","slider","ui","isNaN","round","QUERY_STRING","__identifer","random","isEmptyObject","navigate","queryObj","pop","access_denied","Form","done","form","submit_tooltip","submit_icon","_submit","fail","contentType","success_message","_showMessage","responseJSON","err_msg","_l","categories","is_tool_shed_installed","enable_beta_ts_api_install","installing_repository_ids","is_repo_installed","allow_user_impersonation","enable_quotas","category","$section","_templateSection","$entries","router"],"mappings":"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","file":"admin.bundled.js","sourcesContent":["webpackJsonp([4],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(_) {var jQuery = __webpack_require__(1),\n\t    $ = jQuery,\n\t    GalaxyApp = __webpack_require__(49).GalaxyApp,\n\t    AdminPanel = __webpack_require__(100),\n\t    FormWrapper = __webpack_require__(59),\n\t    GridView = __webpack_require__(12),\n\t    Ui = __webpack_require__(5),\n\t    QueryStringParsing = __webpack_require__(26),\n\t    Router = __webpack_require__(52),\n\t    Page = __webpack_require__(50);\n\t\n\twindow.app = function app(options, bootstrapped) {\n\t    window.Galaxy = new GalaxyApp(options, bootstrapped);\n\t    Galaxy.debug('admin app');\n\t\n\t    /** Routes */\n\t    var AdminRouter = Router.extend({\n\t        routes: {\n\t            '(/)admin(/)users': 'show_users',\n\t            '(/)admin(/)roles': 'show_roles',\n\t            '(/)admin(/)groups': 'show_groups',\n\t            '(/)admin(/)tool_versions': 'show_tool_versions',\n\t            '(/)admin(/)quotas': 'show_quotas',\n\t            '(/)admin(/)forms(/)(:form_id)': 'show_forms'\n\t        },\n\t\n\t        authenticate: function (args, name) {\n\t            return Galaxy.user && Galaxy.user.id && Galaxy.user.get('is_admin');\n\t        },\n\t\n\t        show_users: function () {\n\t            this.page.display(new GridView({ url_base: Galaxy.root + 'admin/users_list', url_data: Galaxy.params, dict_format: true }));\n\t        },\n\t\n\t        show_roles: function () {\n\t            this.page.display(new GridView({ url_base: Galaxy.root + 'admin/roles_list', url_data: Galaxy.params, dict_format: true }));\n\t        },\n\t\n\t        show_groups: function () {\n\t            this.page.display(new GridView({ url_base: Galaxy.root + 'admin/groups_list', url_data: Galaxy.params, dict_format: true }));\n\t        },\n\t\n\t        show_tool_versions: function () {\n\t            this.page.display(new GridView({ url_base: Galaxy.root + 'admin/tool_versions_list', url_data: Galaxy.params, dict_format: true }));\n\t        },\n\t\n\t        show_quotas: function () {\n\t            this.page.display(new GridView({ url_base: Galaxy.root + 'admin/quotas_list', url_data: Galaxy.params, dict_format: true }));\n\t        },\n\t\n\t        show_forms: function (form_id) {\n\t            var id = '?id=' + QueryStringParsing.get('id');\n\t            var form_defs = {\n\t                reset_user_password: {\n\t                    title: 'Reset passwords',\n\t                    url: 'admin/reset_user_password' + id,\n\t                    icon: 'fa-user',\n\t                    submit_title: 'Save new password',\n\t                    redirect: 'admin/users'\n\t                },\n\t                manage_roles_and_groups_for_user: {\n\t                    url: 'admin/manage_roles_and_groups_for_user' + id,\n\t                    icon: 'fa-users',\n\t                    redirect: 'admin/users'\n\t                },\n\t                manage_users_and_groups_for_role: {\n\t                    url: 'admin/manage_users_and_groups_for_role' + id,\n\t                    redirect: 'admin/roles'\n\t                },\n\t                manage_users_and_roles_for_group: {\n\t                    url: 'admin/manage_users_and_roles_for_group' + id,\n\t                    redirect: 'admin/groups'\n\t                },\n\t                manage_users_and_groups_for_quota: {\n\t                    url: 'admin/manage_users_and_groups_for_quota' + id,\n\t                    redirect: 'admin/quotas'\n\t                },\n\t                create_role: {\n\t                    url: 'admin/create_role',\n\t                    redirect: 'admin/roles'\n\t                },\n\t                create_group: {\n\t                    url: 'admin/create_group',\n\t                    redirect: 'admin/groups'\n\t                },\n\t                create_quota: {\n\t                    url: 'admin/create_quota',\n\t                    redirect: 'admin/quotas'\n\t                },\n\t                rename_role: {\n\t                    url: 'admin/rename_role' + id,\n\t                    redirect: 'admin/roles'\n\t                },\n\t                rename_group: {\n\t                    url: 'admin/rename_group' + id,\n\t                    redirect: 'admin/groups'\n\t                },\n\t                rename_quota: {\n\t                    url: 'admin/rename_quota' + id,\n\t                    redirect: 'admin/quotas'\n\t                },\n\t                edit_quota: {\n\t                    url: 'admin/edit_quota' + id,\n\t                    redirect: 'admin/quotas'\n\t                },\n\t                set_quota_default: {\n\t                    url: 'admin/set_quota_default' + id,\n\t                    redirect: 'admin/quotas'\n\t                }\n\t            };\n\t            this.page.display(new FormWrapper.View(form_defs[form_id]));\n\t        }\n\t    });\n\t\n\t    $(function () {\n\t        _.extend(options.config, { active_view: 'admin' });\n\t        Galaxy.page = new Page.View(_.extend(options, {\n\t            Left: AdminPanel,\n\t            Router: AdminRouter\n\t        }));\n\t    });\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ },\n/* 1 */,\n/* 2 */,\n/* 3 */,\n/* 4 */,\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {/**\n\t *  This class contains backbone wrappers for basic ui elements such as Images, Labels, Buttons, Input fields etc.\n\t */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(15), __webpack_require__(40), __webpack_require__(14), __webpack_require__(36), __webpack_require__(11), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Select, Slider, Options, Drilldown, Buttons, Modal) {\n\t\n\t    /** Label wrapper */\n\t    var Label = Backbone.View.extend({\n\t        tagName: 'label',\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model(options);\n\t            this.tagName = options.tagName || this.tagName;\n\t            this.setElement($('<' + this.tagName + '/>'));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t        title: function (new_title) {\n\t            this.model.set('title', new_title);\n\t        },\n\t        value: function () {\n\t            return this.model.get('title');\n\t        },\n\t        render: function () {\n\t            this.$el.removeClass().addClass('ui-label').addClass(this.model.get('cls')).html(this.model.get('title'));\n\t            return this;\n\t        }\n\t    });\n\t\n\t    /** Displays messages used e.g. in the tool form */\n\t    var Message = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                message: null,\n\t                status: 'info',\n\t                cls: '',\n\t                persistent: false,\n\t                fade: true\n\t            }).set(options);\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t        update: function (options) {\n\t            this.model.set(options);\n\t        },\n\t        render: function () {\n\t            this.$el.removeClass().addClass('ui-message').addClass(this.model.get('cls'));\n\t            var status = this.model.get('status');\n\t            if (this.model.get('large')) {\n\t                this.$el.addClass((status == 'success' && 'done' || status == 'danger' && 'error' || status) + 'messagelarge');\n\t            } else {\n\t                this.$el.addClass('alert').addClass('alert-' + status);\n\t            }\n\t            if (this.model.get('message')) {\n\t                this.$el.html(this.messageForDisplay());\n\t                this.$el[this.model.get('fade') ? 'fadeIn' : 'show']();\n\t                this.timeout && window.clearTimeout(this.timeout);\n\t                if (!this.model.get('persistent')) {\n\t                    var self = this;\n\t                    this.timeout = window.setTimeout(function () {\n\t                        self.model.set('message', '');\n\t                    }, 3000);\n\t                }\n\t            } else {\n\t                this.$el.fadeOut();\n\t            }\n\t            return this;\n\t        },\n\t        messageForDisplay: function () {\n\t            return _.escape(this.model.get('message'));\n\t        }\n\t    });\n\t\n\t    var UnescapedMessage = Message.extend({\n\t        messageForDisplay: function () {\n\t            return this.model.get('message');\n\t        }\n\t    });\n\t\n\t    /** Renders an input element used e.g. in the tool form */\n\t    var Input = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                type: 'text',\n\t                placeholder: '',\n\t                disabled: false,\n\t                readonly: false,\n\t                visible: true,\n\t                cls: '',\n\t                area: false,\n\t                color: null,\n\t                style: null\n\t            }).set(options);\n\t            this.tagName = this.model.get('area') ? 'textarea' : 'input';\n\t            this.setElement($('<' + this.tagName + '/>'));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t        events: {\n\t            'input': '_onchange'\n\t        },\n\t        value: function (new_val) {\n\t            new_val !== undefined && this.model.set('value', typeof new_val === 'string' ? new_val : '');\n\t            return this.model.get('value');\n\t        },\n\t        render: function () {\n\t            var self = this;\n\t            this.$el.removeClass().addClass('ui-' + this.tagName).addClass(this.model.get('cls')).addClass(this.model.get('style')).attr('id', this.model.id).attr('type', this.model.get('type')).attr('placeholder', this.model.get('placeholder')).css('color', this.model.get('color') || '').css('border-color', this.model.get('color') || '');\n\t            var datalist = this.model.get('datalist');\n\t            if ($.isArray(datalist) && datalist.length > 0) {\n\t                this.$el.autocomplete({ source: function (request, response) {\n\t                        response(self.model.get('datalist'));\n\t                    },\n\t                    change: function () {\n\t                        self._onchange();\n\t                    } });\n\t            }\n\t            if (this.model.get('value') !== this.$el.val()) {\n\t                this.$el.val(this.model.get('value'));\n\t            }\n\t            _.each(['readonly', 'disabled'], function (attr_name) {\n\t                self.model.get(attr_name) ? self.$el.attr(attr_name, true) : self.$el.removeAttr(attr_name);\n\t            });\n\t            this.$el[this.model.get('visible') ? 'show' : 'hide']();\n\t            return this;\n\t        },\n\t        _onchange: function () {\n\t            this.value(this.$el.val());\n\t            this.model.get('onchange') && this.model.get('onchange')(this.model.get('value'));\n\t        }\n\t    });\n\t\n\t    /** Creates a hidden element input field used e.g. in the tool form */\n\t    var Hidden = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model(options);\n\t            this.setElement($('<div/>').append(this.$info = $('<div/>')).append(this.$hidden = $('<div/>')));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t        value: function (new_val) {\n\t            new_val !== undefined && this.model.set('value', new_val);\n\t            return this.model.get('value');\n\t        },\n\t        render: function () {\n\t            this.$el.attr('id', this.model.id);\n\t            this.$hidden.val(this.model.get('value'));\n\t            this.model.get('info') ? this.$info.show().text(this.model.get('info')) : this.$info.hide();\n\t            return this;\n\t        }\n\t    });\n\t\n\t    /** Creates a upload element input field */\n\t    var Upload = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            var self = this;\n\t            this.model = options && options.model || new Backbone.Model(options);\n\t            this.setElement($('<div/>').append(this.$info = $('<div/>')).append(this.$file = $('<input/>').attr('type', 'file').addClass('ui-margin-bottom')).append(this.$text = $('<textarea/>').addClass('ui-textarea').attr('disabled', true)).append(this.$wait = $('<i/>').addClass('fa fa-spinner fa-spin')));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.$file.on('change', function (e) {\n\t                self._readFile(e);\n\t            });\n\t            this.render();\n\t        },\n\t        value: function (new_val) {\n\t            new_val !== undefined && this.model.set('value', new_val);\n\t            return this.model.get('value');\n\t        },\n\t        render: function () {\n\t            this.$el.attr('id', this.model.id);\n\t            this.model.get('info') ? this.$info.show().text(this.model.get('info')) : this.$info.hide();\n\t            this.model.get('value') ? this.$text.text(this.model.get('value')).show() : this.$text.hide();\n\t            this.model.get('wait') ? this.$wait.show() : this.$wait.hide();\n\t            return this;\n\t        },\n\t        _readFile: function (e) {\n\t            var self = this;\n\t            var file = e.target.files && e.target.files[0];\n\t            if (file) {\n\t                var reader = new FileReader();\n\t                reader.onload = function () {\n\t                    self.model.set({ wait: false, value: this.result });\n\t                };\n\t                this.model.set({ wait: true, value: null });\n\t                reader.readAsText(file);\n\t            }\n\t        }\n\t    });\n\t\n\t    return {\n\t        Button: Buttons.ButtonDefault,\n\t        ButtonIcon: Buttons.ButtonIcon,\n\t        ButtonCheck: Buttons.ButtonCheck,\n\t        ButtonMenu: Buttons.ButtonMenu,\n\t        ButtonLink: Buttons.ButtonLink,\n\t        Input: Input,\n\t        Label: Label,\n\t        Message: Message,\n\t        UnescapedMessage: UnescapedMessage,\n\t        Upload: Upload,\n\t        Modal: Modal,\n\t        RadioButton: Options.RadioButton,\n\t        Checkbox: Options.Checkbox,\n\t        Radio: Options.Radio,\n\t        Select: Select,\n\t        Hidden: Hidden,\n\t        Slider: Slider,\n\t        Drilldown: Drilldown\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 6 */,\n/* 7 */,\n/* 8 */,\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui) {\n\t    var View = Backbone.View.extend({\n\t        visible: false,\n\t        initialize: function (options) {\n\t            var self = this;\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                cls: 'ui-portlet',\n\t                title: '',\n\t                icon: '',\n\t                buttons: null,\n\t                body: null,\n\t                scrollable: true,\n\t                nopadding: false,\n\t                operations: null,\n\t                collapsible: false,\n\t                collapsible_button: false,\n\t                collapsed: false,\n\t                onchange_title: null\n\t            }).set(options);\n\t            this.setElement(this._template());\n\t\n\t            // link all dom elements\n\t            this.$body = this.$('.portlet-body');\n\t            this.$title_text = this.$('.portlet-title-text');\n\t            this.$title_icon = this.$('.portlet-title-icon');\n\t            this.$header = this.$('.portlet-header');\n\t            this.$content = this.$('.portlet-content');\n\t            this.$backdrop = this.$('.portlet-backdrop');\n\t            this.$buttons = this.$('.portlet-buttons');\n\t            this.$operations = this.$('.portlet-operations');\n\t\n\t            // add body to component list\n\t            this.model.get('body') && this.append(this.model.get('body'));\n\t\n\t            // add icon for collapsible option\n\t            this.collapsible_button = new Ui.ButtonIcon({\n\t                icon: 'fa-eye',\n\t                tooltip: 'Collapse/Expand',\n\t                cls: 'ui-button-icon-plain',\n\t                onclick: function () {\n\t                    self[self.collapsed ? 'expand' : 'collapse']();\n\t                }\n\t            });\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var self = this;\n\t            var options = this.model.attributes;\n\t            this.$el.removeClass().addClass(options.cls).attr('id', options.id);\n\t            this.$header[options.title ? 'show' : 'hide']();\n\t            this.$title_text.html(options.title);\n\t            _.each([this.$content, this.$body], function ($el) {\n\t                $el[options.nopadding ? 'addClass' : 'removeClass']('no-padding');\n\t            });\n\t\n\t            // render title icon\n\t            if (options.icon) {\n\t                this.$title_icon.removeClass().addClass('portlet-title-icon fa').addClass(options.icon).show();\n\t            } else {\n\t                this.$title_icon.hide();\n\t            }\n\t\n\t            // make portlet collapsible\n\t            this.$title_text[options.collapsible ? 'addClass' : 'removeClass']('no-highlight collapsible').off();\n\t            if (options.collapsible) {\n\t                this.$title_text.on('click', function () {\n\t                    self[self.collapsed ? 'expand' : 'collapse']();\n\t                });\n\t                options.collapsed ? this.collapse() : this.expand();\n\t            }\n\t\n\t            // allow title editing\n\t            this.$title_text.prop('disabled', !options.onchange_title);\n\t            options.onchange_title && this.$title_text.make_text_editable({\n\t                on_finish: function (new_title) {\n\t                    options.onchange_title(new_title);\n\t                }\n\t            });\n\t\n\t            // render buttons\n\t            if (options.buttons) {\n\t                this.$buttons.empty().show();\n\t                $.each(this.model.get('buttons'), function (name, item) {\n\t                    item.$el.prop('id', name);\n\t                    self.$buttons.append(item.$el);\n\t                });\n\t            } else {\n\t                this.$buttons.hide();\n\t            }\n\t\n\t            // render operations\n\t            this.$operations.empty;\n\t            if (options.collapsible_button) {\n\t                this.$operations.append(this.collapsible_button.$el);\n\t            }\n\t            if (options.operations) {\n\t                $.each(options.operations, function (name, item) {\n\t                    item.$el.prop('id', name);\n\t                    self.$operations.append(item.$el);\n\t                });\n\t            }\n\t            return this;\n\t        },\n\t\n\t        /** Append new doms to body */\n\t        append: function ($el) {\n\t            this.$body.append($el);\n\t        },\n\t\n\t        /** Remove all content */\n\t        empty: function () {\n\t            this.$body.empty();\n\t        },\n\t\n\t        /** Return header element */\n\t        header: function () {\n\t            return this.$header;\n\t        },\n\t\n\t        /** Return body element */\n\t        body: function () {\n\t            return this.$body;\n\t        },\n\t\n\t        /** Show portlet */\n\t        show: function () {\n\t            this.visible = true;\n\t            this.$el.fadeIn('fast');\n\t        },\n\t\n\t        /** Hide portlet */\n\t        hide: function () {\n\t            this.visible = false;\n\t            this.$el.hide();\n\t        },\n\t\n\t        /** Enable a particular button */\n\t        enableButton: function (id) {\n\t            this.$buttons.find('#' + id).prop('disabled', false);\n\t        },\n\t\n\t        /** Disable a particular button */\n\t        disableButton: function (id) {\n\t            this.$buttons.find('#' + id).prop('disabled', true);\n\t        },\n\t\n\t        /** Hide a particular operation */\n\t        hideOperation: function (id) {\n\t            this.$operations.find('#' + id).hide();\n\t        },\n\t\n\t        /** Show a particular operation */\n\t        showOperation: function (id) {\n\t            this.$operations.find('#' + id).show();\n\t        },\n\t\n\t        /** Replaces the event callback of an existing operation */\n\t        setOperation: function (id, callback) {\n\t            this.$operations.find('#' + id).off('click').on('click', callback);\n\t        },\n\t\n\t        /** Change title */\n\t        title: function (new_title) {\n\t            new_title && this.$title_text.html(new_title);\n\t            return this.$title_text.html();\n\t        },\n\t\n\t        /** Collapse portlet */\n\t        collapse: function () {\n\t            this.collapsed = true;\n\t            this.$content.height('0%');\n\t            this.$body.hide();\n\t            this.collapsible_button.setIcon('fa-eye-slash');\n\t        },\n\t\n\t        /** Expand portlet */\n\t        expand: function () {\n\t            this.collapsed = false;\n\t            this.$content.height('100%');\n\t            this.$body.fadeIn('fast');\n\t            this.collapsible_button.setIcon('fa-eye');\n\t        },\n\t\n\t        /** Disable content access */\n\t        disable: function () {\n\t            this.$backdrop.show();\n\t        },\n\t\n\t        /** Enable content access */\n\t        enable: function () {\n\t            this.$backdrop.hide();\n\t        },\n\t\n\t        _template: function () {\n\t            return $('<div/>').append($('<div/>').addClass('portlet-header').append($('<div/>').addClass('portlet-operations')).append($('<div/>').addClass('portlet-title').append($('<i/>').addClass('portlet-title-icon')).append($('<span/>').addClass('portlet-title-text')))).append($('<div/>').addClass('portlet-content').append($('<div/>').addClass('portlet-body')).append($('<div/>').addClass('portlet-buttons'))).append($('<div/>').addClass('portlet-backdrop'));\n\t        }\n\t    });\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(3), __webpack_require__(1)))\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {/**\n\t    This is the main class of the form plugin. It is referenced as 'app' in lower level modules.\n\t*/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(9), __webpack_require__(5), __webpack_require__(32), __webpack_require__(19)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Portlet, Ui, FormSection, FormData) {\n\t    return Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.model = new Backbone.Model({\n\t                initial_errors: false,\n\t                cls: 'ui-portlet-limited',\n\t                icon: null,\n\t                always_refresh: true,\n\t                status: 'warning'\n\t            }).set(options);\n\t            this.setElement('<div/>');\n\t            this.render();\n\t        },\n\t\n\t        /** Update available options */\n\t        update: function (new_model) {\n\t            var self = this;\n\t            this.data.matchModel(new_model, function (node, input_id) {\n\t                var input = self.input_list[input_id];\n\t                if (input && input.options) {\n\t                    if (!_.isEqual(input.options, node.options)) {\n\t                        input.options = node.options;\n\t                        var field = self.field_list[input_id];\n\t                        if (field.update) {\n\t                            var new_options = [];\n\t                            if (['data', 'data_collection', 'drill_down'].indexOf(input.type) != -1) {\n\t                                new_options = input.options;\n\t                            } else {\n\t                                for (var i in node.options) {\n\t                                    var opt = node.options[i];\n\t                                    if (opt.length > 2) {\n\t                                        new_options.push({ label: opt[0], value: opt[1] });\n\t                                    }\n\t                                }\n\t                            }\n\t                            field.update(new_options);\n\t                            field.trigger('change');\n\t                            Galaxy.emit.debug('form-view::update()', 'Updating options for ' + input_id);\n\t                        }\n\t                    }\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Set form into wait mode */\n\t        wait: function (active) {\n\t            for (var i in this.input_list) {\n\t                var field = this.field_list[i];\n\t                var input = this.input_list[i];\n\t                if (input.is_dynamic && field.wait && field.unwait) {\n\t                    field[active ? 'wait' : 'unwait']();\n\t                }\n\t            }\n\t        },\n\t\n\t        /** Highlight and scroll to input element (currently only used for error notifications) */\n\t        highlight: function (input_id, message, silent) {\n\t            var input_element = this.element_list[input_id];\n\t            if (input_element) {\n\t                input_element.error(message || 'Please verify this parameter.');\n\t                this.portlet.expand();\n\t                this.trigger('expand', input_id);\n\t                if (!silent) {\n\t                    var $panel = this.$el.parents().filter(function () {\n\t                        return ['auto', 'scroll'].indexOf($(this).css('overflow')) != -1;\n\t                    }).first();\n\t                    $panel.animate({ scrollTop: $panel.scrollTop() + input_element.$el.offset().top - 120 }, 500);\n\t                }\n\t            }\n\t        },\n\t\n\t        /** Highlights errors */\n\t        errors: function (options) {\n\t            this.trigger('reset');\n\t            if (options && options.errors) {\n\t                var error_messages = this.data.matchResponse(options.errors);\n\t                for (var input_id in this.element_list) {\n\t                    var input = this.element_list[input_id];\n\t                    if (error_messages[input_id]) {\n\t                        this.highlight(input_id, error_messages[input_id], true);\n\t                    }\n\t                }\n\t            }\n\t        },\n\t\n\t        /** Render tool form */\n\t        render: function () {\n\t            var self = this;\n\t            this.off('change');\n\t            this.off('reset');\n\t            // contains the dom field elements as created by the parameter factory i.e. form-parameters\n\t            this.field_list = {};\n\t            // contains input definitions/dictionaries as provided by the parameters to_dict() function through the api\n\t            this.input_list = {};\n\t            // contains the dom elements of each input element i.e. form-input which wraps the actual input field\n\t            this.element_list = {};\n\t            // converts the form into a json data structure\n\t            this.data = new FormData.Manager(this);\n\t            this._renderForm();\n\t            this.data.create();\n\t            this.model.get('initial_errors') && this.errors(this.model.attributes);\n\t            // add listener which triggers on checksum change, and reset the form input wrappers\n\t            var current_check = this.data.checksum();\n\t            this.on('change', function (input_id) {\n\t                var input = self.input_list[input_id];\n\t                if (!input || input.refresh_on_change || self.model.get('always_refresh')) {\n\t                    var new_check = self.data.checksum();\n\t                    if (new_check != current_check) {\n\t                        current_check = new_check;\n\t                        self.model.get('onchange') && self.model.get('onchange')();\n\t                    }\n\t                }\n\t            });\n\t            this.on('reset', function () {\n\t                _.each(self.element_list, function (input_element) {\n\t                    input_element.reset();\n\t                });\n\t            });\n\t            return this;\n\t        },\n\t\n\t        /** Renders/appends dom elements of the form */\n\t        _renderForm: function () {\n\t            $('.tooltip').remove();\n\t            var options = this.model.attributes;\n\t            this.message = new Ui.UnescapedMessage();\n\t            this.section = new FormSection.View(this, { inputs: options.inputs });\n\t            this.portlet = new Portlet.View({\n\t                icon: options.icon,\n\t                title: options.title,\n\t                cls: options.cls,\n\t                operations: options.operations,\n\t                buttons: options.buttons,\n\t                collapsible: options.collapsible,\n\t                collapsed: options.collapsed,\n\t                onchange_title: options.onchange_title\n\t            });\n\t            this.portlet.append(this.message.$el);\n\t            this.portlet.append(this.section.$el);\n\t            this.$el.empty();\n\t            options.inputs && this.$el.append(this.portlet.$el);\n\t            options.message && this.message.update({ persistent: true, status: options.status, message: options.message });\n\t            Galaxy.emit.debug('form-view::initialize()', 'Completed');\n\t        }\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(3), __webpack_require__(1)))\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {/** This module contains all button views. */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n\t    /** This renders the default button which is used e.g. at the bottom of the upload modal. */\n\t    var ButtonDefault = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                title: '',\n\t                icon: '',\n\t                cls: 'btn btn-default',\n\t                wait: false,\n\t                wait_text: 'Sending...',\n\t                wait_cls: 'btn btn-info',\n\t                disabled: false,\n\t                percentage: -1\n\t            }).set(options);\n\t            this.setElement($('<button/>').attr('type', 'button').append(this.$icon = $('<i/>')).append(this.$title = $('<span/>')).append(this.$progress = $('<div/>').append(this.$progress_bar = $('<div/>'))));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var self = this;\n\t            var options = this.model.attributes;\n\t            this.$el.removeClass().addClass('ui-button-default').addClass(options.disabled && 'disabled').attr('id', options.id).attr('disabled', options.disabled).off('click').on('click', function () {\n\t                $('.tooltip').hide();\n\t                options.onclick && !self.disabled && options.onclick();\n\t            }).tooltip({ title: options.tooltip, placement: 'bottom' });\n\t            this.$progress.addClass('progress').css('display', options.percentage !== -1 ? 'block' : 'none');\n\t            this.$progress_bar.addClass('progress-bar').css({ width: options.percentage + '%' });\n\t            this.$icon.removeClass().addClass('icon fa');\n\t            this.$title.removeClass().addClass('title');\n\t            if (options.wait) {\n\t                this.$el.addClass(options.wait_cls).prop('disabled', true);\n\t                this.$icon.addClass('fa-spinner fa-spin ui-margin-right');\n\t                this.$title.html(options.wait_text);\n\t            } else {\n\t                this.$el.addClass(options.cls);\n\t                this.$icon.addClass(options.icon);\n\t                this.$title.html(options.title);\n\t                options.icon && options.title && this.$icon.addClass('ui-margin-right');\n\t            }\n\t        },\n\t\n\t        /** Show button */\n\t        show: function () {\n\t            this.$el.show();\n\t        },\n\t\n\t        /** Hide button */\n\t        hide: function () {\n\t            this.$el.hide();\n\t        },\n\t\n\t        /** Disable button */\n\t        disable: function () {\n\t            this.model.set('disabled', true);\n\t        },\n\t\n\t        /** Enable button */\n\t        enable: function () {\n\t            this.model.set('disabled', false);\n\t        },\n\t\n\t        /** Show spinner to indicate that the button is not ready to be clicked */\n\t        wait: function () {\n\t            this.model.set('wait', true);\n\t        },\n\t\n\t        /** Hide spinner to indicate that the button is ready to be clicked */\n\t        unwait: function () {\n\t            this.model.set('wait', false);\n\t        },\n\t\n\t        /** Change icon */\n\t        setIcon: function (icon) {\n\t            this.model.set('icon', icon);\n\t        }\n\t    });\n\t\n\t    /** This button allows the right-click/open-in-new-tab feature, its used e.g. for panel buttons. */\n\t    var ButtonLink = ButtonDefault.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                title: '',\n\t                icon: '',\n\t                cls: ''\n\t            }).set(options);\n\t            this.setElement($('<a/>').append(this.$icon = $('<span/>')));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var options = this.model.attributes;\n\t            this.$el.removeClass().addClass(options.cls).attr({ id: options.id,\n\t                href: options.href || 'javascript:void(0)',\n\t                title: options.title,\n\t                target: options.target || '_top',\n\t                disabled: options.disabled }).tooltip({ placement: 'bottom' }).off('click').on('click', function () {\n\t                options.onclick && !options.disabled && options.onclick();\n\t            });\n\t            this.$icon.removeClass().addClass(options.icon);\n\t        }\n\t    });\n\t\n\t    /** The check button is used in the tool form and allows to distinguish between multiple states e.g. all, partially and nothing selected. */\n\t    var ButtonCheck = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                title: 'Select/Unselect all',\n\t                icons: ['fa-square-o', 'fa-minus-square-o', 'fa-check-square-o'],\n\t                value: 0,\n\t                onchange: function () {}\n\t            }).set(options);\n\t            this.setElement($('<div/>').append(this.$icon = $('<span/>')).append(this.$title = $('<span/>')));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function (options) {\n\t            var self = this;\n\t            var options = this.model.attributes;\n\t            this.$el.addClass('ui-button-check').off('click').on('click', function () {\n\t                self.model.set('value', self.model.get('value') === 0 && 2 || 0);\n\t                options.onclick && options.onclick();\n\t            });\n\t            this.$title.html(options.title);\n\t            this.$icon.removeClass().addClass('icon fa ui-margin-right').addClass(options.icons[options.value]);\n\t        },\n\t\n\t        /* Sets a new value and/or returns the value.\n\t        * @param{Integer}   new_val - Set a new value 0=unchecked, 1=partial and 2=checked.\n\t        * OR:\n\t        * @param{Integer}   new_val - Number of selected options.\n\t        * @param{Integer}   total   - Total number of available options.\n\t        */\n\t        value: function (new_val, total) {\n\t            if (new_val !== undefined) {\n\t                if (total && new_val !== 0) {\n\t                    new_val = new_val !== total && 1 || 2;\n\t                }\n\t                this.model.set('value', new_val);\n\t                this.model.get('onchange')(this.model.get('value'));\n\t            }\n\t            return this.model.get('value');\n\t        }\n\t    });\n\t\n\t    /** This renders a differently styled, more compact button version. */\n\t    var ButtonIcon = ButtonDefault.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                title: '',\n\t                icon: '',\n\t                cls: 'ui-button-icon',\n\t                disabled: false\n\t            }).set(options);\n\t            this.setElement($('<div/>').append(this.$button = $('<div/>').append(this.$icon = $('<i/>')).append(this.$title = $('<span/>'))));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function (options) {\n\t            var self = this;\n\t            var options = this.model.attributes;\n\t            this.$el.removeClass().addClass(options.cls).addClass(options.disabled && 'disabled').attr('disabled', options.disabled).attr('id', options.id).off('click').on('click', function () {\n\t                $('.tooltip').hide();\n\t                !options.disabled && options.onclick && options.onclick();\n\t            });\n\t            this.$button.addClass('button').tooltip({ title: options.tooltip, placement: 'bottom' });\n\t            this.$icon.removeClass().addClass('icon fa').addClass(options.icon);\n\t            this.$title.addClass('title').html(options.title);\n\t            options.icon && options.title && this.$icon.addClass('ui-margin-right');\n\t        }\n\t    });\n\t\n\t    /** This class creates a button with dropdown menu. */\n\t    var ButtonMenu = ButtonDefault.extend({\n\t        $menu: null,\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: '',\n\t                title: '',\n\t                pull: 'right',\n\t                icon: null,\n\t                onclick: null,\n\t                cls: 'ui-button-icon ui-button-menu',\n\t                tooltip: '',\n\t                target: '',\n\t                href: '',\n\t                onunload: null,\n\t                visible: true,\n\t                tag: ''\n\t            }).set(options);\n\t            this.collection = new Backbone.Collection();\n\t            this.setElement($('<div/>').append(this.$root = $('<div/>').append(this.$icon = $('<i/>')).append(this.$title = $('<span/>'))));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.listenTo(this.collection, 'change add remove reset', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var self = this;\n\t            var options = this.model.attributes;\n\t            this.$el.removeClass().addClass('dropdown').addClass(options.cls).attr('id', options.id).css({ display: options.visible && this.collection.where({ visible: true }).length > 0 ? 'block' : 'none' });\n\t            this.$root.addClass('root button dropdown-toggle').attr('data-toggle', 'dropdown').tooltip({ title: options.tooltip, placement: 'bottom' }).off('click').on('click', function (e) {\n\t                $('.tooltip').hide();\n\t                e.preventDefault();\n\t                options.onclick && options.onclick();\n\t            });\n\t            this.$icon.removeClass().addClass('icon fa').addClass(options.icon);\n\t            this.$title.removeClass().addClass('title').html(options.title);\n\t            options.icon && options.title && this.$icon.addClass('ui-margin-right');\n\t            this.$menu && this.$menu.remove();\n\t            if (this.collection.length > 0) {\n\t                this.$menu = $('<ul/>').addClass('menu dropdown-menu').addClass('pull-' + self.model.get('pull')).attr('role', 'menu');\n\t                this.$el.append(this.$menu);\n\t            }\n\t            this.collection.each(function (submodel) {\n\t                var suboptions = submodel.attributes;\n\t                if (suboptions.visible) {\n\t                    var $link = $('<a/>').addClass('dropdown-item').attr({ href: suboptions.href, target: suboptions.target }).append($('<i/>').addClass('fa').addClass(suboptions.icon).css('display', suboptions.icon ? 'inline-block' : 'none')).append(suboptions.title).on('click', function (e) {\n\t                        if (suboptions.onclick) {\n\t                            e.preventDefault();\n\t                            suboptions.onclick();\n\t                        }\n\t                    });\n\t                    self.$menu.append($('<li/>').append($link));\n\t                    suboptions.divider && self.$menu.append($('<li/>').addClass('divider'));\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Add a new menu item */\n\t        addMenu: function (options) {\n\t            this.collection.add(Utils.merge(options, {\n\t                title: '',\n\t                target: '',\n\t                href: '',\n\t                onclick: null,\n\t                divider: false,\n\t                visible: true,\n\t                icon: null,\n\t                cls: 'button-menu btn-group'\n\t            }));\n\t        }\n\t    });\n\t\n\t    return {\n\t        ButtonDefault: ButtonDefault,\n\t        ButtonLink: ButtonLink,\n\t        ButtonIcon: ButtonIcon,\n\t        ButtonCheck: ButtonCheck,\n\t        ButtonMenu: ButtonMenu\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery, Backbone, $, _) {// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n\t// not appended to the identifier of a nested array.\n\tjQuery.ajaxSettings.traditional = true;\n\t\n\t// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(33), __webpack_require__(34), __webpack_require__(18)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, GridModel, Templates, PopupMenu) {\n\t\n\t    // grid view\n\t    return Backbone.View.extend({\n\t\n\t        // model\n\t        grid: null,\n\t\n\t        // Initialize\n\t        initialize: function (grid_config) {\n\t            this.dict_format = grid_config.dict_format;\n\t            var self = this;\n\t            window.add_tag_to_grid_filter = function (tag_name, tag_value) {\n\t                // Put tag name and value together.\n\t                var tag = tag_name + (tag_value !== undefined && tag_value !== \"\" ? \":\" + tag_value : \"\");\n\t                var advanced_search = $('#advanced-search').is(\":visible\");\n\t                if (!advanced_search) {\n\t                    $('#standard-search').slideToggle('fast');\n\t                    $('#advanced-search').slideToggle('fast');\n\t                }\n\t                self.add_filter_condition(\"tags\", tag);\n\t            };\n\t\n\t            // set element\n\t            if (this.dict_format) {\n\t                this.setElement('<div/>');\n\t                if (grid_config.url_base && !grid_config.items) {\n\t                    var url_data = grid_config.url_data || {};\n\t                    _.each(grid_config.filters, function (v, k) {\n\t                        url_data['f-' + k] = v;\n\t                    });\n\t                    $.ajax({\n\t                        url: grid_config.url_base + '?' + $.param(url_data),\n\t                        success: function (response) {\n\t                            response.embedded = grid_config.embedded;\n\t                            response.filters = grid_config.filters;\n\t                            self.init_grid(response);\n\t                        }\n\t                    });\n\t                } else {\n\t                    this.init_grid(grid_config);\n\t                }\n\t            } else {\n\t                this.setElement('#grid-container');\n\t                this.init_grid(grid_config);\n\t            }\n\t\n\t            // fix padding\n\t            if (grid_config.use_panels) {\n\t                $('#center').css({\n\t                    padding: '10px',\n\t                    overflow: 'auto'\n\t                });\n\t            }\n\t        },\n\t\n\t        // refresh frames\n\t        handle_refresh: function (refresh_frames) {\n\t            if (refresh_frames) {\n\t                if ($.inArray('history', refresh_frames) > -1) {\n\t                    if (top.Galaxy && top.Galaxy.currHistoryPanel) {\n\t                        top.Galaxy.currHistoryPanel.loadCurrentHistory();\n\t                    }\n\t                }\n\t            }\n\t        },\n\t\n\t        // Initialize\n\t        init_grid: function (grid_config) {\n\t            // link grid model\n\t            this.grid = new GridModel(grid_config);\n\t\n\t            // get options\n\t            var options = this.grid.attributes;\n\t\n\t            // handle refresh requests\n\t            this.handle_refresh(options.refresh_frames);\n\t\n\t            // strip protocol and domain\n\t            var url = this.grid.get('url_base');\n\t            url = url.replace(/^.*\\/\\/[^\\/]+/, '');\n\t            this.grid.set('url_base', url);\n\t\n\t            // append main template\n\t            this.$el.html(Templates.grid(options));\n\t\n\t            // update div contents\n\t            this.$el.find('#grid-table-header').html(Templates.header(options));\n\t            this.$el.find('#grid-table-body').html(Templates.body(options));\n\t            this.$el.find('#grid-table-footer').html(Templates.footer(options));\n\t\n\t            // update message\n\t            if (options.message) {\n\t                this.$el.find('#grid-message').html(Templates.message(options));\n\t                var self = this;\n\t                if (options.use_hide_message) {\n\t                    setTimeout(function () {\n\t                        self.$el.find('#grid-message').html('');\n\t                    }, 5000);\n\t                }\n\t            }\n\t\n\t            // configure elements\n\t            this.init_grid_elements();\n\t            this.init_grid_controls();\n\t\n\t            // attach global event handler\n\t            // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n\t            init_refresh_on_change();\n\t        },\n\t\n\t        // Initialize grid controls\n\t        init_grid_controls: function () {\n\t\n\t            // link\n\t            var self = this;\n\t\n\t            // Initialize grid operation button.\n\t            this.$el.find('.operation-button').each(function () {\n\t                $(this).off();\n\t                $(this).click(function () {\n\t                    self.submit_operation(this);\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // Initialize text filters to select text on click and use normal font when user is typing.\n\t            this.$el.find('input[type=text]').each(function () {\n\t                $(this).off();\n\t                $(this).click(function () {\n\t                    $(this).select();\n\t                }).keyup(function () {\n\t                    $(this).css('font-style', 'normal');\n\t                });\n\t            });\n\t\n\t            // Initialize sort links.\n\t            this.$el.find('.sort-link').each(function () {\n\t                $(this).off();\n\t                $(this).click(function () {\n\t                    self.set_sort_condition($(this).attr('sort_key'));\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // Initialize text filters.\n\t            this.$el.find('.text-filter-form').each(function () {\n\t                $(this).off();\n\t                $(this).submit(function () {\n\t                    var column_key = $(this).attr('column_key');\n\t                    var text_input_obj = $('#input-' + column_key + '-filter');\n\t                    var text_input = text_input_obj.val();\n\t                    text_input_obj.val('');\n\t                    self.add_filter_condition(column_key, text_input);\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // Initialize categorical filters.\n\t            this.$el.find('.text-filter-val > a').each(function () {\n\t                $(this).off();\n\t                $(this).click(function () {\n\t                    // Remove visible element.\n\t                    $(this).parent().remove();\n\t\n\t                    // Remove filter condition.\n\t                    self.remove_filter_condition($(this).attr('filter_key'), $(this).attr('filter_val'));\n\t\n\t                    // Return\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // Initialize categorical filters.\n\t            this.$el.find('.categorical-filter > a').each(function () {\n\t                $(this).off();\n\t                $(this).click(function () {\n\t                    self.set_categorical_filter($(this).attr('filter_key'), $(this).attr('filter_val'));\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // Initialize standard, advanced search toggles.\n\t            this.$el.find('.advanced-search-toggle').each(function () {\n\t                $(this).off();\n\t                $(this).click(function () {\n\t                    self.$el.find('#standard-search').slideToggle('fast');\n\t                    self.$el.find('#advanced-search').slideToggle('fast');\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // Add event to check all box\n\t            this.$el.find('#check_all').off();\n\t            this.$el.find('#check_all').on('click', function () {\n\t                self.check_all_items();\n\t            });\n\t        },\n\t\n\t        // Initialize grid elements.\n\t        init_grid_elements: function () {\n\t            // Initialize grid selection checkboxes.\n\t            this.$el.find('.grid').each(function () {\n\t                var checkboxes = $(this).find(\"input.grid-row-select-checkbox\");\n\t                var check_count = $(this).find(\"span.grid-selected-count\");\n\t                var update_checked = function () {\n\t                    check_count.text($(checkboxes).filter(\":checked\").length);\n\t                };\n\t\n\t                $(checkboxes).each(function () {\n\t                    $(this).change(update_checked);\n\t                });\n\t                update_checked();\n\t            });\n\t\n\t            // Initialize ratings.\n\t            if (this.$el.find('.community_rating_star').length !== 0) this.$el.find('.community_rating_star').rating({});\n\t\n\t            // get options\n\t            var options = this.grid.attributes;\n\t            var self = this;\n\t\n\t            //\n\t            // add page click events\n\t            //\n\t            this.$el.find('.page-link > a').each(function () {\n\t                $(this).click(function () {\n\t                    self.set_page($(this).attr('page_num'));\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            //\n\t            // add inbound/outbound events\n\t            //\n\t            this.$el.find('.use-target').each(function () {\n\t                $(this).click(function (e) {\n\t                    self.execute({\n\t                        href: $(this).attr('href'),\n\t                        target: $(this).attr('target')\n\t                    });\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // empty grid?\n\t            var items_length = options.items.length;\n\t            if (items_length == 0) {\n\t                return;\n\t            }\n\t\n\t            // add operation popup menus\n\t            _.each(options.items, function (item, index) {\n\t                var button = self.$('#grid-' + index + '-popup').off();\n\t                var popup = new PopupMenu(button);\n\t                _.each(options['operations'], function (operation) {\n\t                    self._add_operation(popup, operation, item);\n\t                });\n\t            });\n\t        },\n\t\n\t        /** Add an operation to the items menu */\n\t        _add_operation: function (popup, operation, item) {\n\t            var self = this;\n\t            var settings = item.operation_config[operation.label];\n\t            if (settings.allowed && operation.allow_popup) {\n\t                popup.addItem({\n\t                    html: operation.label,\n\t                    href: settings.url_args,\n\t                    target: settings.target,\n\t                    confirmation_text: operation.confirm,\n\t                    func: function (e) {\n\t                        e.preventDefault();\n\t                        var label = $(e.target).html();\n\t                        if (operation.onclick) {\n\t                            operation.onclick(item.encode_id);\n\t                        } else {\n\t                            self.execute(this.findItemByHtml(label));\n\t                        }\n\t                    }\n\t                });\n\t            }\n\t        },\n\t\n\t        // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n\t        add_filter_condition: function (name, value) {\n\t            // Do nothing is value is empty.\n\t            if (value === \"\") {\n\t                return false;\n\t            }\n\t\n\t            // Add condition to grid.\n\t            this.grid.add_filter(name, value, true);\n\t\n\t            // Add button that displays filter and provides a button to delete it.\n\t            var t = $(Templates.filter_element(name, value));\n\t            var self = this;\n\t            t.click(function () {\n\t                // Remove visible element.\n\t                $(this).remove();\n\t\n\t                // Remove filter condition.\n\t                self.remove_filter_condition(name, value);\n\t            });\n\t\n\t            // append to container\n\t            var container = this.$el.find('#' + name + '-filtering-criteria');\n\t            container.append(t);\n\t\n\t            // execute\n\t            this.go_page_one();\n\t            this.execute();\n\t        },\n\t\n\t        // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n\t        remove_filter_condition: function (name, value) {\n\t            // Remove filter condition.\n\t            this.grid.remove_filter(name, value);\n\t\n\t            // Execute\n\t            this.go_page_one();\n\t            this.execute();\n\t        },\n\t\n\t        // Set sort condition for grid.\n\t        set_sort_condition: function (col_key) {\n\t            // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n\t            // currently sorted column, sort is reversed.\n\t            var cur_sort = this.grid.get('sort_key');\n\t            var new_sort = col_key;\n\t            if (cur_sort.indexOf(col_key) !== -1) {\n\t                // Reverse sort.\n\t                if (cur_sort.substring(0, 1) !== '-') {\n\t                    new_sort = '-' + col_key;\n\t                }\n\t            }\n\t\n\t            // Remove sort arrows elements.\n\t            this.$el.find('.sort-arrow').remove();\n\t\n\t            // Add sort arrow element to new sort column.\n\t            var sort_arrow = new_sort.substring(0, 1) == '-' ? '&uarr;' : '&darr;';\n\t            var t = $('<span>' + sort_arrow + '</span>').addClass('sort-arrow');\n\t\n\t            // Add to header\n\t            this.$el.find('#' + col_key + '-header').append(t);\n\t\n\t            // Update grid.\n\t            this.grid.set('sort_key', new_sort);\n\t            this.go_page_one();\n\t            this.execute();\n\t        },\n\t\n\t        // Set new value for categorical filter.\n\t        set_categorical_filter: function (name, new_value) {\n\t            // Update filter hyperlinks to reflect new filter value.\n\t            var category_filter = this.grid.get('categorical_filters')[name],\n\t                cur_value = this.grid.get('filters')[name];\n\t            var self = this;\n\t            this.$el.find('.' + name + '-filter').each(function () {\n\t                var text = $.trim($(this).text());\n\t                var filter = category_filter[text];\n\t                var filter_value = filter[name];\n\t                if (filter_value == new_value) {\n\t                    // Remove filter link since grid will be using this filter. It is assumed that\n\t                    // this element has a single child, a hyperlink/anchor with text.\n\t                    $(this).empty();\n\t                    $(this).addClass('current-filter');\n\t                    $(this).append(text);\n\t                } else if (filter_value == cur_value) {\n\t                    // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n\t                    // this element has a single child, a hyperlink/anchor.\n\t                    $(this).empty();\n\t                    var t = $('<a href=\"#\">' + text + '</a>');\n\t                    t.click(function () {\n\t                        self.set_categorical_filter(name, filter_value);\n\t                    });\n\t                    $(this).removeClass('current-filter');\n\t                    $(this).append(t);\n\t                }\n\t            });\n\t\n\t            // Update grid.\n\t            this.grid.add_filter(name, new_value);\n\t            this.go_page_one();\n\t            this.execute();\n\t        },\n\t\n\t        // Set page to view.\n\t        set_page: function (new_page) {\n\t            // Update page hyperlink to reflect new page.\n\t            var self = this;\n\t            this.$el.find('.page-link').each(function () {\n\t                var id = $(this).attr('id'),\n\t                    page_num = parseInt(id.split('-')[2], 10),\n\t                    // Id has form 'page-link-<page_num>\n\t                cur_page = self.grid.get('cur_page'),\n\t                    text;\n\t                if (page_num === new_page) {\n\t                    // Remove link to page since grid will be on this page. It is assumed that\n\t                    // this element has a single child, a hyperlink/anchor with text.\n\t                    text = $(this).children().text();\n\t                    $(this).empty();\n\t                    $(this).addClass('inactive-link');\n\t                    $(this).text(text);\n\t                } else if (page_num === cur_page) {\n\t                    // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n\t                    // this element has a single child, a hyperlink/anchor.\n\t                    text = $(this).text();\n\t                    $(this).empty();\n\t                    $(this).removeClass('inactive-link');\n\t                    var t = $('<a href=\"#\">' + text + '</a>');\n\t                    t.click(function () {\n\t                        self.set_page(page_num);\n\t                    });\n\t                    $(this).append(t);\n\t                }\n\t            });\n\t\n\t            if (new_page === 'all') {\n\t                this.grid.set('cur_page', new_page);\n\t            } else {\n\t                this.grid.set('cur_page', parseInt(new_page, 10));\n\t            }\n\t            this.execute();\n\t        },\n\t\n\t        // confirmation/submission of operation request\n\t        submit_operation: function (operation_button, confirmation_text) {\n\t            // identify operation\n\t            var operation_name = $(operation_button).val();\n\t\n\t            // verify in any item is selected\n\t            var number_of_checked_ids = this.$el.find('input[name=\"id\"]:checked').length;\n\t            if (!number_of_checked_ids > 0) {\n\t                return false;\n\t            }\n\t\n\t            // Check to see if there's grid confirmation text for this operation\n\t            var operation = _.findWhere(this.grid.attributes.operations, { label: operation_name });\n\t            if (operation && !confirmation_text) {\n\t                confirmation_text = operation.confirm || '';\n\t            }\n\t\n\t            // collect ids\n\t            var item_ids = [];\n\t            this.$el.find('input[name=id]:checked').each(function () {\n\t                item_ids.push($(this).val());\n\t            });\n\t\n\t            // execute operation\n\t            var options = {\n\t                operation: operation_name,\n\t                id: item_ids,\n\t                confirmation_text: confirmation_text\n\t            };\n\t            if (operation.target == 'top') {\n\t                options = _.extend(options, {\n\t                    href: operation.href,\n\t                    target: operation.target\n\t                });\n\t            }\n\t            this.execute(options);\n\t            return true;\n\t        },\n\t\n\t        check_all_items: function () {\n\t            var check = this.$('.grid-row-select-checkbox');\n\t            var state = this.$('#check_all').prop('checked');\n\t            _.each(check, function (c) {\n\t                $(c).prop('checked', state);\n\t            });\n\t            this.init_grid_elements();\n\t        },\n\t\n\t        // Go back to page one; this is useful when a filter is applied.\n\t        go_page_one: function () {\n\t            // Need to go back to page 1 if not showing all.\n\t            var cur_page = this.grid.get('cur_page');\n\t            if (cur_page !== null && cur_page !== undefined && cur_page !== 'all') {\n\t                this.grid.set('cur_page', 1);\n\t            }\n\t        },\n\t\n\t        //\n\t        // execute operations and hyperlink requests\n\t        //\n\t        execute: function (options) {\n\t            // get url\n\t            var id = null;\n\t            var href = null;\n\t            var operation = null;\n\t            var confirmation_text = null;\n\t            var target = null;\n\t\n\t            // check for options\n\t            if (options) {\n\t                // get options\n\t                href = options.href;\n\t                operation = options.operation;\n\t                id = options.id;\n\t                confirmation_text = options.confirmation_text;\n\t                target = options.target;\n\t\n\t                // check if input contains the operation tag\n\t                if (href !== undefined && href.indexOf('operation=') != -1) {\n\t                    // Get operation, id in hyperlink's href.\n\t                    var href_parts = href.split(\"?\");\n\t                    if (href_parts.length > 1) {\n\t                        var href_parms_str = href_parts[1];\n\t                        var href_parms = href_parms_str.split(\"&\");\n\t                        for (var index = 0; index < href_parms.length; index++) {\n\t                            if (href_parms[index].indexOf('operation') != -1) {\n\t                                // Found operation parm; get operation value.\n\t                                operation = href_parms[index].split('=')[1];\n\t                                operation = operation.replace(/\\+/g, ' ');\n\t                            } else if (href_parms[index].indexOf('id') != -1) {\n\t                                // Found id parm; get id value.\n\t                                id = href_parms[index].split('=')[1];\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t\n\t            // check for operation details\n\t            if (operation && id) {\n\t                // show confirmation box\n\t                if (confirmation_text && confirmation_text != '' && confirmation_text != 'None' && confirmation_text != 'null') if (!confirm(confirmation_text)) return false;\n\t\n\t                // use small characters for operation?!\n\t                operation = operation.toLowerCase();\n\t\n\t                // Update grid.\n\t                this.grid.set({\n\t                    operation: operation,\n\t                    item_ids: id\n\t                });\n\t\n\t                // Do operation. If operation cannot be performed asynchronously, redirect to location.\n\t                if (target == 'top') {\n\t                    window.top.location = href + '?' + $.param(this.grid.get_url_data());\n\t                } else if (this.grid.can_async_op(operation) || this.dict_format) {\n\t                    this.update_grid();\n\t                } else {\n\t                    this.go_to(target, href);\n\t                }\n\t\n\t                // done\n\t                return false;\n\t            }\n\t\n\t            // refresh grid\n\t            if (href) {\n\t                this.go_to(target, href);\n\t                return false;\n\t            }\n\t\n\t            // refresh grid\n\t            if (this.grid.get('async') || this.dict_format) {\n\t                this.update_grid();\n\t            } else {\n\t                this.go_to(target, href);\n\t            }\n\t\n\t            // done\n\t            return false;\n\t        },\n\t\n\t        // go to url\n\t        go_to: function (target, href) {\n\t            // get aysnc status\n\t            var async = this.grid.get('async');\n\t            this.grid.set('async', false);\n\t\n\t            // get slide status\n\t            var advanced_search = this.$el.find('#advanced-search').is(':visible');\n\t            this.grid.set('advanced_search', advanced_search);\n\t\n\t            // get default url\n\t            if (!href) {\n\t                href = this.grid.get('url_base') + '?' + $.param(this.grid.get_url_data());\n\t            }\n\t\n\t            // clear grid of transient request attributes.\n\t            this.grid.set({\n\t                operation: undefined,\n\t                item_ids: undefined,\n\t                async: async\n\t            });\n\t            switch (target) {\n\t                case 'inbound':\n\t                    // this currently assumes that there is only a single grid shown at a time\n\t                    var $div = $('.grid-header').closest('.inbound');\n\t                    if ($div.length !== 0) {\n\t                        $div.load(href);\n\t                        return;\n\t                    }\n\t                    break;\n\t                case 'top':\n\t                    window.top.location = href;\n\t                    break;\n\t                default:\n\t                    window.location = href;\n\t            }\n\t        },\n\t\n\t        // Update grid.\n\t        update_grid: function () {\n\t            // If there's an operation, do POST; otherwise, do GET.\n\t            var method = this.grid.get('operation') ? 'POST' : 'GET';\n\t\n\t            // Show overlay to indicate loading and prevent user actions.\n\t            this.$el.find('.loading-elt-overlay').show();\n\t            var self = this;\n\t            $.ajax({\n\t                type: method,\n\t                url: self.grid.get('url_base'),\n\t                data: self.grid.get_url_data(),\n\t                error: function (response) {\n\t                    alert('Grid refresh failed');\n\t                },\n\t                success: function (response_text) {\n\t\n\t                    // backup\n\t                    var embedded = self.grid.get('embedded');\n\t                    var insert = self.grid.get('insert');\n\t\n\t                    // request new configuration\n\t                    var json = self.dict_format ? response_text : $.parseJSON(response_text);\n\t\n\t                    // update\n\t                    json.embedded = embedded;\n\t                    json.insert = insert;\n\t\n\t                    // Initialize new grid config\n\t                    self.init_grid(json);\n\t\n\t                    // Hide loading overlay.\n\t                    self.$el.find('.loading-elt-overlay').hide();\n\t                },\n\t                complete: function () {\n\t                    // Clear grid of transient request attributes.\n\t                    self.grid.set({\n\t                        operation: undefined,\n\t                        item_ids: undefined\n\t                    });\n\t                }\n\t            });\n\t        }\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(9), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Portlet, Ui) {\n\t\n\t    // ui list element\n\t    var View = Backbone.View.extend({\n\t        // create portlet to keep track of selected list elements\n\t        initialize: function (options) {\n\t            // link this\n\t            var self = this;\n\t\n\t            // initialize options\n\t            this.options = options;\n\t            this.name = options.name || 'element';\n\t            this.multiple = options.multiple || false;\n\t\n\t            // create message handler\n\t            this.message = new Ui.Message();\n\t\n\t            // create portlet\n\t            this.portlet = new Portlet.View({ cls: 'ui-portlet-section' });\n\t\n\t            // create select field containing the options which can be inserted into the list\n\t            this.select = new Ui.Select.View({ optional: options.optional });\n\t\n\t            // create insert new list element button\n\t            this.button = new Ui.ButtonIcon({\n\t                icon: 'fa fa-sign-in',\n\t                tooltip: 'Insert new ' + this.name,\n\t                onclick: function () {\n\t                    self.add({\n\t                        id: self.select.value(),\n\t                        name: self.select.text()\n\t                    });\n\t                }\n\t            });\n\t\n\t            // build main element\n\t            this.setElement(this._template(options));\n\t            this.$('.ui-list-message').append(this.message.$el);\n\t            this.$('.ui-list-portlet').append(this.portlet.$el);\n\t            this.$('.ui-list-button').append(this.button.$el);\n\t            this.$('.ui-list-select').append(this.select.$el);\n\t        },\n\t\n\t        /** Return/Set currently selected list elements */\n\t        value: function (val) {\n\t            // set new value\n\t            if (val !== undefined) {\n\t                this.portlet.empty();\n\t                if ($.isArray(val)) {\n\t                    for (var i in val) {\n\t                        var v = val[i];\n\t                        var v_id = null;\n\t                        var v_name = null;\n\t                        if ($.type(v) != 'string') {\n\t                            v_id = v.id;\n\t                            v_name = v.name;\n\t                        } else {\n\t                            v_id = v_name = v;\n\t                        }\n\t                        if (v_id != null) {\n\t                            this.add({\n\t                                id: v_id,\n\t                                name: v_name\n\t                            });\n\t                        }\n\t                    }\n\t                }\n\t                this._refresh();\n\t            }\n\t            // get current value\n\t            var lst = [];\n\t            this.$('.ui-list-id').each(function () {\n\t                lst.push({\n\t                    id: $(this).prop('id'),\n\t                    name: $(this).find('.ui-list-name').html()\n\t                });\n\t            });\n\t            if (lst.length == 0) {\n\t                return null;\n\t            }\n\t            return lst;\n\t        },\n\t\n\t        /** Add row */\n\t        add: function (options) {\n\t            var self = this;\n\t            if (this.$('[id=\"' + options.id + '\"]').length === 0) {\n\t                if (!Utils.isEmpty(options.id)) {\n\t                    var $el = $(this._templateRow({\n\t                        id: options.id,\n\t                        name: options.name\n\t                    }));\n\t                    $el.on('click', function () {\n\t                        $el.remove();\n\t                        self._refresh();\n\t                    });\n\t                    $el.on('mouseover', function () {\n\t                        $el.addClass('portlet-highlight');\n\t                    });\n\t                    $el.on('mouseout', function () {\n\t                        $el.removeClass('portlet-highlight');\n\t                    });\n\t                    this.portlet.append($el);\n\t                    this._refresh();\n\t                } else {\n\t                    this.message.update({ message: 'Please select a valid ' + this.name + '.', status: 'danger' });\n\t                }\n\t            } else {\n\t                this.message.update({ message: 'This ' + this.name + ' is already in the list.' });\n\t            }\n\t        },\n\t\n\t        /** Update available options */\n\t        update: function (options) {\n\t            this.select.update(options);\n\t        },\n\t\n\t        /** Refresh view */\n\t        _refresh: function () {\n\t            if (this.$('.ui-list-id').length > 0) {\n\t                !this.multiple && this.button.disable();\n\t                this.$('.ui-list-portlet').show();\n\t            } else {\n\t                this.button.enable();\n\t                this.$('.ui-list-portlet').hide();\n\t            }\n\t            this.options.onchange && this.options.onchange();\n\t        },\n\t\n\t        /** Main Template */\n\t        _template: function (options) {\n\t            return '<div class=\"ui-list\">' + '<div class=\"ui-margin-top\">' + '<span class=\"ui-list-button\"/>' + '<span class=\"ui-list-select\"/>' + '</div>' + '<div class=\"ui-list-message\"/>' + '<div class=\"ui-list-portlet\"/>' + '</div>';\n\t        },\n\t\n\t        /** Row Template */\n\t        _templateRow: function (options) {\n\t            return '<div id=\"' + options.id + '\" class=\"ui-list-id\">' + '<span class=\"ui-list-delete fa fa-trash\"/>' + '<span class=\"ui-list-name\">' + options.name + '</span>' + '</div>';\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {/** Base class for options based ui elements **/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Buttons) {\n\t    var Base = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            var self = this;\n\t            this.model = options && options.model || new Backbone.Model({\n\t                visible: true,\n\t                data: [],\n\t                id: Utils.uid(),\n\t                error_text: 'No options available.',\n\t                wait_text: 'Please wait...',\n\t                multiple: false,\n\t                optional: false,\n\t                onchange: function () {}\n\t            }).set(options);\n\t            this.listenTo(this.model, 'change:value', this._changeValue, this);\n\t            this.listenTo(this.model, 'change:wait', this._changeWait, this);\n\t            this.listenTo(this.model, 'change:data', this._changeData, this);\n\t            this.listenTo(this.model, 'change:visible', this._changeVisible, this);\n\t            this.on('change', function () {\n\t                self.model.get('onchange')(self.value());\n\t            });\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var self = this;\n\t            this.$el.empty().removeClass().addClass('ui-options').append(this.$message = $('<div/>')).append(this.$menu = $('<div/>').addClass('ui-options-menu')).append(this.$options = $(this._template()));\n\t\n\t            // add select/unselect all button\n\t            this.all_button = null;\n\t            if (this.model.get('multiple')) {\n\t                this.all_button = new Buttons.ButtonCheck({\n\t                    onclick: function () {\n\t                        self.$('input').prop('checked', self.all_button.value() !== 0);\n\t                        self.value(self._getValue());\n\t                        self.trigger('change');\n\t                    }\n\t                });\n\t                this.$menu.append(this.all_button.$el);\n\t            }\n\t\n\t            // finalize dom\n\t            this._changeData();\n\t            this._changeWait();\n\t            this._changeVisible();\n\t        },\n\t\n\t        /** Update available options */\n\t        update: function (options) {\n\t            this.model.set('data', options);\n\t        },\n\t\n\t        _changeData: function () {\n\t            var self = this;\n\t            this.$options.empty();\n\t            if (this._templateOptions) {\n\t                this.$options.append(this._templateOptions(this.model.get('data')));\n\t            } else {\n\t                _.each(this.model.get('data'), function (option) {\n\t                    self.$options.append($(self._templateOption(option)).addClass('ui-option').tooltip({ title: option.tooltip, placement: 'bottom' }));\n\t                });\n\t            }\n\t            var self = this;\n\t            this.$('input').on('change', function () {\n\t                self.value(self._getValue());\n\t                self.trigger('change');\n\t            });\n\t            this._changeValue();\n\t            this._changeWait();\n\t        },\n\t\n\t        _changeVisible: function () {\n\t            this.$el[this.model.get('visible') ? 'show' : 'hide']();\n\t        },\n\t\n\t        _changeWait: function () {\n\t            if (this.model.get('wait')) {\n\t                if (this.length() === 0) {\n\t                    this._messageShow(this.model.get('wait_text'), 'info');\n\t                    this.$options.hide();\n\t                    this.$menu.hide();\n\t                }\n\t            } else {\n\t                if (this.length() === 0) {\n\t                    this._messageShow(this.model.get('error_text'), 'danger');\n\t                    this.$options.hide();\n\t                    this.$menu.hide();\n\t                } else {\n\t                    this.$message.hide();\n\t                    this.$options.css('display', 'inline-block');\n\t                    this.$menu.show();\n\t                }\n\t            }\n\t        },\n\t\n\t        _changeValue: function () {\n\t            this._setValue(this.model.get('value'));\n\t            if (this._getValue() === null && !this.model.get('multiple') && !this.model.get('optional')) {\n\t                this._setValue(this.first());\n\t            }\n\t            this.all_button && this.all_button.value($.isArray(this._getValue()) ? this._getValue().length : 0, this.length());\n\t        },\n\t\n\t        /** Return/Set current selection */\n\t        value: function (new_value) {\n\t            new_value !== undefined && this.model.set('value', new_value);\n\t            return this._getValue();\n\t        },\n\t\n\t        /** Return first available option */\n\t        first: function () {\n\t            var options = this.$('input').first();\n\t            return options.length > 0 ? options.val() : null;\n\t        },\n\t\n\t        /** Show a spinner indicating that the select options are currently loaded */\n\t        wait: function () {\n\t            this.model.set('wait', true);\n\t        },\n\t\n\t        /** Hide spinner indicating that the request has been completed */\n\t        unwait: function () {\n\t            this.model.set('wait', false);\n\t        },\n\t\n\t        /** Returns the number of options */\n\t        length: function () {\n\t            return this.$('.ui-option').length;\n\t        },\n\t\n\t        /** Set value to dom */\n\t        _setValue: function (new_value) {\n\t            var self = this;\n\t            if (new_value !== undefined) {\n\t                this.$('input').prop('checked', false);\n\t                if (new_value !== null) {\n\t                    var values = $.isArray(new_value) ? new_value : [new_value];\n\t                    _.each(values, function (v) {\n\t                        self.$('input[value=\"' + v + '\"]').first().prop('checked', true);\n\t                    });\n\t                }\n\t            }\n\t        },\n\t\n\t        /** Return current selection */\n\t        _getValue: function () {\n\t            var selected = [];\n\t            this.$(':checked').each(function () {\n\t                selected.push($(this).val());\n\t            });\n\t            if (Utils.isEmpty(selected)) {\n\t                return null;\n\t            }\n\t            return this.model.get('multiple') ? selected : selected[0];\n\t        },\n\t\n\t        /** Show message instead if options */\n\t        _messageShow: function (text, status) {\n\t            this.$message.show().removeClass().addClass('ui-message alert alert-' + status).html(text);\n\t        },\n\t\n\t        /** Main template function */\n\t        _template: function () {\n\t            return $('<div/>').addClass('ui-options-list');\n\t        }\n\t    });\n\t\n\t    /** Iconized **/\n\t    var BaseIcons = Base.extend({\n\t        _templateOption: function (pair) {\n\t            var id = Utils.uid();\n\t            return $('<div/>').addClass('ui-option').append($('<input/>').attr({\n\t                id: id,\n\t                type: this.model.get('type'),\n\t                name: this.model.id,\n\t                value: pair.value })).append($('<label/>').addClass('ui-options-label').attr('for', id).html(pair.label));\n\t        }\n\t    });\n\t\n\t    /** Radio button field **/\n\t    var Radio = {};\n\t    Radio.View = BaseIcons.extend({\n\t        initialize: function (options) {\n\t            options.type = 'radio';\n\t            BaseIcons.prototype.initialize.call(this, options);\n\t        }\n\t    });\n\t\n\t    /** Checkbox options field **/\n\t    var Checkbox = {};\n\t    Checkbox.View = BaseIcons.extend({\n\t        initialize: function (options) {\n\t            options.type = 'checkbox';\n\t            options.multiple = true;\n\t            BaseIcons.prototype.initialize.call(this, options);\n\t        }\n\t    });\n\t\n\t    /** Radio button options field styled as classic buttons **/\n\t    var RadioButton = {};\n\t    RadioButton.View = Base.extend({\n\t        initialize: function (options) {\n\t            Base.prototype.initialize.call(this, options);\n\t        },\n\t\n\t        /** Set current value */\n\t        _setValue: function (new_value) {\n\t            if (new_value !== undefined) {\n\t                this.$('input').prop('checked', false);\n\t                this.$('label').removeClass('active');\n\t                this.$('[value=\"' + new_value + '\"]').prop('checked', true).closest('label').addClass('active');\n\t            }\n\t        },\n\t\n\t        /** Template for a single option */\n\t        _templateOption: function (pair) {\n\t            var $el = $('<label/>').addClass('btn btn-default');\n\t            pair.icon && $el.append($('<i/>').addClass('fa').addClass(pair.icon).addClass(!pair.label && 'no-padding'));\n\t            $el.append($('<input/>').attr({ type: 'radio', name: this.model.id, value: pair.value }));\n\t            pair.label && $el.append(pair.label);\n\t            return $el;\n\t        },\n\t\n\t        /** Main template function */\n\t        _template: function () {\n\t            return $('<div/>').addClass('btn-group ui-radiobutton').attr('data-toggle', 'buttons');\n\t        }\n\t    });\n\t\n\t    return {\n\t        Base: Base,\n\t        BaseIcons: BaseIcons,\n\t        Radio: Radio,\n\t        RadioButton: RadioButton,\n\t        Checkbox: Checkbox\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {/**\n\t *  This class creates/wraps a default html select field as backbone class.\n\t */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Buttons) {\n\t    var View = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            var self = this;\n\t            this.data = [];\n\t            this.data2 = [];\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                cls: 'ui-select',\n\t                error_text: 'No options available',\n\t                empty_text: 'Nothing selected',\n\t                visible: true,\n\t                wait: false,\n\t                multiple: false,\n\t                searchable: true,\n\t                optional: false,\n\t                disabled: false,\n\t                onchange: function () {},\n\t                value: null,\n\t                individual: false,\n\t                pagesize: 20\n\t            }).set(options);\n\t            this.on('change', function () {\n\t                self.model.get('onchange') && self.model.get('onchange')(self.value());\n\t            });\n\t            this.listenTo(this.model, 'change:data', this._changeData, this);\n\t            this.listenTo(this.model, 'change:disabled', this._changeDisabled, this);\n\t            this.listenTo(this.model, 'change:wait', this._changeWait, this);\n\t            this.listenTo(this.model, 'change:visible', this._changeVisible, this);\n\t            this.listenTo(this.model, 'change:value', this._changeValue, this);\n\t            this.listenTo(this.model, 'change:multiple change:searchable change:cls change:id', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var self = this;\n\t            this.model.get('searchable') ? this._renderSearchable() : this._renderClassic();\n\t            this.$el.addClass(this.model.get('cls')).attr('id', this.model.get('id'));\n\t            this.$select.empty().addClass('select').attr('id', this.model.get('id') + '_select').prop('multiple', this.model.get('multiple')).on('change', function () {\n\t                self.value(self._getValue());\n\t                self.trigger('change');\n\t            });\n\t            this._changeData();\n\t            this._changeWait();\n\t            this._changeVisible();\n\t            this._changeDisabled();\n\t        },\n\t\n\t        /** Renders the classic selection field */\n\t        _renderClassic: function () {\n\t            var self = this;\n\t            this.$el.addClass(this.model.get('multiple') ? 'ui-select-multiple' : 'ui-select').append(this.$select = $('<select/>')).append(this.$dropdown = $('<div/>')).append(this.$resize = $('<div/>').append(this.$resize_icon = $('<i/>')));\n\t            if (this.model.get('multiple')) {\n\t                this.$dropdown.hide();\n\t                this.$resize_icon.addClass('fa fa-angle-double-right fa-rotate-45').show();\n\t                this.$resize.removeClass().addClass('icon-resize').show().off('mousedown').on('mousedown', function (event) {\n\t                    var currentY = event.pageY;\n\t                    var currentHeight = self.$select.height();\n\t                    self.minHeight = self.minHeight || currentHeight;\n\t                    $('#dd-helper').show().on('mousemove', function (event) {\n\t                        self.$select.height(Math.max(currentHeight + (event.pageY - currentY), self.minHeight));\n\t                    }).on('mouseup mouseleave', function () {\n\t                        $('#dd-helper').hide().off();\n\t                    });\n\t                });\n\t            } else {\n\t                this.$dropdown.show();\n\t                this.$resize.hide();\n\t                this.$resize_icon.hide();\n\t            }\n\t        },\n\t\n\t        /** Renders the default select2 field */\n\t        _renderSearchable: function () {\n\t            var self = this;\n\t            this.$el.append(this.$select = $('<div/>')).append(this.$dropdown = $('<div/>'));\n\t            this.$dropdown.hide();\n\t            if (!this.model.get('multiple')) {\n\t                this.$dropdown.show().on('click', function () {\n\t                    self.$select.select2 && self.$select.select2('open');\n\t                });\n\t            }\n\t            this.all_button = null;\n\t            if (this.model.get('multiple') && !this.model.get('individual')) {\n\t                this.all_button = new Buttons.ButtonCheck({\n\t                    onclick: function () {\n\t                        var new_value = [];\n\t                        self.all_button.value() !== 0 && _.each(self.model.get('data'), function (option) {\n\t                            new_value.push(option.value);\n\t                        });\n\t                        self.value(new_value);\n\t                        self.trigger('change');\n\t                    }\n\t                });\n\t                this.$el.prepend(this.all_button.$el);\n\t            }\n\t        },\n\t\n\t        /** Matches a search term with a given text */\n\t        _match: function (term, text) {\n\t            return !term || term == '' || String(text).toUpperCase().indexOf(term.toUpperCase()) >= 0;\n\t        },\n\t\n\t        /** Updates the selection options */\n\t        _changeData: function () {\n\t            var self = this;\n\t            this.data = [];\n\t            if (!this.model.get('multiple') && this.model.get('optional')) {\n\t                this.data.push({ value: '__null__', label: self.model.get('empty_text') });\n\t            }\n\t            _.each(this.model.get('data'), function (option) {\n\t                self.data.push(option);\n\t            });\n\t            if (this.length() == 0) {\n\t                this.data.push({ value: '__null__', label: this.model.get('error_text') });\n\t            }\n\t            if (this.model.get('searchable')) {\n\t                this.data2 = [];\n\t                _.each(this.data, function (option, index) {\n\t                    self.data2.push({ order: index, id: option.value, text: option.label, tags: option.tags });\n\t                });\n\t                this.$select.data('select2') && this.$select.select2('destroy');\n\t                this.matched_tags = {};\n\t                this.$select.select2({\n\t                    data: self.data2,\n\t                    closeOnSelect: !this.model.get('multiple'),\n\t                    multiple: this.model.get('multiple'),\n\t                    query: function (q) {\n\t                        self.matched_tags = {};\n\t                        var pagesize = self.model.get('pagesize');\n\t                        var results = _.filter(self.data2, function (e) {\n\t                            var found = false;\n\t                            _.each(e.tags, function (tag) {\n\t                                if (self._match(q.term, tag)) {\n\t                                    found = self.matched_tags[tag] = true;\n\t                                }\n\t                            });\n\t                            return found || self._match(q.term, e.text);\n\t                        });\n\t                        q.callback({\n\t                            results: results.slice((q.page - 1) * pagesize, q.page * pagesize),\n\t                            more: results.length >= q.page * pagesize\n\t                        });\n\t                    },\n\t                    formatResult: function (result) {\n\t                        return _.escape(result.text) + '<div class=\"ui-tags\">' + _.reduce(result.tags, function (memo, tag) {\n\t                            if (self.matched_tags[tag]) {\n\t                                return memo + '&nbsp;' + '<div class=\"label label-info\">' + _.escape(tag) + '</div>';\n\t                            }\n\t                            return memo;\n\t                        }, '') + '</div>';\n\t                    }\n\t                });\n\t                this.$('.select2-container .select2-search input').off('blur');\n\t            } else {\n\t                this.$select.find('option').remove();\n\t                _.each(this.data, function (option) {\n\t                    self.$select.append($('<option/>').attr('value', option.value).html(_.escape(option.label)));\n\t                });\n\t            }\n\t            this.model.set('disabled', this.length() == 0);\n\t            this._changeValue();\n\t        },\n\t\n\t        /** Handles field enabling/disabling, usually used when no options are available */\n\t        _changeDisabled: function () {\n\t            if (this.model.get('searchable')) {\n\t                this.$select.select2(this.model.get('disabled') ? 'disable' : 'enable');\n\t            } else {\n\t                this.$select.prop('disabled', this.model.get('disabled'));\n\t            }\n\t        },\n\t\n\t        /** Searchable fields may display a spinner e.g. while waiting for a server response */\n\t        _changeWait: function () {\n\t            this.$dropdown.removeClass().addClass('icon-dropdown fa').addClass(this.model.get('wait') ? 'fa-spinner fa-spin' : 'fa-caret-down');\n\t        },\n\t\n\t        /** Handles field visibility */\n\t        _changeVisible: function () {\n\t            this.$el[this.model.get('visible') ? 'show' : 'hide']();\n\t            this.$select[this.model.get('visible') ? 'show' : 'hide']();\n\t        },\n\t\n\t        /** Synchronizes the model value with the actually selected field value */\n\t        _changeValue: function () {\n\t            this._setValue(this.model.get('value'));\n\t            if (this.model.get('multiple')) {\n\t                if (this.all_button) {\n\t                    var value = this._getValue();\n\t                    this.all_button.value($.isArray(value) ? value.length : 0, this.length());\n\t                }\n\t            } else if (this._getValue() === null && !this.model.get('optional')) {\n\t                this._setValue(this.first());\n\t            }\n\t        },\n\t\n\t        /** Return/Set current selection */\n\t        value: function (new_value) {\n\t            new_value !== undefined && this.model.set('value', new_value);\n\t            return this._getValue();\n\t        },\n\t\n\t        /** Return the first select option */\n\t        first: function () {\n\t            return this.data.length > 0 ? this.data[0].value : null;\n\t        },\n\t\n\t        /** Check if a value is an existing option */\n\t        exists: function (value) {\n\t            return _.findWhere(this.data, { value: value });\n\t        },\n\t\n\t        /** Return the label/text of the current selection */\n\t        text: function () {\n\t            var v = this._getValue();\n\t            var d = this.exists($.isArray(v) ? v[0] : v);\n\t            return d ? d.label : '';\n\t        },\n\t\n\t        /** Show the select field */\n\t        show: function () {\n\t            this.model.set('visible', true);\n\t        },\n\t\n\t        /** Hide the select field */\n\t        hide: function () {\n\t            this.model.set('visible', false);\n\t        },\n\t\n\t        /** Show a spinner indicating that the select options are currently loaded */\n\t        wait: function () {\n\t            this.model.set('wait', true);\n\t        },\n\t\n\t        /** Hide spinner indicating that the request has been completed */\n\t        unwait: function () {\n\t            this.model.set('wait', false);\n\t        },\n\t\n\t        /** Returns true if the field is disabled */\n\t        disabled: function () {\n\t            return this.model.get('disabled');\n\t        },\n\t\n\t        /** Enable the select field */\n\t        enable: function () {\n\t            this.model.set('disabled', false);\n\t        },\n\t\n\t        /** Disable the select field */\n\t        disable: function () {\n\t            this.model.set('disabled', true);\n\t        },\n\t\n\t        /** Update all available options at once */\n\t        add: function (options, sorter) {\n\t            _.each(this.model.get('data'), function (v) {\n\t                v.keep && !_.findWhere(options, { value: v.value }) && options.push(v);\n\t            });\n\t            sorter && options && options.sort(sorter);\n\t            this.model.set('data', options);\n\t        },\n\t\n\t        /** Update available options */\n\t        update: function (options) {\n\t            this.model.set('data', options);\n\t        },\n\t\n\t        /** Set the custom onchange callback function */\n\t        setOnChange: function (callback) {\n\t            this.model.set('onchange', callback);\n\t        },\n\t\n\t        /** Number of available options */\n\t        length: function () {\n\t            return $.isArray(this.model.get('data')) ? this.model.get('data').length : 0;\n\t        },\n\t\n\t        /** Set value to dom */\n\t        _setValue: function (new_value) {\n\t            var self = this;\n\t            if (new_value === null || new_value === undefined) {\n\t                new_value = '__null__';\n\t            }\n\t            if (this.model.get('multiple')) {\n\t                new_value = $.isArray(new_value) ? new_value : [new_value];\n\t            } else if ($.isArray(new_value)) {\n\t                if (new_value.length > 0) {\n\t                    new_value = new_value[0];\n\t                } else {\n\t                    new_value = '__null__';\n\t                }\n\t            }\n\t            if (this.model.get('searchable')) {\n\t                if ($.isArray(new_value)) {\n\t                    var val = [];\n\t                    _.each(new_value, function (v) {\n\t                        var d = _.findWhere(self.data2, { id: v });\n\t                        d && val.push(d);\n\t                    });\n\t                    new_value = val;\n\t                } else {\n\t                    var d = _.findWhere(this.data2, { id: new_value });\n\t                    new_value = d;\n\t                }\n\t                this.$select.select2('data', new_value);\n\t            } else {\n\t                this.$select.val(new_value);\n\t            }\n\t        },\n\t\n\t        /** Get value from dom */\n\t        _getValue: function () {\n\t            var val = null;\n\t            if (this.model.get('searchable')) {\n\t                var selected = this.$select.select2('data');\n\t                if (selected) {\n\t                    if ($.isArray(selected)) {\n\t                        val = [];\n\t                        selected.sort(function (a, b) {\n\t                            return a.order - b.order;\n\t                        });\n\t                        _.each(selected, function (v) {\n\t                            val.push(v.id);\n\t                        });\n\t                    } else {\n\t                        val = selected.id;\n\t                    }\n\t                }\n\t            } else {\n\t                val = this.$select.val();\n\t            }\n\t            return Utils.isEmpty(val) ? null : val;\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 16 */,\n/* 17 */,\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _, jQuery) {!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n\t    //jquery\n\t    //backbone\n\t], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t    // =============================================================================\n\t    /**\n\t     * view for a popup menu\n\t     */\n\t    var PopupMenu = Backbone.View.extend({\n\t        //TODO: maybe better as singleton off the Galaxy obj\n\t        /** Cache the desired button element and options, set up the button click handler\n\t         *  NOTE: attaches this view as HTML/jQ data on the button for later use.\n\t         */\n\t        initialize: function ($button, options) {\n\t            // default settings\n\t            this.$button = $button;\n\t            if (!this.$button.length) {\n\t                this.$button = $('<div/>');\n\t            }\n\t            this.options = options || [];\n\t            this.$button.data('popupmenu', this);\n\t\n\t            // set up button click -> open menu behavior\n\t            var menu = this;\n\t            this.$button.click(function (event) {\n\t                // if there's already a menu open, remove it\n\t                $('.popmenu-wrapper').remove();\n\t                menu._renderAndShow(event);\n\t                return false;\n\t            });\n\t        },\n\t\n\t        // render the menu, append to the page body at the click position, and set up the 'click-away' handlers, show\n\t        _renderAndShow: function (clickEvent) {\n\t            this.render();\n\t            this.$el.appendTo('body').css(this._getShownPosition(clickEvent)).show();\n\t            this._setUpCloseBehavior();\n\t        },\n\t\n\t        // render the menu\n\t        // this menu doesn't attach itself to the DOM ( see _renderAndShow )\n\t        render: function () {\n\t            // render the menu body absolute and hidden, fill with template\n\t            this.$el.addClass('popmenu-wrapper').hide().css({ position: 'absolute' }).html(this.template(this.$button.attr('id'), this.options));\n\t\n\t            // set up behavior on each link/anchor elem\n\t            if (this.options.length) {\n\t                var menu = this;\n\t                //precondition: there should be one option per li\n\t                this.$el.find('li').each(function (i, li) {\n\t                    var option = menu.options[i];\n\t\n\t                    // if the option has 'func', call that function when the anchor is clicked\n\t                    if (option.func) {\n\t                        $(this).children('a.popupmenu-option').click(function (event) {\n\t                            option.func.call(menu, event, option);\n\t                            // We must preventDefault otherwise clicking \"cancel\"\n\t                            // on a purge or something still navigates and causes\n\t                            // the action.\n\t                            event.preventDefault();\n\t                            // bubble up so that an option click will call the close behavior\n\t                        });\n\t                    }\n\t                });\n\t            }\n\t            return this;\n\t        },\n\t\n\t        template: function (id, options) {\n\t            return ['<ul id=\"', id, '-menu\" class=\"dropdown-menu\">', this._templateOptions(options), '</ul>'].join('');\n\t        },\n\t\n\t        _templateOptions: function (options) {\n\t            if (!options.length) {\n\t                return '<li>(no options)</li>';\n\t            }\n\t            return _.map(options, function (option) {\n\t                if (option.divider) {\n\t                    return '<li class=\"divider\"></li>';\n\t                } else if (option.header) {\n\t                    return ['<li class=\"head\"><a href=\"javascript:void(0);\">', option.html, '</a></li>'].join('');\n\t                }\n\t                var href = option.href || 'javascript:void(0);',\n\t                    target = option.target ? ' target=\"' + option.target + '\"' : '',\n\t                    check = option.checked ? '<span class=\"fa fa-check\"></span>' : '';\n\t                return ['<li><a class=\"popupmenu-option\" href=\"', href, '\"', target, '>', check, option.html, '</a></li>'].join('');\n\t            }).join('');\n\t        },\n\t\n\t        // get the absolute position/offset for the menu\n\t        _getShownPosition: function (clickEvent) {\n\t\n\t            // display menu horiz. centered on click...\n\t            var menuWidth = this.$el.width();\n\t            var x = clickEvent.pageX - menuWidth / 2;\n\t\n\t            // adjust to handle horiz. scroll and window dimensions ( draw entirely on visible screen area )\n\t            x = Math.min(x, $(document).scrollLeft() + $(window).width() - menuWidth - 5);\n\t            x = Math.max(x, $(document).scrollLeft() + 5);\n\t            return {\n\t                top: clickEvent.pageY,\n\t                left: x\n\t            };\n\t        },\n\t\n\t        // bind an event handler to all available frames so that when anything is clicked\n\t        // the menu is removed from the DOM and the event handler unbinds itself\n\t        _setUpCloseBehavior: function () {\n\t            var menu = this;\n\t            //TODO: alternately: focus hack, blocking overlay, jquery.blockui\n\t\n\t            // function to close popup and unbind itself\n\t            function closePopup(event) {\n\t                $(document).off('click.close_popup');\n\t                if (window && window.parent !== window) {\n\t                    try {\n\t                        $(window.parent.document).off(\"click.close_popup\");\n\t                    } catch (err) {}\n\t                } else {\n\t                    try {\n\t                        $('iframe#galaxy_main').contents().off(\"click.close_popup\");\n\t                    } catch (err) {}\n\t                }\n\t                menu.remove();\n\t            }\n\t\n\t            $('html').one(\"click.close_popup\", closePopup);\n\t            if (window && window.parent !== window) {\n\t                try {\n\t                    $(window.parent.document).find('html').one(\"click.close_popup\", closePopup);\n\t                } catch (err) {}\n\t            } else {\n\t                try {\n\t                    $('iframe#galaxy_main').contents().one(\"click.close_popup\", closePopup);\n\t                } catch (err) {}\n\t            }\n\t        },\n\t\n\t        // add a menu option/item at the given index\n\t        addItem: function (item, index) {\n\t            // append to end if no index\n\t            index = index >= 0 ? index : this.options.length;\n\t            this.options.splice(index, 0, item);\n\t            return this;\n\t        },\n\t\n\t        // remove a menu option/item at the given index\n\t        removeItem: function (index) {\n\t            if (index >= 0) {\n\t                this.options.splice(index, 1);\n\t            }\n\t            return this;\n\t        },\n\t\n\t        // search for a menu option by its html\n\t        findIndexByHtml: function (html) {\n\t            for (var i = 0; i < this.options.length; i++) {\n\t                if (_.has(this.options[i], 'html') && this.options[i].html === html) {\n\t                    return i;\n\t                }\n\t            }\n\t            return null;\n\t        },\n\t\n\t        // search for a menu option by its html\n\t        findItemByHtml: function (html) {\n\t            return this.options[this.findIndexByHtml(html)];\n\t        },\n\t\n\t        // string representation\n\t        toString: function () {\n\t            return 'PopupMenu';\n\t        }\n\t    });\n\t    /** shortcut to new for when you don't need to preserve the ref */\n\t    PopupMenu.create = function _create($button, options) {\n\t        return new PopupMenu($button, options);\n\t    };\n\t\n\t    // -----------------------------------------------------------------------------\n\t    // the following class functions are bridges from the original make_popupmenu and make_popup_menus\n\t    // to the newer backbone.js PopupMenu\n\t\n\t    /** Create a PopupMenu from simple map initial_options activated by clicking button_element.\n\t     *      Converts initial_options to object array used by PopupMenu.\n\t     *  @param {jQuery|DOMElement} button_element element which, when clicked, activates menu\n\t     *  @param {Object} initial_options map of key -> values, where\n\t     *      key is option text, value is fn to call when option is clicked\n\t     *  @returns {PopupMenu} the PopupMenu created\n\t     */\n\t    PopupMenu.make_popupmenu = function (button_element, initial_options) {\n\t        var convertedOptions = [];\n\t        _.each(initial_options, function (optionVal, optionKey) {\n\t            var newOption = { html: optionKey };\n\t\n\t            // keys with null values indicate: header\n\t            if (optionVal === null) {\n\t                // !optionVal? (null only?)\n\t                newOption.header = true;\n\t\n\t                // keys with function values indicate: a menu option\n\t            } else if (jQuery.type(optionVal) === 'function') {\n\t                newOption.func = optionVal;\n\t            }\n\t            //TODO:?? any other special optionVals?\n\t            // there was no divider option originally\n\t            convertedOptions.push(newOption);\n\t        });\n\t        return new PopupMenu($(button_element), convertedOptions);\n\t    };\n\t\n\t    /** Find all anchors in $parent (using selector) and covert anchors into a PopupMenu options map.\n\t     *  @param {jQuery} $parent the element that contains the links to convert to options\n\t     *  @param {String} selector jq selector string to find links\n\t     *  @returns {Object[]} the options array to initialize a PopupMenu\n\t     */\n\t    //TODO: lose parent and selector, pass in array of links, use map to return options\n\t    PopupMenu.convertLinksToOptions = function ($parent, selector) {\n\t        $parent = $($parent);\n\t        selector = selector || 'a';\n\t        var options = [];\n\t        $parent.find(selector).each(function (elem, i) {\n\t            var option = {},\n\t                $link = $(elem);\n\t\n\t            // convert link text to the option text (html) and the href into the option func\n\t            option.html = $link.text();\n\t            if ($link.attr('href')) {\n\t                var linkHref = $link.attr('href'),\n\t                    linkTarget = $link.attr('target'),\n\t                    confirmText = $link.attr('confirm');\n\t\n\t                option.func = function () {\n\t                    // if there's a \"confirm\" attribute, throw up a confirmation dialog, and\n\t                    //  if the user cancels - do nothing\n\t                    if (confirmText && !confirm(confirmText)) {\n\t                        return;\n\t                    }\n\t\n\t                    // if there's no confirm attribute, or the user accepted the confirm dialog:\n\t                    switch (linkTarget) {\n\t                        // relocate the center panel\n\t                        case '_parent':\n\t                            window.parent.location = linkHref;\n\t                            break;\n\t\n\t                        // relocate the entire window\n\t                        case '_top':\n\t                            window.top.location = linkHref;\n\t                            break;\n\t\n\t                        // relocate this panel\n\t                        default:\n\t                            window.location = linkHref;\n\t                    }\n\t                };\n\t            }\n\t            options.push(option);\n\t        });\n\t        return options;\n\t    };\n\t\n\t    /** Create a single popupmenu from existing DOM button and anchor elements\n\t     *  @param {jQuery} $buttonElement the element that when clicked will open the menu\n\t     *  @param {jQuery} $menuElement the element that contains the anchors to convert into a menu\n\t     *  @param {String} menuElementLinkSelector jq selector string used to find anchors to be made into menu options\n\t     *  @returns {PopupMenu} the PopupMenu (Backbone View) that can render, control the menu\n\t     */\n\t    PopupMenu.fromExistingDom = function ($buttonElement, $menuElement, menuElementLinkSelector) {\n\t        $buttonElement = $($buttonElement);\n\t        $menuElement = $($menuElement);\n\t        var options = PopupMenu.convertLinksToOptions($menuElement, menuElementLinkSelector);\n\t        // we're done with the menu (having converted it to an options map)\n\t        $menuElement.remove();\n\t        return new PopupMenu($buttonElement, options);\n\t    };\n\t\n\t    /** Create all popupmenus within a document or a more specific element\n\t     *  @param {DOMElement} parent the DOM element in which to search for popupmenus to build (defaults to document)\n\t     *  @param {String} menuSelector jq selector string to find popupmenu menu elements (defaults to \"div[popupmenu]\")\n\t     *  @param {Function} buttonSelectorBuildFn the function to build the jq button selector.\n\t     *      Will be passed $menuElement, parent.\n\t     *      (Defaults to return '#' + $menuElement.attr( 'popupmenu' ); )\n\t     *  @returns {PopupMenu[]} array of popupmenus created\n\t     */\n\t    PopupMenu.make_popup_menus = function (parent, menuSelector, buttonSelectorBuildFn) {\n\t        parent = parent || document;\n\t        // orig. Glx popupmenu menus have a (non-std) attribute 'popupmenu'\n\t        //  which contains the id of the button that activates the menu\n\t        menuSelector = menuSelector || 'div[popupmenu]';\n\t        // default to (orig. Glx) matching button to menu by using the popupmenu attr of the menu as the id of the button\n\t        buttonSelectorBuildFn = buttonSelectorBuildFn || function ($menuElement, parent) {\n\t            return '#' + $menuElement.attr('popupmenu');\n\t        };\n\t\n\t        // aggregate and return all PopupMenus\n\t        var popupMenusCreated = [];\n\t        $(parent).find(menuSelector).each(function () {\n\t            var $menuElement = $(this),\n\t                $buttonElement = $(parent).find(buttonSelectorBuildFn($menuElement, parent));\n\t            popupMenusCreated.push(PopupMenu.fromDom($buttonElement, $menuElement));\n\t            $buttonElement.addClass('popup');\n\t        });\n\t        return popupMenusCreated;\n\t    };\n\t\n\t    // =============================================================================\n\t    return PopupMenu;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3), __webpack_require__(1)))\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {/* This class maps the form dom to an api compatible javascript dictionary. */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n\t    var Manager = Backbone.Model.extend({\n\t        initialize: function (app) {\n\t            this.app = app;\n\t        },\n\t\n\t        /** Creates a checksum. */\n\t        checksum: function () {\n\t            var sum = '';\n\t            var self = this;\n\t            this.app.section.$el.find('.section-row').each(function () {\n\t                var id = $(this).attr('id');\n\t                var field = self.app.field_list[id];\n\t                if (field) {\n\t                    sum += id + ':' + JSON.stringify(field.value && field.value()) + ':' + field.collapsed + ';';\n\t                }\n\t            });\n\t            return sum;\n\t        },\n\t\n\t        /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission. */\n\t        create: function () {\n\t            var self = this;\n\t\n\t            // get raw dictionary from dom\n\t            var dict = {};\n\t            this._iterate(this.app.section.$el, dict);\n\t\n\t            // add to result dictionary, label elements\n\t            var result_dict = {};\n\t            this.flat_dict = {};\n\t            function add(flat_id, input_id, input_value) {\n\t                self.flat_dict[flat_id] = input_id;\n\t                result_dict[flat_id] = input_value;\n\t                self.app.element_list[input_id] && self.app.element_list[input_id].$el.attr('tour_id', flat_id);\n\t            }\n\t            // converter between raw dictionary and job dictionary\n\t            function convert(identifier, head) {\n\t                for (var index in head) {\n\t                    var node = head[index];\n\t                    if (node.input) {\n\t                        var input = node.input;\n\t                        var flat_id = identifier;\n\t                        if (identifier != '') {\n\t                            flat_id += '|';\n\t                        }\n\t                        flat_id += input.name;\n\t                        switch (input.type) {\n\t                            case 'repeat':\n\t                                var section_label = 'section-';\n\t                                var block_indices = [];\n\t                                var block_prefix = null;\n\t                                for (var block_label in node) {\n\t                                    var pos = block_label.indexOf(section_label);\n\t                                    if (pos != -1) {\n\t                                        pos += section_label.length;\n\t                                        block_indices.push(parseInt(block_label.substr(pos)));\n\t                                        if (!block_prefix) {\n\t                                            block_prefix = block_label.substr(0, pos);\n\t                                        }\n\t                                    }\n\t                                }\n\t                                block_indices.sort(function (a, b) {\n\t                                    return a - b;\n\t                                });\n\t                                var index = 0;\n\t                                for (var i in block_indices) {\n\t                                    convert(flat_id + '_' + index++, node[block_prefix + block_indices[i]]);\n\t                                }\n\t                                break;\n\t                            case 'conditional':\n\t                                var value = self.app.field_list[input.id].value();\n\t                                add(flat_id + '|' + input.test_param.name, input.id, value);\n\t                                var selectedCase = matchCase(input, value);\n\t                                if (selectedCase != -1) {\n\t                                    convert(flat_id, head[input.id + '-section-' + selectedCase]);\n\t                                }\n\t                                break;\n\t                            case 'section':\n\t                                convert(!input.flat && flat_id || '', node);\n\t                                break;\n\t                            default:\n\t                                var field = self.app.field_list[input.id];\n\t                                if (field && field.value) {\n\t                                    var value = field.value();\n\t                                    if (input.ignore === undefined || input.ignore != value) {\n\t                                        if (field.collapsed && input.collapsible_value) {\n\t                                            value = input.collapsible_value;\n\t                                        }\n\t                                        add(flat_id, input.id, value);\n\t                                        if (input.payload) {\n\t                                            for (var p_id in input.payload) {\n\t                                                add(p_id, input.id, input.payload[p_id]);\n\t                                            }\n\t                                        }\n\t                                    }\n\t                                }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            convert('', dict);\n\t            return result_dict;\n\t        },\n\t\n\t        /** Matches flat ids to corresponding input element\n\t         * @param{string} flat_id - Flat input id to be looked up.\n\t         */\n\t        match: function (flat_id) {\n\t            return this.flat_dict && this.flat_dict[flat_id];\n\t        },\n\t\n\t        /** Match conditional values to selected cases\n\t        */\n\t        matchCase: function (input, value) {\n\t            return matchCase(input, value);\n\t        },\n\t\n\t        /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n\t        */\n\t        matchModel: function (model, callback) {\n\t            var self = this;\n\t            visitInputs(model.inputs, function (input, name) {\n\t                self.flat_dict[name] && callback(input, self.flat_dict[name]);\n\t            });\n\t        },\n\t\n\t        /** Matches identifier from api response to input elements e.g. used to display validation errors\n\t        */\n\t        matchResponse: function (response) {\n\t            var result = {};\n\t            var self = this;\n\t            function search(id, head) {\n\t                if (typeof head === 'string') {\n\t                    var input_id = self.flat_dict[id];\n\t                    input_id && (result[input_id] = head);\n\t                } else {\n\t                    for (var i in head) {\n\t                        var new_id = i;\n\t                        if (id !== '') {\n\t                            var separator = '|';\n\t                            if (head instanceof Array) {\n\t                                separator = '_';\n\t                            }\n\t                            new_id = id + separator + new_id;\n\t                        }\n\t                        search(new_id, head[i]);\n\t                    }\n\t                }\n\t            }\n\t            search('', response);\n\t            return result;\n\t        },\n\t\n\t        /** Map dom tree to dictionary tree with input elements.\n\t        */\n\t        _iterate: function (parent, dict) {\n\t            var self = this;\n\t            var children = $(parent).children();\n\t            children.each(function () {\n\t                var child = this;\n\t                var id = $(child).attr('id');\n\t                if ($(child).hasClass('section-row')) {\n\t                    var input = self.app.input_list[id];\n\t                    dict[id] = input && { input: input } || {};\n\t                    self._iterate(child, dict[id]);\n\t                } else {\n\t                    self._iterate(child, dict);\n\t                }\n\t            });\n\t        }\n\t    });\n\t\n\t    /** Match conditional values to selected cases\n\t     * @param{dict}   input     - Definition of conditional input parameter\n\t     * @param{dict}   value     - Current value\n\t     */\n\t    var matchCase = function (input, value) {\n\t        if (input.test_param.type == 'boolean') {\n\t            if (value == 'true') {\n\t                value = input.test_param.truevalue || 'true';\n\t            } else {\n\t                value = input.test_param.falsevalue || 'false';\n\t            }\n\t        }\n\t        for (var i in input.cases) {\n\t            if (input.cases[i].value == value) {\n\t                return i;\n\t            }\n\t        }\n\t        return -1;\n\t    };\n\t\n\t    /** Visits tool inputs\n\t     * @param{dict}   inputs    - Nested dictionary of input elements\n\t     * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n\t     */\n\t    var visitInputs = function (inputs, callback, prefix, context) {\n\t        context = $.extend(true, {}, context);\n\t        _.each(inputs, function (input) {\n\t            if (input && input.type && input.name) {\n\t                context[input.name] = input;\n\t            }\n\t        });\n\t        for (var key in inputs) {\n\t            var node = inputs[key];\n\t            node.name = node.name || key;\n\t            var name = prefix ? prefix + '|' + node.name : node.name;\n\t            switch (node.type) {\n\t                case 'repeat':\n\t                    _.each(node.cache, function (cache, j) {\n\t                        visitInputs(cache, callback, name + '_' + j, context);\n\t                    });\n\t                    break;\n\t                case 'conditional':\n\t                    if (node.test_param) {\n\t                        callback(node.test_param, name + '|' + node.test_param.name, context);\n\t                        var selectedCase = matchCase(node, node.test_param.value);\n\t                        if (selectedCase != -1) {\n\t                            visitInputs(node.cases[selectedCase].inputs, callback, name, context);\n\t                        } else {\n\t                            Galaxy.emit.debug('form-data::visitInputs() - Invalid case for ' + name + '.');\n\t                        }\n\t                    } else {\n\t                        Galaxy.emit.debug('form-data::visitInputs() - Conditional test parameter missing for ' + name + '.');\n\t                    }\n\t                    break;\n\t                case 'section':\n\t                    visitInputs(node.inputs, callback, name, context);\n\t                    break;\n\t                default:\n\t                    callback(node, name, context);\n\t            }\n\t        }\n\t    };\n\t\n\t    return {\n\t        Manager: Manager,\n\t        visitInputs: visitInputs\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 20 */,\n/* 21 */,\n/* 22 */,\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {/** This class creates a ui table element. */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n\t    var View = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.options = Utils.merge(options, {\n\t                content: 'No content available.',\n\t                onchange: null,\n\t                ondblclick: null,\n\t                onconfirm: null,\n\t                cls: 'ui-table',\n\t                selectable: true,\n\t                cls_tr: ''\n\t            });\n\t            this.setElement(this._template());\n\t            this.$thead = this.$('thead');\n\t            this.$tbody = this.$('tbody');\n\t            this.$tmessage = this.$('tmessage');\n\t            this.row = this._row();\n\t            this.row_count = 0;\n\t        },\n\t\n\t        events: {\n\t            'click': '_onclick',\n\t            'dblclick': '_ondblclick'\n\t        },\n\t\n\t        /** Add cell to header row */\n\t        addHeader: function ($el) {\n\t            this.row.append($('<th/>').append($el));\n\t        },\n\t\n\t        /** Append header row to table */\n\t        appendHeader: function () {\n\t            this.$thead.append(this.row);\n\t            this.row = $('<tr/>');\n\t        },\n\t\n\t        /** Add cell to row */\n\t        add: function ($el, width, align) {\n\t            var wrapper = $('<td/>');\n\t            if (width) {\n\t                wrapper.css('width', width);\n\t            }\n\t            if (align) {\n\t                wrapper.css('text-align', align);\n\t            }\n\t            this.row.append(wrapper.append($el));\n\t        },\n\t\n\t        /** Append row to table */\n\t        append: function (id, fade) {\n\t            this._commit(id, fade, false);\n\t        },\n\t\n\t        /** Prepend row to table */\n\t        prepend: function (id, fade) {\n\t            this._commit(id, fade, true);\n\t        },\n\t\n\t        /** Helper to get row element */\n\t        get: function (id) {\n\t            return this.$('#' + id);\n\t        },\n\t\n\t        /** Delete row by id */\n\t        del: function (id) {\n\t            var item = this.$tbody.find('#' + id);\n\t            if (item.length > 0) {\n\t                item.remove();\n\t                this.row_count--;\n\t                this._refresh();\n\t            }\n\t        },\n\t\n\t        /** Delete all rows */\n\t        delAll: function () {\n\t            this.$tbody.empty();\n\t            this.row_count = 0;\n\t            this._refresh();\n\t        },\n\t\n\t        /** Set a value i.e. selects/highlights a particular row by id */\n\t        value: function (new_value) {\n\t            if (this.options.selectable) {\n\t                this.before = this.$tbody.find('.current').attr('id');\n\t                if (new_value !== undefined) {\n\t                    this.$tbody.find('tr').removeClass('current');\n\t                    if (new_value) {\n\t                        this.$tbody.find('#' + new_value).addClass('current');\n\t                    }\n\t                }\n\t                var after = this.$tbody.find('.current').attr('id');\n\t                if (after === undefined) {\n\t                    return null;\n\t                } else {\n\t                    if (after != this.before && this.options.onchange) {\n\t                        this.options.onchange(new_value);\n\t                    }\n\t                    return after;\n\t                }\n\t            }\n\t        },\n\t\n\t        /** Return the number of rows */\n\t        size: function () {\n\t            return this.$tbody.find('tr').length;\n\t        },\n\t\n\t        /** Helper to append rows */\n\t        _commit: function (id, fade, prepend) {\n\t            this.del(id);\n\t            this.row.attr('id', id);\n\t            if (prepend) {\n\t                this.$tbody.prepend(this.row);\n\t            } else {\n\t                this.$tbody.append(this.row);\n\t            }\n\t            if (fade) {\n\t                this.row.hide();\n\t                this.row.fadeIn();\n\t            }\n\t            this.row = this._row();\n\t            this.row_count++;\n\t            this._refresh();\n\t        },\n\t\n\t        /** Helper to create new row */\n\t        _row: function () {\n\t            return $('<tr class=\"' + this.options.cls_tr + '\"></tr>');\n\t        },\n\t\n\t        /** Handles onclick events */\n\t        _onclick: function (e) {\n\t            var old_value = this.value();\n\t            var new_value = $(e.target).closest('tr').attr('id');\n\t            if (new_value != '') {\n\t                if (new_value && old_value != new_value) {\n\t                    if (this.options.onconfirm) {\n\t                        this.options.onconfirm(new_value);\n\t                    } else {\n\t                        this.value(new_value);\n\t                    }\n\t                }\n\t            }\n\t        },\n\t\n\t        /** Handles ondblclick events */\n\t        _ondblclick: function (e) {\n\t            var value = this.value();\n\t            if (value && this.options.ondblclick) {\n\t                this.options.ondblclick(value);\n\t            }\n\t        },\n\t\n\t        /** Refresh helper */\n\t        _refresh: function () {\n\t            if (this.row_count == 0) {\n\t                this.$tmessage.show();\n\t            } else {\n\t                this.$tmessage.hide();\n\t            }\n\t        },\n\t\n\t        /** Template */\n\t        _template: function () {\n\t            return '<div>' + '<table class=\"' + this.options.cls + '\">' + '<thead/>' + '<tbody/>' + '</table>' + '<tmessage>' + this.options.content + '</tmessage>' + '<div>';\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 24 */,\n/* 25 */,\n/* 26 */,\n/* 27 */,\n/* 28 */,\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {/**\n\t    This class creates a form input element wrapper\n\t*/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t    return Backbone.View.extend({\n\t        initialize: function (app, options) {\n\t            this.app = app;\n\t            this.app_options = app.model ? app.model.attributes : {};\n\t            this.field = options && options.field || new Backbone.View();\n\t            this.model = options && options.model || new Backbone.Model({\n\t                text_enable: this.app_options.text_enable || 'Enable',\n\t                text_disable: this.app_options.text_disable || 'Disable',\n\t                cls_enable: this.app_options.cls_enable || 'fa fa-caret-square-o-down',\n\t                cls_disable: this.app_options.cls_disable || 'fa fa-caret-square-o-up',\n\t                always_refresh: this.app_options.always_refresh\n\t            }).set(options);\n\t\n\t            // set element and link components\n\t            this.setElement(this._template());\n\t            this.$field = this.$('.ui-form-field');\n\t            this.$info = this.$('.ui-form-info');\n\t            this.$preview = this.$('.ui-form-preview');\n\t            this.$collapsible = this.$('.ui-form-collapsible');\n\t            this.$collapsible_text = this.$('.ui-form-collapsible-text');\n\t            this.$collapsible_icon = this.$('.ui-form-collapsible-icon');\n\t            this.$title = this.$('.ui-form-title');\n\t            this.$title_text = this.$('.ui-form-title-text');\n\t            this.$error_text = this.$('.ui-form-error-text');\n\t            this.$error = this.$('.ui-form-error');\n\t            this.$backdrop = this.$('.ui-form-backdrop');\n\t\n\t            // add field element\n\t            this.$field.prepend(this.field.$el);\n\t\n\t            // decide wether to expand or collapse fields\n\t            var collapsible_value = this.model.get('collapsible_value');\n\t            this.field.collapsed = collapsible_value !== undefined && JSON.stringify(this.model.get('value')) == JSON.stringify(collapsible_value);\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t\n\t            // add click handler\n\t            var self = this;\n\t            this.$collapsible.on('click', function () {\n\t                self.field.collapsed = !self.field.collapsed;\n\t                app.trigger && app.trigger('change');\n\t                self.render();\n\t            });\n\t\n\t            // hide error on value change\n\t            if (this.field.model && !this.model.get('always_refresh')) {\n\t                this.listenTo(this.field.model, 'change:value', function () {\n\t                    self.reset();\n\t                });\n\t            }\n\t        },\n\t\n\t        /** Set backdrop for input element */\n\t        backdrop: function () {\n\t            this.model.set('backdrop', true);\n\t        },\n\t\n\t        /** Set error text */\n\t        error: function (text) {\n\t            this.model.set('error_text', text);\n\t        },\n\t\n\t        /** Reset this view */\n\t        reset: function () {\n\t            !this.model.get('fixed') && this.model.set('error_text', null);\n\t        },\n\t\n\t        render: function () {\n\t            // render help\n\t            $('.tooltip').hide();\n\t            var help_text = this.model.get('help', '');\n\t            var help_argument = this.model.get('argument');\n\t            if (help_argument && help_text.indexOf('(' + help_argument + ')') == -1) {\n\t                help_text += ' (' + help_argument + ')';\n\t            }\n\t            this.$info.html(help_text);\n\t            // render visibility\n\t            this.$el[this.model.get('hidden') ? 'hide' : 'show']();\n\t            // render preview view for collapsed fields\n\t            this.$preview[this.field.collapsed && this.model.get('collapsible_preview') || this.model.get('disabled') ? 'show' : 'hide']().html(_.escape(this.model.get('text_value')));\n\t            // render error messages\n\t            var error_text = this.model.get('error_text');\n\t            this.$error[error_text ? 'show' : 'hide']();\n\t            this.$el[error_text ? 'addClass' : 'removeClass']('ui-error');\n\t            this.$error_text.html(error_text);\n\t            // render backdrop\n\t            this.$backdrop[this.model.get('backdrop') ? 'show' : 'hide']();\n\t            // render input field\n\t            this.field.collapsed || this.model.get('disabled') ? this.$field.hide() : this.$field.show();\n\t            // render input field color and style\n\t            this.field.model && this.field.model.set({ 'color': this.model.get('color'), 'style': this.model.get('style') });\n\t            // render collapsible options\n\t            if (!this.model.get('disabled') && this.model.get('collapsible_value') !== undefined) {\n\t                var collapsible_state = this.field.collapsed ? 'enable' : 'disable';\n\t                this.$title_text.hide();\n\t                this.$collapsible.show();\n\t                this.$collapsible_text.text(this.model.get('label'));\n\t                this.$collapsible_icon.removeClass().addClass('icon').addClass(this.model.get('cls_' + collapsible_state)).attr('data-original-title', this.model.get('text_' + collapsible_state)).tooltip({ placement: 'bottom' });\n\t            } else {\n\t                this.$title_text.show().text(this.model.get('label'));\n\t                this.$collapsible.hide();\n\t            }\n\t        },\n\t\n\t        _template: function () {\n\t            return $('<div/>').addClass('ui-form-element').append($('<div/>').addClass('ui-form-error ui-error').append($('<span/>').addClass('fa fa-arrow-down')).append($('<span/>').addClass('ui-form-error-text'))).append($('<div/>').addClass('ui-form-title').append($('<div/>').addClass('ui-form-collapsible').append($('<i/>').addClass('ui-form-collapsible-icon')).append($('<span/>').addClass('ui-form-collapsible-text'))).append($('<span/>').addClass('ui-form-title-text'))).append($('<div/>').addClass('ui-form-field').append($('<span/>').addClass('ui-form-info')).append($('<div/>').addClass('ui-form-backdrop'))).append($('<div/>').addClass('ui-form-preview'));\n\t        }\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {/**\n\t    This class creates input elements. New input parameter types should be added to the types dictionary.\n\t*/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(5), __webpack_require__(37), __webpack_require__(39), __webpack_require__(38), __webpack_require__(35)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, SelectContent, SelectLibrary, SelectFtp, ColorPicker) {\n\t\n\t    // create form view\n\t    return Backbone.Model.extend({\n\t        /** Available parameter types */\n\t        types: {\n\t            'text': '_fieldText',\n\t            'password': '_fieldText',\n\t            'select': '_fieldSelect',\n\t            'data_column': '_fieldSelect',\n\t            'genomebuild': '_fieldSelect',\n\t            'data': '_fieldData',\n\t            'data_collection': '_fieldData',\n\t            'integer': '_fieldSlider',\n\t            'float': '_fieldSlider',\n\t            'boolean': '_fieldBoolean',\n\t            'drill_down': '_fieldDrilldown',\n\t            'color': '_fieldColor',\n\t            'hidden': '_fieldHidden',\n\t            'hidden_data': '_fieldHidden',\n\t            'baseurl': '_fieldHidden',\n\t            'library_data': '_fieldLibrary',\n\t            'ftpfile': '_fieldFtp',\n\t            'upload': '_fieldUpload'\n\t        },\n\t\n\t        /** Returns an input field for a given field type */\n\t        create: function (input_def) {\n\t            var fieldClass = this.types[input_def.type];\n\t            var field = typeof this[fieldClass] === 'function' ? this[fieldClass].call(this, input_def) : null;\n\t            if (!field) {\n\t                field = input_def.options ? this._fieldSelect(input_def) : this._fieldText(input_def);\n\t                Galaxy.emit.debug('form-parameters::_addRow()', 'Auto matched field type (' + input_def.type + ').');\n\t            }\n\t            input_def.value === undefined && (input_def.value = null);\n\t            field.value(input_def.value);\n\t            return field;\n\t        },\n\t\n\t        /** Data input field */\n\t        _fieldData: function (input_def) {\n\t            return new SelectContent.View({\n\t                id: 'field-' + input_def.id,\n\t                extensions: input_def.extensions,\n\t                optional: input_def.optional,\n\t                multiple: input_def.multiple,\n\t                type: input_def.type,\n\t                flavor: input_def.flavor,\n\t                data: input_def.options,\n\t                onchange: input_def.onchange\n\t            });\n\t        },\n\t\n\t        /** Select/Checkbox/Radio options field */\n\t        _fieldSelect: function (input_def) {\n\t            // show text field e.g. in workflow editor\n\t            if (input_def.is_workflow) {\n\t                return this._fieldText(input_def);\n\t            }\n\t\n\t            // customize properties\n\t            if (input_def.type == 'data_column') {\n\t                input_def.error_text = 'Missing columns in referenced dataset.';\n\t            }\n\t\n\t            // identify available options\n\t            var data = input_def.data;\n\t            if (!data) {\n\t                data = [];\n\t                _.each(input_def.options, function (option) {\n\t                    data.push({ label: option[0], value: option[1] });\n\t                });\n\t            }\n\t\n\t            // identify display type\n\t            var SelectClass = Ui.Select;\n\t            switch (input_def.display) {\n\t                case 'checkboxes':\n\t                    SelectClass = Ui.Checkbox;\n\t                    break;\n\t                case 'radio':\n\t                    SelectClass = Ui.Radio;\n\t                    break;\n\t                case 'radiobutton':\n\t                    SelectClass = Ui.RadioButton;\n\t                    break;\n\t            }\n\t\n\t            // create select field\n\t            return new SelectClass.View({\n\t                id: 'field-' + input_def.id,\n\t                data: data,\n\t                error_text: input_def.error_text || 'No options available',\n\t                multiple: input_def.multiple,\n\t                optional: input_def.optional,\n\t                onchange: input_def.onchange,\n\t                individual: input_def.individual,\n\t                searchable: input_def.flavor !== 'workflow'\n\t            });\n\t        },\n\t\n\t        /** Drill down options field */\n\t        _fieldDrilldown: function (input_def) {\n\t            // show text field e.g. in workflow editor\n\t            if (input_def.is_workflow) {\n\t                return this._fieldText(input_def);\n\t            }\n\t\n\t            // create drill down field\n\t            return new Ui.Drilldown.View({\n\t                id: 'field-' + input_def.id,\n\t                data: input_def.options,\n\t                display: input_def.display,\n\t                optional: input_def.optional,\n\t                onchange: input_def.onchange\n\t            });\n\t        },\n\t\n\t        /** Text input field */\n\t        _fieldText: function (input_def) {\n\t            // field replaces e.g. a select field\n\t            if (input_def.options && input_def.data) {\n\t                input_def.area = input_def.multiple;\n\t                if (Utils.isEmpty(input_def.value)) {\n\t                    input_def.value = null;\n\t                } else {\n\t                    if ($.isArray(input_def.value)) {\n\t                        var str_value = '';\n\t                        for (var i in input_def.value) {\n\t                            str_value += String(input_def.value[i]);\n\t                            if (!input_def.multiple) {\n\t                                break;\n\t                            }\n\t                            str_value += '\\n';\n\t                        }\n\t                        input_def.value = str_value;\n\t                    }\n\t                }\n\t            }\n\t            // create input element\n\t            return new Ui.Input({\n\t                id: 'field-' + input_def.id,\n\t                type: input_def.type,\n\t                area: input_def.area,\n\t                readonly: input_def.readonly,\n\t                placeholder: input_def.placeholder,\n\t                datalist: input_def.datalist,\n\t                onchange: input_def.onchange\n\t            });\n\t        },\n\t\n\t        /** Slider field */\n\t        _fieldSlider: function (input_def) {\n\t            return new Ui.Slider.View({\n\t                id: 'field-' + input_def.id,\n\t                precise: input_def.type == 'float',\n\t                is_workflow: input_def.is_workflow,\n\t                min: input_def.min,\n\t                max: input_def.max,\n\t                onchange: input_def.onchange\n\t            });\n\t        },\n\t\n\t        /** Hidden field */\n\t        _fieldHidden: function (input_def) {\n\t            return new Ui.Hidden({\n\t                id: 'field-' + input_def.id,\n\t                info: input_def.info\n\t            });\n\t        },\n\t\n\t        /** Boolean field */\n\t        _fieldBoolean: function (input_def) {\n\t            return new Ui.RadioButton.View({\n\t                id: 'field-' + input_def.id,\n\t                data: [{ label: 'Yes', value: 'true' }, { label: 'No', value: 'false' }],\n\t                onchange: input_def.onchange\n\t            });\n\t        },\n\t\n\t        /** Color picker field */\n\t        _fieldColor: function (input_def) {\n\t            return new ColorPicker({\n\t                id: 'field-' + input_def.id,\n\t                onchange: input_def.onchange\n\t            });\n\t        },\n\t\n\t        /** Library dataset field */\n\t        _fieldLibrary: function (input_def) {\n\t            return new SelectLibrary.View({\n\t                id: 'field-' + input_def.id,\n\t                optional: input_def.optional,\n\t                multiple: input_def.multiple,\n\t                onchange: input_def.onchange\n\t            });\n\t        },\n\t\n\t        /** FTP file field */\n\t        _fieldFtp: function (input_def) {\n\t            return new SelectFtp.View({\n\t                id: 'field-' + input_def.id,\n\t                optional: input_def.optional,\n\t                multiple: input_def.multiple,\n\t                onchange: input_def.onchange\n\t            });\n\t        },\n\t\n\t        /** Upload file field */\n\t        _fieldUpload: function (input_def) {\n\t            return new Ui.Upload({\n\t                id: 'field-' + input_def.id,\n\t                onchange: input_def.onchange\n\t            });\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(3), __webpack_require__(1)))\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {/** This class creates a ui component which enables the dynamic creation of portlets */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(9), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Portlet, Ui) {\n\t    var View = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.list = {};\n\t            this.options = Utils.merge(options, {\n\t                title: 'Repeat',\n\t                empty_text: 'Not available.',\n\t                max: null,\n\t                min: null\n\t            });\n\t            this.button_new = new Ui.ButtonIcon({\n\t                icon: 'fa-plus',\n\t                title: 'Insert ' + this.options.title,\n\t                tooltip: 'Add new ' + this.options.title + ' block',\n\t                cls: 'ui-button-icon ui-clear-float form-repeat-add',\n\t                onclick: function () {\n\t                    options.onnew && options.onnew();\n\t                }\n\t            });\n\t            this.setElement($('<div/>').append(this.$list = $('<div/>')).append($('<div/>').append(this.button_new.$el)));\n\t        },\n\t\n\t        /** Number of repeat blocks */\n\t        size: function () {\n\t            return _.size(this.list);\n\t        },\n\t\n\t        /** Add new repeat block */\n\t        add: function (options) {\n\t            if (!options.id || this.list[options.id]) {\n\t                Galaxy.emit.debug('form-repeat::add()', 'Duplicate or invalid repeat block id.');\n\t                return;\n\t            }\n\t            var button_delete = new Ui.ButtonIcon({\n\t                icon: 'fa-trash-o',\n\t                tooltip: 'Delete this repeat block',\n\t                cls: 'ui-button-icon-plain form-repeat-delete',\n\t                onclick: function () {\n\t                    options.ondel && options.ondel();\n\t                }\n\t            });\n\t            var portlet = new Portlet.View({\n\t                id: options.id,\n\t                title: 'placeholder',\n\t                cls: options.cls || 'ui-portlet-repeat',\n\t                operations: { button_delete: button_delete }\n\t            });\n\t            portlet.append(options.$el);\n\t            portlet.$el.addClass('section-row').hide();\n\t            this.list[options.id] = portlet;\n\t            this.$list.append(portlet.$el.fadeIn('fast'));\n\t            this.options.max > 0 && this.size() >= this.options.max && this.button_new.disable();\n\t            this._refresh();\n\t        },\n\t\n\t        /** Delete repeat block */\n\t        del: function (id) {\n\t            if (!this.list[id]) {\n\t                Galaxy.emit.debug('form-repeat::del()', 'Invalid repeat block id.');\n\t                return;\n\t            }\n\t            this.$list.find('#' + id).remove();\n\t            delete this.list[id];\n\t            this.button_new.enable();\n\t            this._refresh();\n\t        },\n\t\n\t        /** Remove all */\n\t        delAll: function () {\n\t            for (var id in this.list) {\n\t                this.del(id);\n\t            }\n\t        },\n\t\n\t        /** Hides add/del options */\n\t        hideOptions: function () {\n\t            this.button_new.$el.hide();\n\t            _.each(this.list, function (portlet) {\n\t                portlet.hideOperation('button_delete');\n\t            });\n\t            _.isEmpty(this.list) && this.$el.append($('<div/>').addClass('ui-form-info').html(this.options.empty_text));\n\t        },\n\t\n\t        /** Refresh view */\n\t        _refresh: function () {\n\t            var index = 0;\n\t            for (var id in this.list) {\n\t                var portlet = this.list[id];\n\t                portlet.title(++index + ': ' + this.options.title);\n\t                portlet[this.size() > this.options.min ? 'showOperation' : 'hideOperation']('button_delete');\n\t            }\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _, jQuery) {/**\n\t    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n\t*/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(5), __webpack_require__(9), __webpack_require__(31), __webpack_require__(29), __webpack_require__(30)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, Portlet, Repeat, InputElement, Parameters) {\n\t    var View = Backbone.View.extend({\n\t        initialize: function (app, options) {\n\t            this.app = app;\n\t            this.inputs = options.inputs;\n\t            this.parameters = new Parameters();\n\t            this.setElement($('<div/>'));\n\t            this.render();\n\t        },\n\t\n\t        /** Render section view */\n\t        render: function () {\n\t            var self = this;\n\t            this.$el.empty();\n\t            _.each(this.inputs, function (input) {\n\t                self.add(input);\n\t            });\n\t        },\n\t\n\t        /** Add a new input element */\n\t        add: function (input) {\n\t            var input_def = jQuery.extend(true, {}, input);\n\t            input_def.id = input.id = Utils.uid();\n\t            this.app.input_list[input_def.id] = input_def;\n\t            switch (input_def.type) {\n\t                case 'conditional':\n\t                    this._addConditional(input_def);\n\t                    break;\n\t                case 'repeat':\n\t                    this._addRepeat(input_def);\n\t                    break;\n\t                case 'section':\n\t                    this._addSection(input_def);\n\t                    break;\n\t                default:\n\t                    this._addRow(input_def);\n\t            }\n\t        },\n\t\n\t        /** Add a conditional block */\n\t        _addConditional: function (input_def) {\n\t            var self = this;\n\t            input_def.test_param.id = input_def.id;\n\t            this.app.model.get('sustain_conditionals') && (input_def.test_param.disabled = true);\n\t            var field = this._addRow(input_def.test_param);\n\t\n\t            // set onchange event for test parameter\n\t            field.model && field.model.set('onchange', function (value) {\n\t                var selectedCase = self.app.data.matchCase(input_def, value);\n\t                for (var i in input_def.cases) {\n\t                    var case_def = input_def.cases[i];\n\t                    var section_row = self.$('#' + input_def.id + '-section-' + i);\n\t                    var nonhidden = false;\n\t                    for (var j in case_def.inputs) {\n\t                        if (!case_def.inputs[j].hidden) {\n\t                            nonhidden = true;\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (i == selectedCase && nonhidden) {\n\t                        section_row.fadeIn('fast');\n\t                    } else {\n\t                        section_row.hide();\n\t                    }\n\t                }\n\t                self.app.trigger('change');\n\t            });\n\t\n\t            // add conditional sub sections\n\t            for (var i in input_def.cases) {\n\t                var sub_section = new View(this.app, { inputs: input_def.cases[i].inputs });\n\t                this._append(sub_section.$el.addClass('ui-form-section'), input_def.id + '-section-' + i);\n\t            }\n\t\n\t            // trigger refresh on conditional input field after all input elements have been created\n\t            field.trigger('change');\n\t        },\n\t\n\t        /** Add a repeat block */\n\t        _addRepeat: function (input_def) {\n\t            var self = this;\n\t            var block_index = 0;\n\t\n\t            // create repeat block element\n\t            var repeat = new Repeat.View({\n\t                title: input_def.title || 'Repeat',\n\t                min: input_def.min,\n\t                max: input_def.max,\n\t                onnew: function () {\n\t                    create(input_def.inputs);self.app.trigger('change');\n\t                }\n\t            });\n\t\n\t            // helper function to create new repeat blocks\n\t            function create(inputs) {\n\t                var sub_section_id = input_def.id + '-section-' + block_index++;\n\t                var sub_section = new View(self.app, { inputs: inputs });\n\t                repeat.add({ id: sub_section_id,\n\t                    $el: sub_section.$el,\n\t                    ondel: function () {\n\t                        repeat.del(sub_section_id);self.app.trigger('change');\n\t                    } });\n\t            }\n\t\n\t            //\n\t            // add parsed/minimum number of repeat blocks\n\t            //\n\t            var n_cache = _.size(input_def.cache);\n\t            for (var i = 0; i < Math.max(Math.max(n_cache, input_def.min || 0), input_def.default || 0); i++) {\n\t                create(i < n_cache ? input_def.cache[i] : input_def.inputs);\n\t            }\n\t\n\t            // hide options\n\t            this.app.model.get('sustain_repeats') && repeat.hideOptions();\n\t\n\t            // create input field wrapper\n\t            var input_element = new InputElement(this.app, {\n\t                label: input_def.title || input_def.name,\n\t                help: input_def.help,\n\t                field: repeat\n\t            });\n\t            this._append(input_element.$el, input_def.id);\n\t        },\n\t\n\t        /** Add a customized section */\n\t        _addSection: function (input_def) {\n\t            var portlet = new Portlet.View({\n\t                title: input_def.title || input_def.name,\n\t                cls: 'ui-portlet-section',\n\t                collapsible: true,\n\t                collapsible_button: true,\n\t                collapsed: !input_def.expanded\n\t            });\n\t            portlet.append(new View(this.app, { inputs: input_def.inputs }).$el);\n\t            portlet.append($('<div/>').addClass('ui-form-info').html(input_def.help));\n\t            this.app.on('expand', function (input_id) {\n\t                portlet.$('#' + input_id).length > 0 && portlet.expand();\n\t            });\n\t            this._append(portlet.$el, input_def.id);\n\t        },\n\t\n\t        /** Add a single input field element */\n\t        _addRow: function (input_def) {\n\t            var self = this;\n\t            var id = input_def.id;\n\t            input_def.onchange = input_def.onchange || function () {\n\t                self.app.trigger('change', id);\n\t            };\n\t            var field = this.parameters.create(input_def);\n\t            this.app.field_list[id] = field;\n\t            var input_element = new InputElement(this.app, {\n\t                name: input_def.name,\n\t                label: input_def.hide_label ? '' : input_def.label || input_def.name,\n\t                value: input_def.value,\n\t                text_value: input_def.text_value,\n\t                collapsible_value: input_def.collapsible_value,\n\t                collapsible_preview: input_def.collapsible_preview,\n\t                help: input_def.help,\n\t                argument: input_def.argument,\n\t                disabled: input_def.disabled,\n\t                color: input_def.color,\n\t                style: input_def.style,\n\t                backdrop: input_def.backdrop,\n\t                hidden: input_def.hidden,\n\t                fixed: input_def.fixed,\n\t                field: field\n\t            });\n\t            this.app.element_list[id] = input_element;\n\t            this._append(input_element.$el, input_def.id);\n\t            return field;\n\t        },\n\t\n\t        /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n\t        _append: function ($el, id) {\n\t            this.$el.append($el.addClass('section-row').attr('id', id));\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3), __webpack_require__(1)))\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t\n\t    // grid model\n\t    return Backbone.Model.extend({\n\t        defaults: {\n\t            url_base: '',\n\t            async: false,\n\t            async_ops: [],\n\t            categorical_filters: [],\n\t            filters: {},\n\t            sort_key: null,\n\t            show_item_checkboxes: false,\n\t            advanced_search: false,\n\t            cur_page: 1,\n\t            num_pages: 1,\n\t            operation: undefined,\n\t            item_ids: undefined\n\t        },\n\t\n\t        /**\n\t         * Return true if operation can be done asynchronously.\n\t         */\n\t        can_async_op: function (op) {\n\t            return _.indexOf(this.attributes.async_ops, op) !== -1;\n\t        },\n\t\n\t        /**\n\t         * Add filtering criterion.\n\t         */\n\t        add_filter: function (key, value, append) {\n\t            // Update URL arg with new condition.            \n\t            if (append) {\n\t                // Update or append value.\n\t                var cur_val = this.attributes.filters[key],\n\t                    new_val;\n\t                if (cur_val === null || cur_val === undefined) {\n\t                    new_val = value;\n\t                } else if (typeof cur_val == 'string') {\n\t                    if (cur_val == 'All') {\n\t                        new_val = value;\n\t                    } else {\n\t                        // Replace string with array.\n\t                        var values = [];\n\t                        values[0] = cur_val;\n\t                        values[1] = value;\n\t                        new_val = values;\n\t                    }\n\t                } else {\n\t                    // Current value is an array.\n\t                    new_val = cur_val;\n\t                    new_val.push(value);\n\t                }\n\t                this.attributes.filters[key] = new_val;\n\t            } else {\n\t                // Replace value.\n\t                this.attributes.filters[key] = value;\n\t            }\n\t        },\n\t\n\t        /**\n\t         * Remove filtering criterion.\n\t         */\n\t        remove_filter: function (key, condition) {\n\t            var cur_val = this.attributes.filters[key];\n\t            if (cur_val === null || cur_val === undefined) {\n\t                return false;\n\t            }\n\t\n\t            if (typeof cur_val === 'string') {\n\t                // overwrite/remove condition.\n\t                this.attributes.filters[key] = '';\n\t            } else {\n\t                // filter contains an array of conditions.\n\t                var condition_index = _.indexOf(cur_val, condition);\n\t                if (condition_index !== -1) {\n\t                    cur_val[condition_index] = '';\n\t                }\n\t            }\n\t        },\n\t\n\t        /**\n\t         * Returns URL data for obtaining a new grid.\n\t         */\n\t        get_url_data: function () {\n\t            var url_data = {\n\t                async: this.attributes.async,\n\t                sort: this.attributes.sort_key,\n\t                page: this.attributes.cur_page,\n\t                show_item_checkboxes: this.attributes.show_item_checkboxes,\n\t                advanced_search: this.attributes.advanced_search\n\t            };\n\t\n\t            // Add operation, item_ids only if they have values.\n\t            if (this.attributes.operation) {\n\t                url_data.operation = this.attributes.operation;\n\t            }\n\t            if (this.attributes.item_ids) {\n\t                url_data.id = this.attributes.item_ids;\n\t            }\n\t\n\t            // Add filter arguments to data, placing \"f-\" in front of all arguments.\n\t            var self = this;\n\t            _.each(_.pairs(self.attributes.filters), function (k) {\n\t                url_data['f-' + k[0]] = k[1];\n\t            });\n\t            return url_data;\n\t        },\n\t\n\t        // Return URL for obtaining a new grid\n\t        get_url: function (args) {\n\t            return this.get('url_base') + '?' + $.param(this.get_url_data()) + '&' + $.param(args);\n\t        }\n\t\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(3), __webpack_require__(1)))\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery, _) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n\t\n\t    // grid view templates\n\t    return {\n\t        // template\n\t        grid: function (options) {\n\t            var tmpl = '';\n\t            if (options.embedded) {\n\t                tmpl = this.grid_header(options) + this.grid_table(options);\n\t            } else {\n\t                tmpl = '<div class=\"loading-elt-overlay\"></div>' + '<table>' + '<tr>' + '<td width=\"75%\">' + this.grid_header(options) + '</td>' + '<td></td>' + '<td></td>' + '</tr>' + '<tr>' + '<td width=\"100%\" id=\"grid-message\" valign=\"top\"></td>' + '<td></td>' + '<td></td>' + '</tr>' + '</table>' + this.grid_table(options);\n\t            }\n\t\n\t            // add info text\n\t            if (options.info_text) {\n\t                tmpl += '<br><div class=\"toolParamHelp\" style=\"clear: both;\">' + options.info_text + '</div>';\n\t            }\n\t\n\t            // return\n\t            return tmpl;\n\t        },\n\t\n\t        // template\n\t        grid_table: function (options) {\n\t            return '<form method=\"post\" onsubmit=\"return false;\">' + '<table id=\"grid-table\" class=\"grid\">' + '<thead id=\"grid-table-header\"></thead>' + '<tbody id=\"grid-table-body\"></tbody>' + '<tfoot id=\"grid-table-footer\"></tfoot>' + '</table>' + '</form>';\n\t        },\n\t\n\t        // template\n\t        grid_header: function (options) {\n\t            var tmpl = '<div class=\"grid-header\">';\n\t            if (!options.embedded) {\n\t                tmpl += '<h2>' + options.title + '</h2>';\n\t            }\n\t            if (options.global_actions) {\n\t                tmpl += '<ul class=\"manage-table-actions\">';\n\t                var show_popup = options.global_actions.length >= 3;\n\t                if (show_popup) {\n\t                    tmpl += '<li><a class=\"action-button\" id=\"popup-global-actions\" class=\"menubutton\">Actions</a></li>' + '<div popupmenu=\"popup-global-actions\">';\n\t                }\n\t                for (var i in options.global_actions) {\n\t                    var action = options.global_actions[i];\n\t                    tmpl += '<li>' + '<a class=\"action-button use-target\" target=\"' + action.target + '\" href=\"' + action.url_args + '\" onclick=\"return false;\" >' + action.label + '</a>' + '</li>';\n\t                }\n\t                if (show_popup) {\n\t                    tmpl += '</div>';\n\t                }\n\t                tmpl += '</ul>';\n\t            }\n\t            if (options.insert) {\n\t                tmpl += options.insert;\n\t            }\n\t\n\t            // add grid filters\n\t            tmpl += this.grid_filters(options);\n\t            tmpl += '</div>';\n\t\n\t            // return template\n\t            return tmpl;\n\t        },\n\t\n\t        // template\n\t        header: function (options) {\n\t\n\t            // start\n\t            var tmpl = '<tr>';\n\t\n\t            // add checkbox\n\t            if (options.show_item_checkboxes) {\n\t                tmpl += '<th>';\n\t                if (options.items.length > 0) {\n\t                    tmpl += '<input type=\"checkbox\" id=\"check_all\" name=select_all_checkbox value=\"true\">' + '<input type=\"hidden\" name=select_all_checkbox value=\"true\">';\n\t                }\n\t                tmpl += '</th>';\n\t            }\n\t\n\t            // create header elements\n\t            for (var i in options.columns) {\n\t                var column = options.columns[i];\n\t                if (column.visible) {\n\t                    tmpl += '<th id=\"' + column.key + '-header\">';\n\t                    if (column.href) {\n\t                        tmpl += '<a href=\"' + column.href + '\" class=\"sort-link\" sort_key=\"' + column.key + '\">' + column.label + '</a>';\n\t                    } else {\n\t                        tmpl += column.label;\n\t                    }\n\t                    tmpl += '<span class=\"sort-arrow\">' + column.extra + '</span>' + '</th>';\n\t                }\n\t            }\n\t\n\t            // finalize\n\t            tmpl += '</tr>';\n\t\n\t            // return template\n\t            return tmpl;\n\t        },\n\t\n\t        // template\n\t        body: function (options) {\n\t            // initialize\n\t            var tmpl = '';\n\t            var num_rows_rendered = 0;\n\t            var items_length = options.items.length;\n\t\n\t            // empty grid?\n\t            if (items_length == 0) {\n\t                // No results.\n\t                tmpl += '<tr><td colspan=\"100\"><em>No Items</em></td></tr>';\n\t                num_rows_rendered = 1;\n\t            }\n\t\n\t            // create rows\n\t            for (var i in options.items) {\n\t\n\t                // encode ids\n\t                var item = options.items[i];\n\t                var encoded_id = item.encode_id;\n\t                var popupmenu_id = 'grid-' + i + '-popup';\n\t\n\t                // Tag current\n\t                tmpl += '<tr ';\n\t                if (options.current_item_id == item.id) {\n\t                    tmpl += 'class=\"current\"';\n\t                }\n\t                tmpl += '>';\n\t\n\t                // Item selection column\n\t                if (options.show_item_checkboxes) {\n\t                    tmpl += '<td style=\"width: 1.5em;\">' + '<input type=\"checkbox\" name=\"id\" value=\"' + encoded_id + '\" id=\"' + encoded_id + '\" class=\"grid-row-select-checkbox\" />' + '</td>';\n\t                }\n\t\n\t                // Data columns\n\t                for (var j in options.columns) {\n\t                    var column = options.columns[j];\n\t                    if (column.visible) {\n\t                        // Nowrap\n\t                        var nowrap = '';\n\t                        if (column.nowrap) {\n\t                            nowrap = 'style=\"white-space:nowrap;\"';\n\t                        }\n\t\n\t                        // get column settings\n\t                        var column_settings = item.column_config[column.label];\n\t\n\t                        // load attributes\n\t                        var link = column_settings.link;\n\t                        var value = column_settings.value;\n\t                        var target = column_settings.target;\n\t\n\t                        // unescape value\n\t                        if (jQuery.type(value) === 'string') {\n\t                            value = value.replace(/\\/\\//g, '/');\n\t                        }\n\t\n\t                        // Attach popup menu?\n\t                        var id = '';\n\t                        var cls = '';\n\t                        if (column.attach_popup) {\n\t                            id = 'grid-' + i + '-popup';\n\t                            cls = 'menubutton';\n\t                            if (link != '') {\n\t                                cls += ' split';\n\t                            }\n\t                            cls += ' popup';\n\t                        }\n\t\n\t                        // Check for row wrapping\n\t                        tmpl += '<td ' + nowrap + '>';\n\t\n\t                        // Link\n\t                        if (link) {\n\t                            if (options.operations.length != 0) {\n\t                                tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\" style=\"float: left;\">';\n\t                            }\n\t                            tmpl += '<a class=\"menubutton-label use-target\" target=\"' + target + '\" href=\"' + link + '\" onclick=\"return false;\">' + value + '</a>';\n\t                            if (options.operations.length != 0) {\n\t                                tmpl += '</div>';\n\t                            }\n\t                        } else {\n\t                            tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\"><label id=\"' + column.label_id_prefix + encoded_id + '\" for=\"' + encoded_id + '\">' + (value || '') + '</label></div>';\n\t                        }\n\t                        tmpl += '</td>';\n\t                    }\n\t                }\n\t                tmpl += '</tr>';\n\t                num_rows_rendered++;\n\t            }\n\t            return tmpl;\n\t        },\n\t\n\t        // template\n\t        footer: function (options) {\n\t\n\t            // create template string\n\t            var tmpl = '';\n\t\n\t            // paging\n\t            if (options.use_paging && options.num_pages > 1) {\n\t                // get configuration\n\t                var num_page_links = options.num_page_links;\n\t                var cur_page_num = options.cur_page_num;\n\t                var num_pages = options.num_pages;\n\t\n\t                // First pass on min page.\n\t                var page_link_range = num_page_links / 2;\n\t                var min_page = cur_page_num - page_link_range;\n\t                var min_offset = 0;\n\t                if (min_page <= 0) {\n\t                    // Min page is too low.\n\t                    min_page = 1;\n\t                    min_offset = page_link_range - (cur_page_num - min_page);\n\t                }\n\t\n\t                // Set max page.\n\t                var max_range = page_link_range + min_offset;\n\t                var max_page = cur_page_num + max_range;\n\t                var max_offset;\n\t                if (max_page <= num_pages) {\n\t                    // Max page is fine.\n\t                    max_offset = 0;\n\t                } else {\n\t                    // Max page is too high.\n\t                    max_page = num_pages;\n\t                    // +1 to account for the +1 in the loop below.\n\t                    max_offset = max_range - (max_page + 1 - cur_page_num);\n\t                }\n\t\n\t                // Second and final pass on min page to add any unused\n\t                // offset from max to min.\n\t                if (max_offset != 0) {\n\t                    min_page -= max_offset;\n\t                    if (min_page < 1) {\n\t                        min_page = 1;\n\t                    }\n\t                }\n\t\n\t                // template header\n\t                tmpl += '<tr id=\"page-links-row\">';\n\t                if (options.show_item_checkboxes) {\n\t                    tmpl += '<td></td>';\n\t                }\n\t                tmpl += '<td colspan=\"100\">' + '<span id=\"page-link-container\">' + 'Page:';\n\t\n\t                if (min_page > 1) {\n\t                    tmpl += '<span class=\"page-link\" id=\"page-link-1\"><a href=\"javascript:void(0);\" page_num=\"1\" onclick=\"return false;\">1</a></span> ...';\n\t                }\n\t\n\t                // create page urls\n\t                for (var page_index = min_page; page_index < max_page + 1; page_index++) {\n\t\n\t                    if (page_index == options.cur_page_num) {\n\t                        tmpl += '<span class=\"page-link inactive-link\" id=\"page-link-' + page_index + '\">' + page_index + '</span>';\n\t                    } else {\n\t                        tmpl += '<span class=\"page-link\" id=\"page-link-' + page_index + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + page_index + '\">' + page_index + '</a></span>';\n\t                    }\n\t                }\n\t\n\t                // show last page\n\t                if (max_page < num_pages) {\n\t                    tmpl += '...' + '<span class=\"page-link\" id=\"page-link-' + num_pages + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + num_pages + '\">' + num_pages + '</a></span>';\n\t                }\n\t                tmpl += '</span>';\n\t\n\t                // Show all link\n\t                tmpl += '<span class=\"page-link\" id=\"show-all-link-span\"> | <a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"all\">Show All</a></span>' + '</td>' + '</tr>';\n\t            }\n\t\n\t            // Grid operations for multiple items.\n\t            if (options.show_item_checkboxes) {\n\t                // start template\n\t                tmpl += '<tr>' + '<input type=\"hidden\" id=\"operation\" name=\"operation\" value=\"\">' + '<td></td>' + '<td colspan=\"100\">' + 'For <span class=\"grid-selected-count\"></span> selected items: ';\n\t\n\t                // configure buttons for operations\n\t                for (var i in options.operations) {\n\t                    var operation = options.operations[i];\n\t                    if (operation.allow_multiple) {\n\t                        tmpl += '<input type=\"button\" value=\"' + operation.label + '\" class=\"operation-button action-button\">&nbsp;';\n\t                    }\n\t                }\n\t\n\t                // finalize template\n\t                tmpl += '</td>' + '</tr>';\n\t            }\n\t\n\t            // count global operations\n\t            var found_global = false;\n\t            for (i in options.operations) {\n\t                if (options.operations[i].global_operation) {\n\t                    found_global = true;\n\t                    break;\n\t                }\n\t            }\n\t\n\t            // add global operations\n\t            if (found_global) {\n\t                tmpl += '<tr>' + '<td colspan=\"100\">';\n\t                for (i in options.operations) {\n\t                    var operation = options.operations[i];\n\t                    if (operation.global_operation) {\n\t                        tmpl += '<a class=\"action-button\" href=\"' + operation.global_operation + '\">' + operation.label + '</a>';\n\t                    }\n\t                }\n\t                tmpl += '</td>' + '</tr>';\n\t            }\n\t\n\t            // add legend\n\t            if (options.legend) {\n\t                tmpl += '<tr>' + '<td colspan=\"100\">' + options.legend + '</td>' + '</tr>';\n\t            }\n\t\n\t            // return\n\t            return tmpl;\n\t        },\n\t\n\t        // template\n\t        message: function (options) {\n\t            var status = options.status == 'success' ? 'done' : options.status;\n\t            return '<p>' + '<div class=\"' + status + 'message transient-message\">' + _.escape(options.message) + '</div>' + '<div style=\"clear: both\"></div>' + '</p>';\n\t        },\n\t\n\t        // template\n\t        grid_filters: function (options) {\n\t\n\t            // get filters\n\t            var default_filter_dict = options.default_filter_dict;\n\t            var filters = options.filters;\n\t\n\t            // show advanced search if flag set or if there are filters for advanced search fields\n\t            var advanced_search_display = 'none';\n\t            if (options.advanced_search) {\n\t                advanced_search_display = 'block';\n\t            }\n\t\n\t            // identify columns with advanced filtering\n\t            var show_advanced_search_link = false;\n\t            for (var i in options.columns) {\n\t                var column = options.columns[i];\n\t                if (column.filterable == 'advanced') {\n\t                    var column_key = column.key;\n\t                    var f_key = filters[column_key];\n\t                    var d_key = default_filter_dict[column_key];\n\t                    if (f_key && d_key && f_key != d_key) {\n\t                        advanced_search_display = 'block';\n\t                    }\n\t                    show_advanced_search_link = true;\n\t                }\n\t            }\n\t\n\t            // hide standard search if advanced is shown\n\t            var standard_search_display = 'block';\n\t            if (advanced_search_display == 'block') {\n\t                standard_search_display = 'none';\n\t            }\n\t\n\t            //\n\t            // standard search\n\t            //\n\t            var tmpl = '<div id=\"standard-search\" style=\"display: ' + standard_search_display + ';\">' + '<table>' + '<tr>' + '<td style=\"padding: 0;\">' + '<table>';\n\t\n\t            // add standard filters\n\t            for (var i in options.columns) {\n\t                var column = options.columns[i];\n\t                if (column.filterable == 'standard') {\n\t                    tmpl += this.grid_column_filter(options, column);\n\t                }\n\t            }\n\t\n\t            // finalize standard search\n\t            tmpl += '</table>' + '</td>' + '</tr>' + '<tr>' + '<td>';\n\t\n\t            // show advanced search link in standard display\n\t            if (show_advanced_search_link) {\n\t                tmpl += '<a href=\"\" class=\"advanced-search-toggle\">Advanced Search</a>';\n\t            }\n\t\n\t            // finalize standard search display\n\t            tmpl += '</td>' + '</tr>' + '</table>' + '</div>';\n\t\n\t            //\n\t            // advanced search\n\t            //\n\t            tmpl += '<div id=\"advanced-search\" style=\"display: ' + advanced_search_display + '; margin-top: 5px; border: 1px solid #ccc;\">' + '<table>' + '<tr>' + '<td style=\"text-align: left\" colspan=\"100\">' + '<a href=\"\" class=\"advanced-search-toggle\">Close Advanced Search</a>' + '</td>' + '</tr>';\n\t\n\t            // add advanced filters\n\t            for (var i in options.columns) {\n\t                var column = options.columns[i];\n\t                if (column.filterable == 'advanced') {\n\t                    tmpl += this.grid_column_filter(options, column);\n\t                }\n\t            }\n\t\n\t            // finalize advanced search template\n\t            tmpl += '</table>' + '</div>';\n\t\n\t            // return template\n\t            return tmpl;\n\t        },\n\t\n\t        // template\n\t        grid_column_filter: function (options, column) {\n\t\n\t            // collect parameters\n\t            var default_filter_dict = options.default_filter_dict;\n\t            var filters = options.filters;\n\t            var column_label = column.label;\n\t            var column_key = column.key;\n\t            if (column.filterable == 'advanced') {\n\t                column_label = column_label.toLowerCase();\n\t            }\n\t\n\t            // start\n\t            var tmpl = '<tr>';\n\t\n\t            if (column.filterable == 'advanced') {\n\t                tmpl += '<td align=\"left\" style=\"padding-left: 10px\">' + column_label + ':</td>';\n\t            }\n\t            tmpl += '<td style=\"padding-bottom: 1px;\">';\n\t            if (column.is_text) {\n\t                tmpl += '<form class=\"text-filter-form\" column_key=\"' + column_key + '\" action=\"' + options.url + '\" method=\"get\" >';\n\t                // Carry forward filtering criteria with hidden inputs.\n\t                for (i in options.columns) {\n\t                    var temp_column = options.columns[i];\n\t                    var filter_value = filters[temp_column.key];\n\t                    if (filter_value) {\n\t                        if (filter_value != 'All') {\n\t                            if (temp_column.is_text) {\n\t                                filter_value = JSON.stringify(filter_value);\n\t                            }\n\t                            tmpl += '<input type=\"hidden\" id=\"' + temp_column.key + '\" name=\"f-' + temp_column.key + '\" value=\"' + filter_value + '\"/>';\n\t                        }\n\t                    }\n\t                }\n\t                // Print current filtering criteria and links to delete.\n\t                tmpl += '<span id=\"' + column_key + '-filtering-criteria\">';\n\t\n\t                // add filters\n\t                var column_filter = filters[column_key];\n\t                if (column_filter) {\n\t                    // identify type\n\t                    var type = jQuery.type(column_filter);\n\t\n\t                    // single filter value\n\t                    if (type == 'string') {\n\t                        if (column_filter != 'All') {\n\t                            // append template\n\t                            tmpl += this.filter_element(column_key, column_filter);\n\t                        }\n\t                    }\n\t\n\t                    // multiple filter values\n\t                    if (type == 'array') {\n\t                        for (var i in column_filter) {\n\t                            // get filter\n\t                            var filter = column_filter[i];\n\t\n\t                            // copy filters and remove entry\n\t                            var params = column_filter;\n\t                            params = params.slice(i);\n\t\n\t                            // append template\n\t                            tmpl += this.filter_element(column_key, filter);\n\t                        }\n\t                    }\n\t                }\n\t\n\t                // close span\n\t                tmpl += '</span>';\n\t\n\t                // Set value, size of search input field. Minimum size is 20 characters.\n\t                var value = '';\n\t                if (column.filterable == 'standard') {\n\t                    value = column.label.toLowerCase();\n\t                    var size = value.length;\n\t                    if (size < 20) {\n\t                        size = 20;\n\t                    }\n\t                    // +4 to account for space after placeholder\n\t                    size = size + 4;\n\t                }\n\t\n\t                // print input field for column\n\t                tmpl += '<span class=\"search-box\">' + '<input class=\"search-box-input\" id=\"input-' + column_key + '-filter\" name=\"f-' + column_key + '\" type=\"text\" placeholder=\"' + value + '\" size=\"' + size + '\"/>' + '<button type=\"submit\" style=\"background: transparent; border: none; padding: 4px; margin: 0px;\">' + '<i class=\"fa fa-search\"></i>' + '</button>' + '</span>' + '</form>';\n\t            } else {\n\t                // filter criteria\n\t                tmpl += '<span id=\"' + column_key + '-filtering-criteria\">';\n\t\n\t                // add category filters\n\t                var seperator = false;\n\t                for (var cf_label in options.categorical_filters[column_key]) {\n\t                    // get category filter\n\t                    var cf = options.categorical_filters[column_key][cf_label];\n\t\n\t                    // each filter will have only a single argument, so get that single argument\n\t                    var cf_key = '';\n\t                    var cf_arg = '';\n\t                    for (var key in cf) {\n\t                        cf_key = key;\n\t                        cf_arg = cf[key];\n\t                    }\n\t\n\t                    // add seperator\n\t                    if (seperator) {\n\t                        tmpl += ' | ';\n\t                    }\n\t                    seperator = true;\n\t\n\t                    // add category\n\t                    var filter = filters[column_key];\n\t                    if (filter && cf[column_key] && filter == cf_arg) {\n\t                        tmpl += '<span class=\"categorical-filter ' + column_key + '-filter current-filter\">' + cf_label + '</span>';\n\t                    } else {\n\t                        tmpl += '<span class=\"categorical-filter ' + column_key + '-filter\">' + '<a href=\"javascript:void(0);\" filter_key=\"' + cf_key + '\" filter_val=\"' + cf_arg + '\">' + cf_label + '</a>' + '</span>';\n\t                    }\n\t                }\n\t                tmpl += '</span>';\n\t            }\n\t            tmpl += '</td>' + '</tr>';\n\t\n\t            // return template\n\t            return tmpl;\n\t        },\n\t\n\t        // template for filter items\n\t        filter_element: function (filter_key, filter_value) {\n\t            filter_value = Utils.sanitize(filter_value);\n\t            return '<span class=\"text-filter-val\">' + filter_value + '<a href=\"javascript:void(0);\" filter_key=\"' + filter_key + '\" filter_val=\"' + filter_value + '\">' + '<i class=\"fa fa-times\" style=\"padding-left: 5px; padding-bottom: 6px;\"/>' + '</a>' + '</span>';\n\t        }\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {/** Renders the color picker used e.g. in the tool form **/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n\t    return Backbone.View.extend({\n\t        colors: {\n\t            standard: ['c00000', 'ff0000', 'ffc000', 'ffff00', '92d050', '00b050', '00b0f0', '0070c0', '002060', '7030a0'],\n\t            base: ['ffffff', '000000', 'eeece1', '1f497d', '4f81bd', 'c0504d', '9bbb59', '8064a2', '4bacc6', 'f79646'],\n\t            theme: [['f2f2f2', '7f7f7f', 'ddd9c3', 'c6d9f0', 'dbe5f1', 'f2dcdb', 'ebf1dd', 'e5e0ec', 'dbeef3', 'fdeada'], ['d8d8d8', '595959', 'c4bd97', '8db3e2', 'b8cce4', 'e5b9b7', 'd7e3bc', 'ccc1d9', 'b7dde8', 'fbd5b5'], ['bfbfbf', '3f3f3f', '938953', '548dd4', '95b3d7', 'd99694', 'c3d69b', 'b2a2c7', '92cddc', 'fac08f'], ['a5a5a5', '262626', '494429', '17365d', '366092', '953734', '76923c', '5f497a', '31859b', 'e36c09'], ['7f7f7e', '0c0c0c', '1d1b10', '0f243e', '244061', '632423', '4f6128', '3f3151', '205867', '974806']]\n\t        },\n\t\n\t        initialize: function (options) {\n\t            this.options = Utils.merge(options, {});\n\t            this.setElement(this._template());\n\t            this.$panel = this.$('.ui-color-picker-panel');\n\t            this.$view = this.$('.ui-color-picker-view');\n\t            this.$value = this.$('.ui-color-picker-value');\n\t            this.$header = this.$('.ui-color-picker-header');\n\t            this._build();\n\t            this.visible = false;\n\t            this.value(this.options.value);\n\t            this.$boxes = this.$('.ui-color-picker-box');\n\t            var self = this;\n\t            this.$boxes.on('click', function () {\n\t                self.value($(this).css('background-color'));\n\t                self.$header.trigger('click');\n\t            });\n\t            this.$header.on('click', function () {\n\t                self.visible = !self.visible;\n\t                if (self.visible) {\n\t                    self.$view.fadeIn('fast');\n\t                } else {\n\t                    self.$view.fadeOut('fast');\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Get/set value */\n\t        value: function (new_val) {\n\t            if (new_val !== undefined && new_val !== null) {\n\t                this.$value.css('background-color', new_val);\n\t                this.$('.ui-color-picker-box').empty();\n\t                this.$(this._getValue()).html(this._templateCheck());\n\t                this.options.onchange && this.options.onchange(new_val);\n\t            }\n\t            return this._getValue();\n\t        },\n\t\n\t        /** Get value from dom */\n\t        _getValue: function () {\n\t            var rgb = this.$value.css('background-color');\n\t            rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n\t            if (rgb) {\n\t                function hex(x) {\n\t                    return ('0' + parseInt(x).toString(16)).slice(-2);\n\t                }\n\t                return '#' + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);\n\t            } else {\n\t                return null;\n\t            }\n\t        },\n\t\n\t        /** Build color panel */\n\t        _build: function () {\n\t            this._content({ colors: this.colors.base });\n\t            for (var i in this.colors.theme) {\n\t                var line_def = {};\n\t                if (i == 0) {\n\t                    line_def['bottom'] = true;\n\t                } else if (i != this.colors.theme.length - 1) {\n\t                    line_def['top'] = true;\n\t                    line_def['bottom'] = true;\n\t                } else {\n\t                    line_def['top'] = true;\n\t                }\n\t                line_def['colors'] = this.colors.theme[i];\n\t                this._content(line_def);\n\t            }\n\t            this._content({ colors: this.colors.standard });\n\t        },\n\t\n\t        /** Create content */\n\t        _content: function (options) {\n\t            var colors = options.colors;\n\t            var $content = $(this._templateContent());\n\t            var $line = $content.find('.line');\n\t            this.$panel.append($content);\n\t            for (var i in colors) {\n\t                var $box = $(this._templateBox(colors[i]));\n\t                if (options.top) {\n\t                    $box.css('border-top', 'none');\n\t                    $box.css('border-top-left-radius', '0px');\n\t                    $box.css('border-top-right-radius', '0px');\n\t                }\n\t                if (options.bottom) {\n\t                    $box.css('border-bottom', 'none');\n\t                    $box.css('border-bottom-left-radius', '0px');\n\t                    $box.css('border-bottom-right-radius', '0px');\n\t                }\n\t                $line.append($box);\n\t            }\n\t            return $content;\n\t        },\n\t\n\t        /** Check icon */\n\t        _templateCheck: function () {\n\t            return '<div class=\"ui-color-picker-check fa fa-check\"/>';\n\t        },\n\t\n\t        /** Content template */\n\t        _templateContent: function () {\n\t            return '<div class=\"ui-color-picker-content\">' + '<div class=\"line\"/>' + '</div>';\n\t        },\n\t\n\t        /** Box template */\n\t        _templateBox: function (color) {\n\t            return '<div id=\"' + color + '\" class=\"ui-color-picker-box\" style=\"background-color: #' + color + ';\"/>';\n\t        },\n\t\n\t        /** Main template */\n\t        _template: function () {\n\t            return '<div class=\"ui-color-picker\">' + '<div class=\"ui-color-picker-header\">' + '<div class=\"ui-color-picker-value\"/>' + '<div class=\"ui-color-picker-label\">Select a color</div>' + '</div>' + '<div class=\"ui-color-picker-view ui-input\">' + '<div class=\"ui-color-picker-panel\"/>' + '</div>';\n\t            '</div>';\n\t        }\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function($, _) {/** This class creates/wraps a drill down element. */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(14)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Options) {\n\t\n\t    var View = Options.BaseIcons.extend({\n\t        initialize: function (options) {\n\t            options.type = options.display || 'checkbox';\n\t            options.multiple = options.type == 'checkbox';\n\t            Options.BaseIcons.prototype.initialize.call(this, options);\n\t        },\n\t\n\t        /** Set states for selected values */\n\t        _setValue: function (new_value) {\n\t            Options.BaseIcons.prototype._setValue.call(this, new_value);\n\t            if (new_value !== undefined && new_value !== null && this.header_index) {\n\t                var self = this;\n\t                var values = $.isArray(new_value) ? new_value : [new_value];\n\t                _.each(values, function (v) {\n\t                    var list = self.header_index[v];\n\t                    _.each(list, function (element) {\n\t                        self._setState(element, true);\n\t                    });\n\t                });\n\t            }\n\t        },\n\t\n\t        /** Expand/collapse a sub group */\n\t        _setState: function (header_id, is_expanded) {\n\t            var $button = this.$('.button-' + header_id);\n\t            var $subgroup = this.$('.subgroup-' + header_id);\n\t            $button.data('is_expanded', is_expanded);\n\t            if (is_expanded) {\n\t                $subgroup.show();\n\t                $button.removeClass('fa-plus-square').addClass('fa-minus-square');\n\t            } else {\n\t                $subgroup.hide();\n\t                $button.removeClass('fa-minus-square').addClass('fa-plus-square');\n\t            }\n\t        },\n\t\n\t        /** Template to create options tree */\n\t        _templateOptions: function () {\n\t            var self = this;\n\t            this.header_index = {};\n\t\n\t            // attach event handler\n\t            function attach($el, header_id) {\n\t                var $button = $el.find('.button-' + header_id);\n\t                $button.on('click', function () {\n\t                    self._setState(header_id, !$button.data('is_expanded'));\n\t                });\n\t            }\n\t\n\t            // recursive function which iterates through options\n\t            function iterate($tmpl, options, header) {\n\t                header = header || [];\n\t                for (var i in options) {\n\t                    var level = options[i];\n\t                    var has_options = level.options && level.options.length > 0;\n\t                    var new_header = header.slice(0);\n\t                    self.header_index[level.value] = new_header.slice(0);\n\t                    var $group = $('<div/>');\n\t                    if (has_options) {\n\t                        var header_id = Utils.uid();\n\t                        var $button = $('<span/>').addClass('button-' + header_id).addClass('ui-drilldown-button fa fa-plus-square');\n\t                        var $subgroup = $('<div/>').addClass('subgroup-' + header_id).addClass('ui-drilldown-subgroup');\n\t                        $group.append($('<div/>').append($button).append(self._templateOption({ label: level.name, value: level.value })));\n\t                        new_header.push(header_id);\n\t                        iterate($subgroup, level.options, new_header);\n\t                        $group.append($subgroup);\n\t                        attach($group, header_id);\n\t                    } else {\n\t                        $group.append(self._templateOption({ label: level.name, value: level.value }));\n\t                    }\n\t                    $tmpl.append($group);\n\t                }\n\t            }\n\t\n\t            // iterate through options and create dom\n\t            var $tmpl = $('<div/>');\n\t            iterate($tmpl, this.model.get('data'));\n\t            return $tmpl;\n\t        },\n\t\n\t        /** Template for drill down view */\n\t        _template: function () {\n\t            return $('<div/>').addClass('ui-options-list drilldown-container').attr('id', this.model.id);\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(5), __webpack_require__(15)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, Select) {\n\t\n\t    /** Batch mode variations */\n\t    var Batch = { DISABLED: 'disabled', ENABLED: 'enabled', LINKED: 'linked' };\n\t\n\t    /** List of available content selectors options */\n\t    var Configurations = {\n\t        data: [{ src: 'hda', icon: 'fa-file-o', tooltip: 'Single dataset', multiple: false, batch: Batch.DISABLED }, { src: 'hda', icon: 'fa-files-o', tooltip: 'Multiple datasets', multiple: true, batch: Batch.LINKED }, { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection', multiple: false, batch: Batch.LINKED }],\n\t        data_multiple: [{ src: 'hda', icon: 'fa-files-o', tooltip: 'Multiple datasets', multiple: true, batch: Batch.DISABLED }, { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collections', multiple: true, batch: Batch.DISABLED }],\n\t        data_collection: [{ src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection', multiple: false, batch: Batch.DISABLED }],\n\t        workflow_data: [{ src: 'hda', icon: 'fa-file-o', tooltip: 'Single dataset', multiple: false, batch: Batch.DISABLED }],\n\t        workflow_data_multiple: [{ src: 'hda', icon: 'fa-files-o', tooltip: 'Multiple datasets', multiple: true, batch: Batch.DISABLED }],\n\t        workflow_data_collection: [{ src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection', multiple: false, batch: Batch.DISABLED }],\n\t        module_data: [{ src: 'hda', icon: 'fa-file-o', tooltip: 'Single dataset', multiple: false, batch: Batch.DISABLED }, { src: 'hda', icon: 'fa-files-o', tooltip: 'Multiple datasets', multiple: true, batch: Batch.ENABLED }],\n\t        module_data_collection: [{ src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection', multiple: false, batch: Batch.DISABLED }, { src: 'hdca', icon: 'fa-folder', tooltip: 'Multiple collections', multiple: true, batch: Batch.ENABLED }]\n\t    };\n\t\n\t    /** View for hda and hdca content selector ui elements */\n\t    var View = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            var self = this;\n\t            this.model = options && options.model || new Backbone.Model({\n\t                src_labels: { 'hda': 'dataset', 'hdca': 'dataset collection' },\n\t                pagelimit: 100,\n\t                statustimer: 1000\n\t            }).set(options);\n\t            this.setElement($('<div/>').addClass('ui-select-content'));\n\t            this.button_product = new Ui.RadioButton.View({\n\t                value: 'false',\n\t                data: [{ icon: 'fa fa-chain', value: 'false',\n\t                    tooltip: 'Linked inputs will be run in matched order with other datasets e.g. use this for matching forward and reverse reads.' }, { icon: 'fa fa-chain-broken', value: 'true',\n\t                    tooltip: 'Unlinked dataset inputs will be run against *all* other inputs.' }] });\n\t            var $batch_div = $('<div/>').addClass('ui-form-info').append($('<i/>').addClass('fa fa-sitemap')).append($('<span/>').html('This is a batch mode input field. Separate jobs will be triggered for each dataset selection.'));\n\t            this.$batch = {\n\t                linked: $batch_div.clone(),\n\t                enabled: $batch_div.clone().append($('<div/>').append($('<div/>').addClass('ui-form-title').html('Batch options:')).append(this.button_product.$el)).append($('<div/>').css('clear', 'both'))\n\t            };\n\t\n\t            // add drag-drop event handlers\n\t            this.$el.on('dragenter', function (e) {\n\t                this.lastenter = e.target;self.$el.addClass('ui-dragover');\n\t            }).on('dragover', function (e) {\n\t                e.preventDefault();\n\t            }).on('dragleave', function (e) {\n\t                this.lastenter === e.target && self.$el.removeClass('ui-dragover');\n\t            }).on('drop', function (e) {\n\t                self._handleDrop(e);\n\t            });\n\t\n\t            // track current history elements\n\t            this.history = {};\n\t\n\t            // add listeners\n\t            this.listenTo(this.model, 'change:data', this._changeData, this);\n\t            this.listenTo(this.model, 'change:wait', this._changeWait, this);\n\t            this.listenTo(this.model, 'change:current', this._changeCurrent, this);\n\t            this.listenTo(this.model, 'change:value', this._changeValue, this);\n\t            this.listenTo(this.model, 'change:type change:optional change:multiple change:extensions', this._changeType, this);\n\t            this.render();\n\t\n\t            // add change event\n\t            this.on('change', function () {\n\t                options.onchange && options.onchange(self.value());\n\t            });\n\t        },\n\t\n\t        render: function () {\n\t            this._changeType();\n\t            this._changeValue();\n\t            this._changeWait();\n\t        },\n\t\n\t        /** Indicate that select fields are being updated */\n\t        wait: function () {\n\t            this.model.set('wait', true);\n\t        },\n\t\n\t        /** Indicate that the options update has been completed */\n\t        unwait: function () {\n\t            this.model.set('wait', false);\n\t        },\n\t\n\t        /** Update data representing selectable options */\n\t        update: function (options) {\n\t            this.model.set('data', options);\n\t        },\n\t\n\t        /** Return the currently selected dataset values */\n\t        value: function (new_value) {\n\t            new_value !== undefined && this.model.set('value', new_value);\n\t            var current = this.model.get('current');\n\t            if (this.config[current]) {\n\t                var id_list = this.fields[current].value();\n\t                if (id_list !== null) {\n\t                    id_list = $.isArray(id_list) ? id_list : [id_list];\n\t                    if (id_list.length > 0) {\n\t                        var result = this._batch({ values: [] });\n\t                        for (var i in id_list) {\n\t                            var details = this.history[id_list[i] + '_' + this.config[current].src];\n\t                            if (details) {\n\t                                result.values.push(details);\n\t                            } else {\n\t                                Galaxy.emit.debug('ui-select-content::value()', 'Requested details not found for \\'' + id_list[i] + '\\'.');\n\t                                return null;\n\t                            }\n\t                        }\n\t                        result.values.sort(function (a, b) {\n\t                            return a.hid - b.hid;\n\t                        });\n\t                        return result;\n\t                    }\n\t                }\n\t            } else {\n\t                Galaxy.emit.debug('ui-select-content::value()', 'Invalid value/source \\'' + new_value + '\\'.');\n\t            }\n\t            return null;\n\t        },\n\t\n\t        /** Change of current select field */\n\t        _changeCurrent: function () {\n\t            var self = this;\n\t            _.each(this.fields, function (field, i) {\n\t                if (self.model.get('current') == i) {\n\t                    field.$el.show();\n\t                    _.each(self.$batch, function ($batchfield, batchmode) {\n\t                        $batchfield[self.config[i].batch == batchmode ? 'show' : 'hide']();\n\t                    });\n\t                    self.button_type.value(i);\n\t                } else {\n\t                    field.$el.hide();\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Change of type */\n\t        _changeType: function () {\n\t            var self = this;\n\t\n\t            // identify selector type identifier i.e. [ flavor ]_[ type ]_[ multiple ]\n\t            var config_id = (this.model.get('flavor') ? this.model.get('flavor') + '_' : '') + String(this.model.get('type')) + (this.model.get('multiple') ? '_multiple' : '');\n\t            if (Configurations[config_id]) {\n\t                this.config = Configurations[config_id];\n\t            } else {\n\t                this.config = Configurations['data'];\n\t                Galaxy.emit.debug('ui-select-content::_changeType()', 'Invalid configuration/type id \\'' + config_id + '\\'.');\n\t            }\n\t\n\t            // prepare extension component of error message\n\t            var data = self.model.get('data');\n\t            var extensions = Utils.textify(this.model.get('extensions'));\n\t            var src_labels = this.model.get('src_labels');\n\t\n\t            // build views\n\t            this.fields = [];\n\t            this.button_data = [];\n\t            _.each(this.config, function (c, i) {\n\t                self.button_data.push({\n\t                    value: i,\n\t                    icon: c.icon,\n\t                    tooltip: c.tooltip\n\t                });\n\t                self.fields.push(new Select.View({\n\t                    optional: self.model.get('optional'),\n\t                    multiple: c.multiple,\n\t                    searchable: !c.multiple || data && data[c.src] && data[c.src].length > self.model.get('pagelimit'),\n\t                    individual: true,\n\t                    error_text: 'No ' + (extensions ? extensions + ' ' : '') + (src_labels[c.src] || 'content') + ' available.',\n\t                    onchange: function () {\n\t                        self.trigger('change');\n\t                    }\n\t                }));\n\t            });\n\t            this.button_type = new Ui.RadioButton.View({\n\t                value: this.model.get('current'),\n\t                data: this.button_data,\n\t                onchange: function (value) {\n\t                    self.model.set('current', value);\n\t                    self.trigger('change');\n\t                }\n\t            });\n\t\n\t            // append views\n\t            this.$el.empty();\n\t            var button_width = 0;\n\t            if (this.fields.length > 1) {\n\t                this.$el.append(this.button_type.$el);\n\t                button_width = Math.max(0, this.fields.length * 36) + 'px';\n\t            }\n\t            _.each(this.fields, function (field) {\n\t                self.$el.append(field.$el.css({ 'margin-left': button_width }));\n\t            });\n\t            _.each(this.$batch, function ($batchfield, batchmode) {\n\t                self.$el.append($batchfield.css({ 'margin-left': button_width }));\n\t            });\n\t            this.model.set('current', 0);\n\t            this._changeCurrent();\n\t            this._changeData();\n\t        },\n\t\n\t        /** Change of wait flag */\n\t        _changeWait: function () {\n\t            var self = this;\n\t            _.each(this.fields, function (field) {\n\t                field[self.model.get('wait') ? 'wait' : 'unwait']();\n\t            });\n\t        },\n\t\n\t        /** Change of available options */\n\t        _changeData: function () {\n\t            var options = this.model.get('data');\n\t            var self = this;\n\t            var select_options = {};\n\t            _.each(options, function (items, src) {\n\t                select_options[src] = [];\n\t                _.each(items, function (item) {\n\t                    select_options[src].push({\n\t                        hid: item.hid,\n\t                        keep: item.keep,\n\t                        label: item.hid + ': ' + item.name,\n\t                        value: item.id,\n\t                        tags: item.tags\n\t                    });\n\t                    self.history[item.id + '_' + src] = item;\n\t                });\n\t            });\n\t            _.each(this.config, function (c, i) {\n\t                select_options[c.src] && self.fields[i].add(select_options[c.src], function (a, b) {\n\t                    return b.hid - a.hid;\n\t                });\n\t            });\n\t        },\n\t\n\t        /** Change of incoming value */\n\t        _changeValue: function () {\n\t            var new_value = this.model.get('value');\n\t            if (new_value && new_value.values && new_value.values.length > 0) {\n\t                // create list with content ids\n\t                var list = [];\n\t                _.each(new_value.values, function (value) {\n\t                    list.push(value.id);\n\t                });\n\t                // sniff first suitable field type from config list\n\t                var src = new_value.values[0].src;\n\t                var multiple = new_value.values.length > 1;\n\t                for (var i = 0; i < this.config.length; i++) {\n\t                    var field = this.fields[i];\n\t                    var c = this.config[i];\n\t                    if (c.src == src && [multiple, true].indexOf(c.multiple) !== -1) {\n\t                        this.model.set('current', i);\n\t                        field.value(list);\n\t                        break;\n\t                    }\n\t                }\n\t            } else {\n\t                _.each(this.fields, function (field) {\n\t                    field.value(null);\n\t                });\n\t            }\n\t        },\n\t\n\t        /** Handles drop events e.g. from history panel */\n\t        _handleDrop: function (ev) {\n\t            try {\n\t                var data = this.model.get('data');\n\t                var current = this.model.get('current');\n\t                var config = this.config[current];\n\t                var field = this.fields[current];\n\t                var drop_data = JSON.parse(ev.originalEvent.dataTransfer.getData('text'))[0];\n\t                var new_id = drop_data.id;\n\t                var new_src = drop_data.history_content_type == 'dataset' ? 'hda' : 'hdca';\n\t                var new_value = { id: new_id, src: new_src };\n\t                if (data && _.findWhere(data[new_src], new_value)) {\n\t                    if (config.src == new_src) {\n\t                        var current_value = field.value();\n\t                        if (current_value && config.multiple) {\n\t                            if (current_value.indexOf(new_id) == -1) {\n\t                                current_value.push(new_id);\n\t                            }\n\t                        } else {\n\t                            current_value = new_id;\n\t                        }\n\t                        field.value(current_value);\n\t                    } else {\n\t                        this.model.set('value', { values: [new_value] });\n\t                        this.model.trigger('change:value');\n\t                    }\n\t                    this.trigger('change');\n\t                    this._handleDropStatus('success');\n\t                } else {\n\t                    this._handleDropStatus('danger');\n\t                }\n\t            } catch (e) {\n\t                this._handleDropStatus('danger');\n\t            }\n\t        },\n\t\n\t        /** Highlight drag result */\n\t        _handleDropStatus: function (status) {\n\t            var self = this;\n\t            this.$el.removeClass('ui-dragover').addClass('ui-dragover-' + status);\n\t            setTimeout(function () {\n\t                self.$el.removeClass('ui-dragover-' + status);\n\t            }, this.model.get('statustimer'));\n\t        },\n\t\n\t        /** Assists in identifying the batch mode */\n\t        _batch: function (result) {\n\t            result['batch'] = false;\n\t            var current = this.model.get('current');\n\t            var config = this.config[current];\n\t            if (config.src == 'hdca' && !config.multiple) {\n\t                var hdca = this.history[this.fields[current].value() + '_hdca'];\n\t                if (hdca && hdca.map_over_type) {\n\t                    result['batch'] = true;\n\t                }\n\t            }\n\t            if (config.batch == Batch.LINKED || config.batch == Batch.ENABLED) {\n\t                result['batch'] = true;\n\t                if (config.batch == Batch.ENABLED && this.button_product.value() === 'true') {\n\t                    result['product'] = true;\n\t                }\n\t            }\n\t            return result;\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(13)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, List) {\n\t\n\t    /**\n\t     * FTP file selector\n\t     */\n\t    var View = Backbone.View.extend({\n\t        // initialize\n\t        initialize: function (options) {\n\t            // link this\n\t            var self = this;\n\t\n\t            // create ui-list view to keep track of selected ftp files\n\t            this.ftpfile_list = new List.View({\n\t                name: 'file',\n\t                optional: options.optional,\n\t                multiple: options.multiple,\n\t                onchange: function () {\n\t                    options.onchange && options.onchange(self.value());\n\t                }\n\t            });\n\t\n\t            // create elements\n\t            this.setElement(this.ftpfile_list.$el);\n\t\n\t            // initial fetch of ftps\n\t            Utils.get({\n\t                url: Galaxy.root + 'api/remote_files',\n\t                success: function (response) {\n\t                    var data = [];\n\t                    for (var i in response) {\n\t                        data.push({\n\t                            value: response[i]['path'],\n\t                            label: response[i]['path']\n\t                        });\n\t                    }\n\t                    self.ftpfile_list.update(data);\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Return/Set currently selected ftp datasets */\n\t        value: function (val) {\n\t            return this.ftpfile_list.value(val);\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(5), __webpack_require__(23), __webpack_require__(13)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, Table, List) {\n\t\n\t    // collection of libraries\n\t    var Libraries = Backbone.Collection.extend({\n\t        url: Galaxy.root + 'api/libraries?deleted=false'\n\t    });\n\t\n\t    // collection of dataset\n\t    var LibraryDatasets = Backbone.Collection.extend({\n\t        initialize: function () {\n\t            var self = this;\n\t            this.config = new Backbone.Model({ library_id: null });\n\t            this.config.on('change', function () {\n\t                self.fetch({ reset: true });\n\t            });\n\t        },\n\t        url: function () {\n\t            return Galaxy.root + 'api/libraries/' + this.config.get('library_id') + '/contents';\n\t        }\n\t    });\n\t\n\t    // hda/hdca content selector ui element\n\t    var View = Backbone.View.extend({\n\t        // initialize\n\t        initialize: function (options) {\n\t            // link this\n\t            var self = this;\n\t\n\t            // collections\n\t            this.libraries = new Libraries();\n\t            this.datasets = new LibraryDatasets();\n\t\n\t            // link app and options\n\t            this.options = options;\n\t\n\t            // select field for the library\n\t            // TODO: Remove this once the library API supports searching for library datasets\n\t            this.library_select = new Ui.Select.View({\n\t                onchange: function (value) {\n\t                    self.datasets.config.set('library_id', value);\n\t                }\n\t            });\n\t\n\t            // create ui-list view to keep track of selected data libraries\n\t            this.dataset_list = new List.View({\n\t                name: 'dataset',\n\t                optional: options.optional,\n\t                multiple: options.multiple,\n\t                onchange: function () {\n\t                    self.trigger('change');\n\t                }\n\t            });\n\t\n\t            // add reset handler for fetched libraries\n\t            this.libraries.on('reset', function () {\n\t                var data = [];\n\t                self.libraries.each(function (model) {\n\t                    data.push({\n\t                        value: model.id,\n\t                        label: model.get('name')\n\t                    });\n\t                });\n\t                self.library_select.update(data);\n\t            });\n\t\n\t            // add reset handler for fetched library datasets\n\t            this.datasets.on('reset', function () {\n\t                var data = [];\n\t                var library_current = self.library_select.text();\n\t                if (library_current !== null) {\n\t                    self.datasets.each(function (model) {\n\t                        if (model.get('type') === 'file') {\n\t                            data.push({\n\t                                value: model.id,\n\t                                label: model.get('name')\n\t                            });\n\t                        }\n\t                    });\n\t                }\n\t                self.dataset_list.update(data);\n\t            });\n\t\n\t            // add change event. fires on trigger\n\t            this.on('change', function () {\n\t                options.onchange && options.onchange(self.value());\n\t            });\n\t\n\t            // create elements\n\t            this.setElement(this._template());\n\t            this.$('.library-select').append(this.library_select.$el);\n\t            this.$el.append(this.dataset_list.$el);\n\t\n\t            // initial fetch of libraries\n\t            this.libraries.fetch({\n\t                reset: true,\n\t                success: function () {\n\t                    self.library_select.trigger('change');\n\t                    if (self.options.value !== undefined) {\n\t                        self.value(self.options.value);\n\t                    }\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Return/Set currently selected library datasets */\n\t        value: function (val) {\n\t            return this.dataset_list.value(val);\n\t        },\n\t\n\t        /** Template */\n\t        _template: function () {\n\t            return '<div class=\"ui-select-library\">' + '<div class=\"library ui-margin-bottom\">' + '<span class=\"library-title\">Select Library</span>' + '<span class=\"library-select\"/>' + '</div>' + '</div>';\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n\t    var View = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            var self = this;\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                min: null,\n\t                max: null,\n\t                step: null,\n\t                precise: false,\n\t                split: 10000,\n\t                value: null,\n\t                onchange: function () {}\n\t            }).set(options);\n\t\n\t            // create new element\n\t            this.setElement(this._template());\n\t            this.$el.attr('id', this.model.id);\n\t            this.$text = this.$('.ui-form-slider-text');\n\t            this.$slider = this.$('.ui-form-slider-element');\n\t\n\t            // add text field event\n\t            var pressed = [];\n\t            this.$text.on('change', function () {\n\t                self.value($(this).val());\n\t            }).on('keyup', function (e) {\n\t                pressed[e.which] = false;\n\t            }).on('keydown', function (e) {\n\t                var v = e.which;\n\t                pressed[v] = true;\n\t                if (self.model.get('is_workflow') && pressed[16] && v == 52) {\n\t                    self.value('$');\n\t                    event.preventDefault();\n\t                } else if (!(v == 8 || v == 9 || v == 13 || v == 37 || v == 39 || v >= 48 && v <= 57 && !pressed[16] || v >= 96 && v <= 105 || (v == 190 || v == 110) && $(this).val().indexOf('.') == -1 && self.model.get('precise') || (v == 189 || v == 109) && $(this).val().indexOf('-') == -1 || self._isParameter($(this).val()) || pressed[91] || pressed[17])) {\n\t                    event.preventDefault();\n\t                }\n\t            });\n\t\n\t            // build slider, cannot be rebuild in render\n\t            var opts = this.model.attributes;\n\t            this.has_slider = opts.max !== null && opts.min !== null && opts.max > opts.min;\n\t            var step = opts.step;\n\t            if (!step) {\n\t                if (opts.precise && this.has_slider) {\n\t                    step = (opts.max - opts.min) / opts.split;\n\t                } else {\n\t                    step = 1.0;\n\t                }\n\t            }\n\t            if (this.has_slider) {\n\t                this.$text.addClass('ui-form-slider-left');\n\t                this.$slider.slider({ min: opts.min, max: opts.max, step: step }).on('slide', function (event, ui) {\n\t                    self.value(ui.value);\n\t                });\n\t            } else {\n\t                this.$slider.hide();\n\t            }\n\t\n\t            // add listeners\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var value = this.model.get('value');\n\t            this.has_slider && this.$slider.slider('value', value);\n\t            value !== this.$text.val() && this.$text.val(value);\n\t        },\n\t\n\t        /** Set and return the current value */\n\t        value: function (new_val) {\n\t            var options = this.model.attributes;\n\t            if (new_val !== undefined) {\n\t                if (new_val !== null && new_val !== '' && !this._isParameter(new_val)) {\n\t                    isNaN(new_val) && (new_val = 0);\n\t                    !options.precise && (new_val = Math.round(new_val));\n\t                    options.max !== null && (new_val = Math.min(new_val, options.max));\n\t                    options.min !== null && (new_val = Math.max(new_val, options.min));\n\t                }\n\t                this.model.set('value', new_val);\n\t                this.model.trigger('change');\n\t                options.onchange(new_val);\n\t            }\n\t            return this.model.get('value');\n\t        },\n\t\n\t        /** Return true if the field contains a workflow parameter i.e. $('name') */\n\t        _isParameter: function (value) {\n\t            return this.model.get('is_workflow') && String(value).substring(0, 1) === '$';\n\t        },\n\t\n\t        /** Slider template */\n\t        _template: function () {\n\t            return '<div class=\"ui-form-slider\">' + '<input class=\"ui-form-slider-text\" type=\"text\"/>' + '<div class=\"ui-form-slider-element\"/>' + '</div>';\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 41 */,\n/* 42 */,\n/* 43 */,\n/* 44 */,\n/* 45 */,\n/* 46 */,\n/* 47 */,\n/* 48 */,\n/* 49 */,\n/* 50 */,\n/* 51 */,\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Backbone) {var jQuery = __webpack_require__(1),\n\t    $ = jQuery,\n\t    QUERY_STRING = __webpack_require__(26),\n\t    Ui = __webpack_require__(5);\n\t\n\tvar Router = Backbone.Router.extend({\n\t    // TODO: not many client routes at this point - fill and remove from server.\n\t    // since we're at root here, this may be the last to be routed entirely on the client.\n\t    initialize: function (page, options) {\n\t        this.page = page;\n\t        this.options = options;\n\t    },\n\t\n\t    /** helper to push a new navigation state */\n\t    push: function (url, data) {\n\t        data = data || {};\n\t        data.__identifer = Math.random().toString(36).substr(2);\n\t        if (!$.isEmptyObject(data)) {\n\t            url += url.indexOf('?') == -1 ? '?' : '&';\n\t            url += $.param(data, true);\n\t        }\n\t        Galaxy.params = {};\n\t        this.navigate(url, { 'trigger': true });\n\t    },\n\t\n\t    /** override to parse query string into obj and send to each route */\n\t    execute: function (callback, args, name) {\n\t        Galaxy.debug('router execute:', callback, args, name);\n\t        var queryObj = QUERY_STRING.parse(args.pop());\n\t        args.push(queryObj);\n\t        if (callback) {\n\t            if (this.authenticate(args, name)) {\n\t                callback.apply(this, args);\n\t            } else {\n\t                this.access_denied();\n\t            }\n\t        }\n\t    },\n\t\n\t    authenticate: function (args, name) {\n\t        return true;\n\t    },\n\t\n\t    access_denied: function () {\n\t        this.page.display(new Ui.Message({ status: 'danger', message: 'You must be logged in with proper credentials to make this request.', persistent: true }));\n\t    }\n\t});\n\t\n\tmodule.exports = Router;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ },\n/* 53 */,\n/* 54 */,\n/* 55 */,\n/* 56 */,\n/* 57 */,\n/* 58 */,\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {/** Generic form view */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(10), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Form, Ui) {\n\t\n\t    var View = Backbone.View.extend({\n\t\n\t        initialize: function (options) {\n\t            this.model = new Backbone.Model(options);\n\t            this.url = this.model.get('url');\n\t            this.redirect = this.model.get('redirect');\n\t            this.setElement('<div/>');\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var self = this;\n\t            $.ajax({\n\t                url: Galaxy.root + this.url,\n\t                type: 'GET'\n\t            }).done(function (response) {\n\t                var options = $.extend({}, self.model.attributes, response);\n\t                var form = new Form({\n\t                    title: options.title,\n\t                    message: options.message,\n\t                    status: options.status || 'warning',\n\t                    icon: options.icon,\n\t                    inputs: options.inputs,\n\t                    buttons: {\n\t                        'submit': new Ui.Button({\n\t                            tooltip: options.submit_tooltip,\n\t                            title: options.submit_title || 'Save',\n\t                            icon: options.submit_icon || 'fa-save',\n\t                            cls: 'btn btn-primary ui-clear-float',\n\t                            onclick: function () {\n\t                                self._submit(form);\n\t                            }\n\t                        })\n\t                    }\n\t                });\n\t                self.$el.empty().append(form.$el);\n\t            }).fail(function (response) {\n\t                self.$el.empty().append(new Ui.Message({\n\t                    message: 'Failed to load resource ' + self.url + '.',\n\t                    status: 'danger',\n\t                    persistent: true\n\t                }).$el);\n\t            });\n\t        },\n\t\n\t        _submit: function (form) {\n\t            var self = this;\n\t            $.ajax({\n\t                url: Galaxy.root + self.url,\n\t                data: JSON.stringify(form.data.create()),\n\t                type: 'PUT',\n\t                contentType: 'application/json'\n\t            }).done(function (response) {\n\t                var success_message = { message: response.message, status: 'success', persistent: false };\n\t                if (self.redirect) {\n\t                    window.location = Galaxy.root + self.redirect + '?' + $.param(success_message);\n\t                } else {\n\t                    form.data.matchModel(response, function (input, input_id) {\n\t                        form.field_list[input_id].value(input.value);\n\t                    });\n\t                    self._showMessage(form, success_message);\n\t                }\n\t            }).fail(function (response) {\n\t                self._showMessage(form, { message: response.responseJSON.err_msg, status: 'danger', persistent: false });\n\t            });\n\t        },\n\t\n\t        _showMessage: function (form, options) {\n\t            var $panel = form.$el.parents().filter(function () {\n\t                return ['auto', 'scroll'].indexOf($(this).css('overflow')) != -1;\n\t            }).first();\n\t            $panel.animate({ scrollTop: 0 }, 500);\n\t            form.message.update(options);\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ },\n/* 60 */,\n/* 61 */,\n/* 62 */,\n/* 63 */,\n/* 64 */,\n/* 65 */,\n/* 66 */,\n/* 67 */,\n/* 68 */,\n/* 69 */,\n/* 70 */,\n/* 71 */,\n/* 72 */,\n/* 73 */,\n/* 74 */,\n/* 75 */,\n/* 76 */,\n/* 77 */,\n/* 78 */,\n/* 79 */,\n/* 80 */,\n/* 81 */,\n/* 82 */,\n/* 83 */,\n/* 84 */,\n/* 85 */,\n/* 86 */,\n/* 87 */,\n/* 88 */,\n/* 89 */,\n/* 90 */,\n/* 91 */,\n/* 92 */,\n/* 93 */,\n/* 94 */,\n/* 95 */,\n/* 96 */,\n/* 97 */,\n/* 98 */,\n/* 99 */,\n/* 100 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var _l = __webpack_require__(6);\n\t\n\tvar AdminPanel = Backbone.View.extend({\n\t    initialize: function (page, options) {\n\t        var self = this;\n\t        this.page = page;\n\t        this.root = options.root;\n\t        this.config = options.config;\n\t        this.settings = options.settings;\n\t        this.message = options.message;\n\t        this.status = options.status;\n\t        this.model = new Backbone.Model({\n\t            title: _l('Administration')\n\t        });\n\t        this.categories = new Backbone.Collection([{\n\t            title: 'Server',\n\t            items: [{\n\t                title: 'Data types registry',\n\t                url: 'admin/view_datatypes_registry'\n\t            }, {\n\t                title: 'Data tables registry',\n\t                url: 'admin/view_tool_data_tables'\n\t            }, {\n\t                title: 'Display applications',\n\t                url: 'admin/display_applications'\n\t            }, {\n\t                title: 'Manage jobs',\n\t                url: 'admin/jobs'\n\t            }]\n\t        }, {\n\t            title: 'Tools and Tool Shed',\n\t            items: [{\n\t                title: 'Search Tool Shed',\n\t                url: 'admin_toolshed/browse_tool_sheds',\n\t                enabled: self.settings.is_tool_shed_installed\n\t            }, {\n\t                title: 'Search Tool Shed (Beta)',\n\t                url: 'admin_toolshed/browse_toolsheds',\n\t                enabled: self.settings.is_tool_shed_installed && self.config.enable_beta_ts_api_install\n\t            }, {\n\t                title: 'Monitor installing repositories',\n\t                url: 'admin_toolshed/monitor_repository_installation?installing_repository_ids=' + self.settings.installing_repository_ids,\n\t                enabled: self.settings.installing_repository_ids\n\t            }, {\n\t                title: 'Manage installed tools',\n\t                url: 'admin_toolshed/browse_repositories',\n\t                enabled: self.settings.is_repo_installed\n\t            }, {\n\t                title: 'Reset metadata',\n\t                url: 'admin_toolshed/reset_metadata_on_selected_installed_repositories',\n\t                enabled: self.settings.is_repo_installed\n\t            }, {\n\t                title: 'Download local tool',\n\t                url: 'admin/package_tool'\n\t            }, {\n\t                title: 'Tool lineage',\n\t                url: 'admin/tool_versions',\n\t                target: '__use_router__'\n\t            }, {\n\t                title: 'Reload a tool\\'s configuration',\n\t                url: 'admin/reload_tool'\n\t            }, {\n\t                title: 'Review tool migration stages',\n\t                url: 'admin/review_tool_migration_stages'\n\t            }, {\n\t                title: 'View Tool Error Logs',\n\t                url: 'admin/tool_errors'\n\t            }, {\n\t                title: 'Manage Display Whitelist',\n\t                url: 'admin/sanitize_whitelist'\n\t            }, {\n\t                title: 'Manage Tool Dependencies',\n\t                url: 'admin/manage_tool_dependencies'\n\t            }]\n\t        }, {\n\t            title: 'User Management',\n\t            items: [{\n\t                title: 'Users',\n\t                url: 'admin/users',\n\t                target: '__use_router__'\n\t            }, {\n\t                title: 'Groups',\n\t                url: 'admin/groups',\n\t                target: '__use_router__'\n\t            }, {\n\t                title: 'Roles',\n\t                url: 'admin/roles',\n\t                target: '__use_router__'\n\t            }, {\n\t                title: 'API keys',\n\t                url: 'userskeys/all_users'\n\t            }, {\n\t                title: 'Impersonate a user',\n\t                url: 'admin/impersonate',\n\t                enabled: self.config.allow_user_impersonation\n\t            }]\n\t        }, {\n\t            title: 'Data',\n\t            items: [{\n\t                title: 'Quotas',\n\t                url: 'admin/quotas',\n\t                target: '__use_router__',\n\t                enabled: self.config.enable_quotas\n\t            }, {\n\t                title: 'Data libraries',\n\t                url: 'library_admin/browse_libraries'\n\t            }, {\n\t                title: 'Roles',\n\t                url: 'admin/roles',\n\t                target: '__use_router__'\n\t            }, {\n\t                title: 'Local data',\n\t                url: 'data_manager'\n\t            }]\n\t        }, {\n\t            title: 'Form Definitions',\n\t            items: [{\n\t                title: 'Form definitions',\n\t                url: 'forms/browse_form_definitions'\n\t            }]\n\t        }, {\n\t            title: 'Sample Tracking',\n\t            items: [{\n\t                title: 'Sequencers and external services',\n\t                url: 'external_service/browse_external_services'\n\t            }, {\n\t                title: 'Request types',\n\t                url: 'request_type/browse_request_types'\n\t            }, {\n\t                title: 'Sequencing requests',\n\t                url: 'requests_admin/browse_requests'\n\t            }, {\n\t                title: 'Find samples',\n\t                url: 'requests_common/find_samples?cntrller=requests_admin'\n\t            }]\n\t        }]);\n\t        this.setElement(this._template());\n\t    },\n\t\n\t    render: function () {\n\t        var self = this;\n\t        this.$el.empty();\n\t        this.categories.each(function (category) {\n\t            var $section = $(self._templateSection(category.attributes));\n\t            var $entries = $section.find('.ui-side-section-body');\n\t            _.each(category.get('items'), function (item) {\n\t                if (item.enabled === undefined || item.enabled) {\n\t                    var $link = $('<a/>').attr({ href: self.root + item.url }).text(_l(item.title));\n\t                    if (item.target == '__use_router__') {\n\t                        $link.on('click', function (e) {\n\t                            e.preventDefault();self.page.router.push(item.url);\n\t                        });\n\t                    } else {\n\t                        $link.attr('target', 'galaxy_main');\n\t                    }\n\t                    $entries.append($('<div/>').addClass('ui-side-section-body-title').append($link));\n\t                }\n\t            });\n\t            self.$el.append($section);\n\t        });\n\t        this.page.$('#galaxy_main').prop('src', this.root + 'admin/center?message=' + this.message + '&status=' + this.status);\n\t    },\n\t\n\t    _templateSection: function (options) {\n\t        return ['<div>', '<div class=\"ui-side-section-title\">' + _l(options.title) + '</div>', '<div class=\"ui-side-section-body\"/>', '</div>'].join('');\n\t    },\n\t\n\t    _template: function () {\n\t        return '<div class=\"ui-side-panel\"/>';\n\t    },\n\t\n\t    toString: function () {\n\t        return 'adminPanel';\n\t    }\n\t});\n\t\n\tmodule.exports = AdminPanel;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ }\n]);\n\n\n// WEBPACK FOOTER //\n// admin.bundled.js","var jQuery = require( 'jquery' ),\n    $ = jQuery,\n    GalaxyApp = require( 'galaxy' ).GalaxyApp,\n    AdminPanel = require( './panels/admin-panel' ),\n    FormWrapper = require( 'mvc/form/form-wrapper' ),\n    GridView = require( 'mvc/grid/grid-view' ),\n    Ui = require( 'mvc/ui/ui-misc' ),\n    QueryStringParsing = require( 'utils/query-string-parsing' ),\n    Router = require( 'layout/router' ),\n    Page = require( 'layout/page' );\n\nwindow.app = function app( options, bootstrapped ){\n    window.Galaxy = new GalaxyApp( options, bootstrapped );\n    Galaxy.debug( 'admin app' );\n\n    /** Routes */\n    var AdminRouter = Router.extend({\n        routes: {\n            '(/)admin(/)users' : 'show_users',\n            '(/)admin(/)roles' : 'show_roles',\n            '(/)admin(/)groups' : 'show_groups',\n            '(/)admin(/)tool_versions' : 'show_tool_versions',\n            '(/)admin(/)quotas' : 'show_quotas',\n            '(/)admin(/)forms(/)(:form_id)' : 'show_forms'\n        },\n\n        authenticate: function( args, name ) {\n            return Galaxy.user && Galaxy.user.id && Galaxy.user.get( 'is_admin' );\n        },\n\n        show_users: function() {\n            this.page.display( new GridView( { url_base: Galaxy.root + 'admin/users_list', url_data: Galaxy.params, dict_format: true } ) );\n        },\n\n        show_roles: function() {\n            this.page.display( new GridView( { url_base: Galaxy.root + 'admin/roles_list', url_data: Galaxy.params, dict_format: true } ) );\n        },\n\n        show_groups: function() {\n            this.page.display( new GridView( { url_base: Galaxy.root + 'admin/groups_list', url_data: Galaxy.params, dict_format: true } ) );\n        },\n\n        show_tool_versions: function() {\n            this.page.display( new GridView( { url_base: Galaxy.root + 'admin/tool_versions_list', url_data: Galaxy.params, dict_format: true } ) );\n        },\n\n        show_quotas: function() {\n            this.page.display( new GridView( { url_base: Galaxy.root + 'admin/quotas_list', url_data: Galaxy.params, dict_format: true } ) );\n        },\n\n        show_forms : function( form_id ) {\n            var id = '?id=' + QueryStringParsing.get( 'id' );\n            var form_defs = {\n                reset_user_password: {\n                    title           : 'Reset passwords',\n                    url             : 'admin/reset_user_password' + id,\n                    icon            : 'fa-user',\n                    submit_title    : 'Save new password',\n                    redirect        : 'admin/users'\n                },\n                manage_roles_and_groups_for_user: {\n                    url             : 'admin/manage_roles_and_groups_for_user' + id,\n                    icon            : 'fa-users',\n                    redirect        : 'admin/users'\n                },\n                manage_users_and_groups_for_role: {\n                    url             : 'admin/manage_users_and_groups_for_role' + id,\n                    redirect        : 'admin/roles'\n                },\n                manage_users_and_roles_for_group: {\n                    url             : 'admin/manage_users_and_roles_for_group' + id,\n                    redirect        : 'admin/groups'\n                },\n                manage_users_and_groups_for_quota: {\n                    url             : 'admin/manage_users_and_groups_for_quota' + id,\n                    redirect        : 'admin/quotas'\n                },\n                create_role: {\n                    url             : 'admin/create_role',\n                    redirect        : 'admin/roles'\n                },\n                create_group: {\n                    url             : 'admin/create_group',\n                    redirect        : 'admin/groups'\n                },\n                create_quota: {\n                    url             : 'admin/create_quota',\n                    redirect        : 'admin/quotas'\n                },\n                rename_role: {\n                    url             : 'admin/rename_role' + id,\n                    redirect        : 'admin/roles'\n                },\n                rename_group: {\n                    url             : 'admin/rename_group' + id,\n                    redirect        : 'admin/groups'\n                },\n                rename_quota: {\n                    url             : 'admin/rename_quota' + id,\n                    redirect        : 'admin/quotas'\n                },\n                edit_quota: {\n                    url             : 'admin/edit_quota' + id,\n                    redirect        : 'admin/quotas'\n                },\n                set_quota_default: {\n                    url             : 'admin/set_quota_default' + id,\n                    redirect        : 'admin/quotas'\n                },\n            };\n            this.page.display( new FormWrapper.View ( form_defs[ form_id ] ) );\n        }\n    });\n\n    $(function() {\n        _.extend( options.config, { active_view : 'admin' } );\n        Galaxy.page = new Page.View( _.extend( options, {\n            Left    : AdminPanel,\n            Router  : AdminRouter\n        } ) );\n    });\n};\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/apps/admin.js","/**\n *  This class contains backbone wrappers for basic ui elements such as Images, Labels, Buttons, Input fields etc.\n */\ndefine(['utils/utils',\n    'mvc/ui/ui-select-default',\n    'mvc/ui/ui-slider',\n    'mvc/ui/ui-options',\n    'mvc/ui/ui-drilldown',\n    'mvc/ui/ui-buttons',\n    'mvc/ui/ui-modal'],\n    function( Utils, Select, Slider, Options, Drilldown, Buttons, Modal ) {\n\n    /** Label wrapper */\n    var Label = Backbone.View.extend({\n        tagName: 'label',\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model( options );\n            this.tagName = options.tagName || this.tagName;\n            this.setElement( $( '<' + this.tagName + '/>' ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        title: function( new_title ) {\n            this.model.set( 'title', new_title );\n        },\n        value: function() {\n            return this.model.get( 'title' );\n        },\n        render: function() {\n            this.$el.removeClass()\n                    .addClass( 'ui-label' )\n                    .addClass( this.model.get( 'cls' ) )\n                    .html( this.model.get( 'title' ) );\n            return this;\n        }\n    });\n\n    /** Displays messages used e.g. in the tool form */\n    var Message = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                message     : null,\n                status      : 'info',\n                cls         : '',\n                persistent  : false,\n                fade        : true\n            }).set( options );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        update: function( options ) {\n            this.model.set( options );\n        },\n        render: function() {\n            this.$el.removeClass().addClass( 'ui-message' ).addClass( this.model.get( 'cls' ) );\n            var status = this.model.get( 'status' );\n            if ( this.model.get( 'large' ) ) {\n                this.$el.addClass((( status == 'success' && 'done' ) ||\n                                   ( status == 'danger' && 'error' ) ||\n                                     status ) + 'messagelarge' );\n            } else {\n                this.$el.addClass( 'alert' ).addClass( 'alert-' + status );\n            }\n            if ( this.model.get( 'message' ) ) {\n                this.$el.html( this.messageForDisplay() );\n                this.$el[ this.model.get( 'fade' ) ? 'fadeIn' : 'show' ]();\n                this.timeout && window.clearTimeout( this.timeout );\n                if ( !this.model.get( 'persistent' ) ) {\n                    var self = this;\n                    this.timeout = window.setTimeout( function() {\n                        self.model.set( 'message', '' );\n                    }, 3000 );\n                }\n            } else {\n                this.$el.fadeOut();\n            }\n            return this;\n        },\n        messageForDisplay: function() {\n            return _.escape( this.model.get( 'message' ) );\n        }\n    });\n\n    var UnescapedMessage = Message.extend({\n        messageForDisplay: function() {\n            return this.model.get( 'message' );\n        }\n    });\n\n    /** Renders an input element used e.g. in the tool form */\n    var Input = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                type            : 'text',\n                placeholder     : '',\n                disabled        : false,\n                readonly        : false,\n                visible         : true,\n                cls             : '',\n                area            : false,\n                color           : null,\n                style           : null\n            }).set( options );\n            this.tagName = this.model.get( 'area' ) ? 'textarea' : 'input';\n            this.setElement( $( '<' + this.tagName + '/>' ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        events: {\n            'input': '_onchange'\n        },\n        value: function( new_val ) {\n            new_val !== undefined && this.model.set( 'value', typeof new_val === 'string' ? new_val : '' );\n            return this.model.get( 'value' );\n        },\n        render: function() {\n            var self = this;\n            this.$el.removeClass()\n                    .addClass( 'ui-' + this.tagName )\n                    .addClass( this.model.get( 'cls' ) )\n                    .addClass( this.model.get( 'style' ) )\n                    .attr( 'id', this.model.id )\n                    .attr( 'type', this.model.get( 'type' ) )\n                    .attr( 'placeholder', this.model.get( 'placeholder' ) )\n                    .css( 'color', this.model.get( 'color' ) || '' )\n                    .css( 'border-color', this.model.get( 'color' ) || '' );\n            var datalist = this.model.get( 'datalist' );\n            if ( $.isArray( datalist ) && datalist.length > 0 ) {\n                this.$el.autocomplete( { source : function( request, response ) { response( self.model.get( 'datalist' ) ) },\n                                         change : function() { self._onchange() } } );\n            }\n            if ( this.model.get( 'value' ) !== this.$el.val() ) {\n                this.$el.val( this.model.get( 'value' ) );\n            }\n            _.each( [ 'readonly', 'disabled' ], function( attr_name ) {\n                self.model.get( attr_name ) ? self.$el.attr( attr_name, true ) : self.$el.removeAttr( attr_name );\n            });\n            this.$el[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n            return this;\n        },\n        _onchange: function() {\n            this.value( this.$el.val() );\n            this.model.get( 'onchange' ) && this.model.get( 'onchange' )( this.model.get( 'value' ) );\n        }\n    });\n\n    /** Creates a hidden element input field used e.g. in the tool form */\n    var Hidden = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model( options );\n            this.setElement( $ ( '<div/>' ).append( this.$info = $( '<div/>' ) )\n                                           .append( this.$hidden = $( '<div/>' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        value: function( new_val ) {\n            new_val !== undefined && this.model.set( 'value', new_val );\n            return this.model.get( 'value' );\n        },\n        render: function() {\n            this.$el.attr( 'id', this.model.id );\n            this.$hidden.val( this.model.get( 'value' ) );\n            this.model.get( 'info' ) ? this.$info.show().text( this.model.get( 'info' ) ) : this.$info.hide();\n            return this;\n        }\n    });\n\n    /** Creates a upload element input field */\n    var Upload = Backbone.View.extend({\n        initialize: function( options ) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model( options );\n            this.setElement( $ ( '<div/>' ).append( this.$info = $( '<div/>' ) )\n                                           .append( this.$file = $( '<input/>' ).attr( 'type', 'file' ).addClass( 'ui-margin-bottom' ) )\n                                           .append( this.$text = $( '<textarea/>' ).addClass( 'ui-textarea' ).attr( 'disabled', true ) )\n                                           .append( this.$wait = $( '<i/>' ).addClass( 'fa fa-spinner fa-spin' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.$file.on( 'change', function( e ) { self._readFile( e ) } );\n            this.render();\n        },\n        value: function( new_val ) {\n            new_val !== undefined && this.model.set( 'value', new_val );\n            return this.model.get( 'value' );\n        },\n        render: function() {\n            this.$el.attr( 'id', this.model.id );\n            this.model.get( 'info' ) ? this.$info.show().text( this.model.get( 'info' ) ) : this.$info.hide();\n            this.model.get( 'value' ) ? this.$text.text( this.model.get( 'value' ) ).show() : this.$text.hide();\n            this.model.get( 'wait' ) ? this.$wait.show() : this.$wait.hide();\n            return this;\n        },\n        _readFile: function( e ) {\n            var self = this;\n            var file = e.target.files && e.target.files[ 0 ];\n            if ( file ) {\n                var reader = new FileReader();\n                reader.onload = function() {\n                    self.model.set( { wait: false, value: this.result } );\n                }\n                this.model.set( { wait: true, value: null } );\n                reader.readAsText( file );\n            }\n        }\n    });\n\n    return {\n        Button           : Buttons.ButtonDefault,\n        ButtonIcon       : Buttons.ButtonIcon,\n        ButtonCheck      : Buttons.ButtonCheck,\n        ButtonMenu       : Buttons.ButtonMenu,\n        ButtonLink       : Buttons.ButtonLink,\n        Input            : Input,\n        Label            : Label,\n        Message          : Message,\n        UnescapedMessage : UnescapedMessage,\n        Upload           : Upload,\n        Modal            : Modal,\n        RadioButton      : Options.RadioButton,\n        Checkbox         : Options.Checkbox,\n        Radio            : Options.Radio,\n        Select           : Select,\n        Hidden           : Hidden,\n        Slider           : Slider,\n        Drilldown        : Drilldown\n    }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-misc.js","define([ 'utils/utils', 'mvc/ui/ui-misc' ], function( Utils, Ui ) {\nvar View = Backbone.View.extend({\n    visible     : false,\n    initialize  : function( options ) {\n        var self = this;\n        this.model = options && options.model || new Backbone.Model( {\n            id                  : Utils.uid(),\n            cls                 : 'ui-portlet',\n            title               : '',\n            icon                : '',\n            buttons             : null,\n            body                : null,\n            scrollable          : true,\n            nopadding           : false,\n            operations          : null,\n            collapsible         : false,\n            collapsible_button  : false,\n            collapsed           : false,\n            onchange_title      : null\n        } ).set( options );\n        this.setElement( this._template() );\n\n        // link all dom elements\n        this.$body          = this.$( '.portlet-body' );\n        this.$title_text    = this.$( '.portlet-title-text' );\n        this.$title_icon    = this.$( '.portlet-title-icon' );\n        this.$header        = this.$( '.portlet-header' );\n        this.$content       = this.$( '.portlet-content' );\n        this.$backdrop      = this.$( '.portlet-backdrop' );\n        this.$buttons       = this.$( '.portlet-buttons' );\n        this.$operations    = this.$( '.portlet-operations' );\n\n        // add body to component list\n        this.model.get( 'body' ) && this.append( this.model.get( 'body' ) );\n\n        // add icon for collapsible option\n        this.collapsible_button = new Ui.ButtonIcon({\n            icon    : 'fa-eye',\n            tooltip : 'Collapse/Expand',\n            cls     : 'ui-button-icon-plain',\n            onclick : function() { self[ self.collapsed ? 'expand' : 'collapse' ]() }\n        });\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        var options = this.model.attributes;\n        this.$el.removeClass().addClass( options.cls ).attr( 'id', options.id );\n        this.$header[ options.title ? 'show' : 'hide' ]();\n        this.$title_text.html( options.title );\n        _.each( [ this.$content, this.$body ], function( $el ) {\n            $el[ options.nopadding ? 'addClass' : 'removeClass' ]( 'no-padding' );\n        });\n\n        // render title icon\n        if ( options.icon ) {\n            this.$title_icon.removeClass().addClass( 'portlet-title-icon fa' ).addClass( options.icon ).show();\n        } else {\n            this.$title_icon.hide();\n        }\n\n        // make portlet collapsible\n        this.$title_text[ options.collapsible ? 'addClass' : 'removeClass' ]( 'no-highlight collapsible' ).off();\n        if ( options.collapsible ) {\n            this.$title_text.on( 'click', function() { self[ self.collapsed ? 'expand' : 'collapse' ]() } );\n            options.collapsed ? this.collapse() : this.expand();\n        }\n\n        // allow title editing\n        this.$title_text.prop( 'disabled', !options.onchange_title );\n        options.onchange_title && this.$title_text.make_text_editable({\n            on_finish: function( new_title ) {\n                options.onchange_title( new_title );\n            }\n        });\n\n        // render buttons\n        if ( options.buttons ) {\n            this.$buttons.empty().show();\n            $.each( this.model.get( 'buttons' ), function( name, item ) {\n                item.$el.prop( 'id', name );\n                self.$buttons.append( item.$el );\n            });\n        } else {\n            this.$buttons.hide();\n        }\n\n        // render operations\n        this.$operations.empty;\n        if ( options.collapsible_button ) {\n            this.$operations.append( this.collapsible_button.$el );\n        }\n        if ( options.operations ) {\n            $.each( options.operations, function( name, item ) {\n                item.$el.prop( 'id', name );\n                self.$operations.append( item.$el );\n            });\n        }\n        return this;\n    },\n\n    /** Append new doms to body */\n    append: function( $el ) {\n        this.$body.append( $el );\n    },\n\n    /** Remove all content */\n    empty: function() {\n        this.$body.empty();\n    },\n\n    /** Return header element */\n    header: function() {\n        return this.$header;\n    },\n\n    /** Return body element */\n    body: function() {\n        return this.$body;\n    },\n\n    /** Show portlet */\n    show: function(){\n        this.visible = true;\n        this.$el.fadeIn( 'fast' );\n    },\n\n    /** Hide portlet */\n    hide: function(){\n        this.visible = false;\n        this.$el.hide();\n    },\n\n    /** Enable a particular button */\n    enableButton: function( id ) {\n        this.$buttons.find( '#' + id ).prop( 'disabled', false );\n    },\n\n    /** Disable a particular button */\n    disableButton: function( id ) {\n        this.$buttons.find( '#' + id ).prop( 'disabled', true );\n    },\n\n    /** Hide a particular operation */\n    hideOperation: function( id ) {\n        this.$operations.find( '#' + id ).hide();\n    },\n\n    /** Show a particular operation */\n    showOperation: function( id ) {\n        this.$operations.find( '#' + id ).show();\n    },\n\n    /** Replaces the event callback of an existing operation */\n    setOperation: function( id, callback ) {\n        this.$operations.find( '#' + id ).off( 'click' ).on( 'click', callback );\n    },\n\n    /** Change title */\n    title: function( new_title ) {\n        new_title && this.$title_text.html( new_title );\n        return this.$title_text.html();\n    },\n\n    /** Collapse portlet */\n    collapse: function() {\n        this.collapsed = true;\n        this.$content.height( '0%' );\n        this.$body.hide();\n        this.collapsible_button.setIcon( 'fa-eye-slash' );\n    },\n\n    /** Expand portlet */\n    expand: function() {\n        this.collapsed = false;\n        this.$content.height( '100%' );\n        this.$body.fadeIn( 'fast' );\n        this.collapsible_button.setIcon( 'fa-eye' );\n    },\n\n    /** Disable content access */\n    disable: function() {\n        this.$backdrop.show();\n    },\n\n    /** Enable content access */\n    enable: function() {\n        this.$backdrop.hide();\n    },\n\n    _template: function() {\n        return $( '<div/>' ).append( $( '<div/>' ).addClass( 'portlet-header' )\n                                .append( $( '<div/>' ).addClass( 'portlet-operations' ) )\n                                .append( $( '<div/>' ).addClass( 'portlet-title' )\n                                    .append( $( '<i/>' ).addClass( 'portlet-title-icon' ) )\n                                    .append( $( '<span/>' ).addClass( 'portlet-title-text' ) ) ) )\n                            .append( $( '<div/>' ).addClass( 'portlet-content' )\n                                .append( $( '<div/>' ).addClass( 'portlet-body' ) )\n                                .append( $( '<div/>' ).addClass( 'portlet-buttons' ) ) )\n                            .append( $( '<div/>' ).addClass( 'portlet-backdrop' ) );\n    }\n});\nreturn {\n    View : View\n}\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-portlet.js","/**\n    This is the main class of the form plugin. It is referenced as 'app' in lower level modules.\n*/\ndefine( [ 'utils/utils', 'mvc/ui/ui-portlet', 'mvc/ui/ui-misc', 'mvc/form/form-section', 'mvc/form/form-data' ],\nfunction( Utils, Portlet, Ui, FormSection, FormData ) {\n    return Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = new Backbone.Model({\n                initial_errors  : false,\n                cls             : 'ui-portlet-limited',\n                icon            : null,\n                always_refresh  : true,\n                status          : 'warning'\n            }).set( options );\n            this.setElement( '<div/>' );\n            this.render();\n        },\n\n        /** Update available options */\n        update: function( new_model ){\n            var self = this;\n            this.data.matchModel( new_model, function( node, input_id ) {\n                var input = self.input_list[ input_id ];\n                if ( input && input.options ) {\n                    if ( !_.isEqual( input.options, node.options ) ) {\n                        input.options = node.options;\n                        var field = self.field_list[ input_id ];\n                        if ( field.update ) {\n                            var new_options = [];\n                            if ( ( [ 'data', 'data_collection', 'drill_down' ] ).indexOf( input.type ) != -1 ) {\n                                new_options = input.options;\n                            } else {\n                                for ( var i in node.options ) {\n                                    var opt = node.options[ i ];\n                                    if ( opt.length > 2 ) {\n                                        new_options.push( { label: opt[ 0 ], value: opt[ 1 ] } );\n                                    }\n                                }\n                            }\n                            field.update( new_options );\n                            field.trigger( 'change' );\n                            Galaxy.emit.debug( 'form-view::update()', 'Updating options for ' + input_id );\n                        }\n                    }\n                }\n            });\n        },\n\n        /** Set form into wait mode */\n        wait: function( active ) {\n            for ( var i in this.input_list ) {\n                var field = this.field_list[ i ];\n                var input = this.input_list[ i ];\n                if ( input.is_dynamic && field.wait && field.unwait ) {\n                    field[ active ? 'wait' : 'unwait' ]();\n                }\n            }\n        },\n\n        /** Highlight and scroll to input element (currently only used for error notifications) */\n        highlight: function ( input_id, message, silent ) {\n            var input_element = this.element_list[ input_id ];\n            if ( input_element ) {\n                input_element.error( message || 'Please verify this parameter.' );\n                this.portlet.expand();\n                this.trigger( 'expand', input_id );\n                if ( !silent ) {\n                    var $panel = this.$el.parents().filter(function() {\n                        return [ 'auto', 'scroll' ].indexOf( $( this ).css( 'overflow' ) ) != -1;\n                    }).first();\n                    $panel.animate( { scrollTop : $panel.scrollTop() + input_element.$el.offset().top - 120 }, 500 );\n                }\n            }\n        },\n\n        /** Highlights errors */\n        errors: function( options ) {\n            this.trigger( 'reset' );\n            if ( options && options.errors ) {\n                var error_messages = this.data.matchResponse( options.errors );\n                for ( var input_id in this.element_list ) {\n                    var input = this.element_list[ input_id ];\n                    if ( error_messages[ input_id ] ) {\n                        this.highlight( input_id, error_messages[ input_id ], true );\n                    }\n                }\n            }\n        },\n\n        /** Render tool form */\n        render: function() {\n            var self = this;\n            this.off('change');\n            this.off('reset');\n            // contains the dom field elements as created by the parameter factory i.e. form-parameters\n            this.field_list = {};\n            // contains input definitions/dictionaries as provided by the parameters to_dict() function through the api\n            this.input_list = {};\n            // contains the dom elements of each input element i.e. form-input which wraps the actual input field\n            this.element_list = {};\n            // converts the form into a json data structure\n            this.data = new FormData.Manager( this );\n            this._renderForm();\n            this.data.create();\n            this.model.get( 'initial_errors' ) && this.errors( this.model.attributes );\n            // add listener which triggers on checksum change, and reset the form input wrappers\n            var current_check = this.data.checksum();\n            this.on( 'change', function( input_id ) {\n                var input = self.input_list[ input_id ];\n                if ( !input || input.refresh_on_change || self.model.get( 'always_refresh' ) ) {\n                    var new_check = self.data.checksum();\n                    if ( new_check != current_check ) {\n                        current_check = new_check;\n                        self.model.get( 'onchange' ) && self.model.get( 'onchange' )();\n                    }\n                }\n            });\n            this.on('reset', function() {\n                _.each( self.element_list, function( input_element ) { input_element.reset() } );\n            });\n            return this;\n        },\n\n        /** Renders/appends dom elements of the form */\n        _renderForm: function() {\n            $( '.tooltip' ).remove();\n            var options = this.model.attributes;\n            this.message = new Ui.UnescapedMessage();\n            this.section = new FormSection.View( this, { inputs: options.inputs } );\n            this.portlet = new Portlet.View({\n                icon            : options.icon,\n                title           : options.title,\n                cls             : options.cls,\n                operations      : options.operations,\n                buttons         : options.buttons,\n                collapsible     : options.collapsible,\n                collapsed       : options.collapsed,\n                onchange_title  : options.onchange_title\n            });\n            this.portlet.append( this.message.$el );\n            this.portlet.append( this.section.$el );\n            this.$el.empty();\n            options.inputs && this.$el.append( this.portlet.$el );\n            options.message && this.message.update( { persistent: true, status: options.status, message: options.message } );\n            Galaxy.emit.debug( 'form-view::initialize()', 'Completed' );\n        }\n    });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-view.js","/** This module contains all button views. */\ndefine( [ 'utils/utils' ], function( Utils ) {\n    /** This renders the default button which is used e.g. at the bottom of the upload modal. */\n    var ButtonDefault = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id          : Utils.uid(),\n                title       : '',\n                icon        : '',\n                cls         : 'btn btn-default',\n                wait        : false,\n                wait_text   : 'Sending...',\n                wait_cls    : 'btn btn-info',\n                disabled    : false,\n                percentage  : -1\n            }).set( options );\n            this.setElement( $( '<button/>' ).attr( 'type', 'button' )\n                                             .append( this.$icon        = $( '<i/>' ) )\n                                             .append( this.$title       = $( '<span/>' ) )\n                                             .append( this.$progress    = $( '<div/>' ).append( this.$progress_bar = $( '<div/>' ) ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass()\n                    .addClass( 'ui-button-default' )\n                    .addClass( options.disabled && 'disabled' )\n                    .attr( 'id', options.id )\n                    .attr( 'disabled', options.disabled )\n                    .off( 'click' ).on( 'click' , function() {\n                        $( '.tooltip' ).hide();\n                        options.onclick && !self.disabled && options.onclick();\n                    })\n                    .tooltip( { title: options.tooltip, placement: 'bottom' } );\n            this.$progress.addClass( 'progress' ).css( 'display', options.percentage !== -1 ? 'block' : 'none' );\n            this.$progress_bar.addClass( 'progress-bar' ).css( { width : options.percentage + '%' } );\n            this.$icon.removeClass().addClass( 'icon fa' );\n            this.$title.removeClass().addClass( 'title' );\n            if ( options.wait ) {\n                this.$el.addClass( options.wait_cls ).prop( 'disabled', true );\n                this.$icon.addClass( 'fa-spinner fa-spin ui-margin-right' );\n                this.$title.html( options.wait_text );\n            } else {\n                this.$el.addClass( options.cls );\n                this.$icon.addClass( options.icon );\n                this.$title.html( options.title );\n                options.icon && options.title && this.$icon.addClass( 'ui-margin-right' );\n            }\n        },\n\n        /** Show button */\n        show: function() {\n            this.$el.show();\n        },\n\n        /** Hide button */\n        hide: function() {\n            this.$el.hide();\n        },\n\n        /** Disable button */\n        disable: function() {\n            this.model.set( 'disabled', true );\n        },\n\n        /** Enable button */\n        enable: function() {\n            this.model.set( 'disabled', false );\n        },\n\n        /** Show spinner to indicate that the button is not ready to be clicked */\n        wait: function() {\n            this.model.set( 'wait', true );\n        },\n\n        /** Hide spinner to indicate that the button is ready to be clicked */\n        unwait: function() {\n            this.model.set( 'wait', false );\n        },\n\n        /** Change icon */\n        setIcon: function( icon ) {\n            this.model.set( 'icon', icon );\n        }\n    });\n\n    /** This button allows the right-click/open-in-new-tab feature, its used e.g. for panel buttons. */\n    var ButtonLink = ButtonDefault.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id          : Utils.uid(),\n                title       : '',\n                icon        : '',\n                cls         : ''\n            }).set( options );\n            this.setElement( $( '<a/>' ).append( this.$icon  = $( '<span/>' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render: function() {\n            var options = this.model.attributes;\n            this.$el.removeClass()\n                    .addClass( options.cls )\n                    .attr( { id         : options.id,\n                             href       : options.href || 'javascript:void(0)',\n                             title      : options.title,\n                             target     : options.target || '_top',\n                             disabled   : options.disabled } )\n                    .tooltip( { placement: 'bottom' } )\n                    .off( 'click' ).on( 'click' , function() {\n                        options.onclick && !options.disabled && options.onclick();\n                    });\n            this.$icon.removeClass().addClass( options.icon );\n        }\n    });\n\n    /** The check button is used in the tool form and allows to distinguish between multiple states e.g. all, partially and nothing selected. */\n    var ButtonCheck = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id          : Utils.uid(),\n                title       : 'Select/Unselect all',\n                icons       : [ 'fa-square-o', 'fa-minus-square-o', 'fa-check-square-o' ],\n                value       : 0,\n                onchange    : function(){}\n            }).set( options );\n            this.setElement( $( '<div/>' ).append( this.$icon   = $( '<span/>' ) )\n                                          .append( this.$title  = $( '<span/>' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render: function( options ) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.addClass( 'ui-button-check' )\n                    .off( 'click' ).on('click', function() {\n                        self.model.set( 'value', ( self.model.get( 'value' ) === 0 && 2 ) || 0 );\n                        options.onclick && options.onclick();\n                    });\n            this.$title.html( options.title );\n            this.$icon.removeClass()\n                      .addClass( 'icon fa ui-margin-right' )\n                      .addClass( options.icons[ options.value ] );\n        },\n\n        /* Sets a new value and/or returns the value.\n        * @param{Integer}   new_val - Set a new value 0=unchecked, 1=partial and 2=checked.\n        * OR:\n        * @param{Integer}   new_val - Number of selected options.\n        * @param{Integer}   total   - Total number of available options.\n        */\n        value: function ( new_val, total ) {\n            if ( new_val !== undefined ) {\n                if ( total && new_val !== 0 ) {\n                    new_val = ( new_val !== total ) && 1 || 2;\n                }\n                this.model.set( 'value', new_val );\n                this.model.get( 'onchange' )( this.model.get( 'value' ) );\n            }\n            return this.model.get( 'value' );\n        }\n    });\n\n    /** This renders a differently styled, more compact button version. */\n    var ButtonIcon = ButtonDefault.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id          : Utils.uid(),\n                title       : '',\n                icon        : '',\n                cls         : 'ui-button-icon',\n                disabled    : false\n            }).set( options );\n            this.setElement( $( '<div/>' ).append( this.$button = $( '<div/>' ).append( this.$icon  = $( '<i/>' ) )\n                                                                               .append( this.$title = $( '<span/>' ) ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render : function( options ) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass()\n                    .addClass( options.cls )\n                    .addClass( options.disabled && 'disabled' )\n                    .attr( 'disabled', options.disabled )\n                    .attr( 'id', options.id )\n                    .off( 'click' ).on( 'click', function() {\n                        $( '.tooltip' ).hide();\n                        !options.disabled && options.onclick && options.onclick();\n                    });\n            this.$button.addClass( 'button' ).tooltip( { title: options.tooltip, placement: 'bottom' } );\n            this.$icon.removeClass().addClass( 'icon fa' ).addClass( options.icon );\n            this.$title.addClass( 'title' ).html( options.title );\n            options.icon && options.title && this.$icon.addClass( 'ui-margin-right' );\n        }\n    });\n\n    /** This class creates a button with dropdown menu. */\n    var ButtonMenu = ButtonDefault.extend({\n        $menu: null,\n        initialize: function ( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id              : '',\n                title           : '',\n                pull            : 'right',\n                icon            : null,\n                onclick         : null,\n                cls             : 'ui-button-icon ui-button-menu',\n                tooltip         : '',\n                target          : '',\n                href            : '',\n                onunload        : null,\n                visible         : true,\n                tag             : ''\n            }).set( options );\n            this.collection = new Backbone.Collection();\n            this.setElement( $( '<div/>' ).append( this.$root = $( '<div/>' ).append( this.$icon  = $( '<i/>' ) )\n                                                                             .append( this.$title = $( '<span/>' ) ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.listenTo( this.collection, 'change add remove reset', this.render, this );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass()\n                    .addClass( 'dropdown' )\n                    .addClass( options.cls )\n                    .attr( 'id', options.id )\n                    .css( { display : options.visible && this.collection.where( { visible: true } ).length > 0 ? 'block' : 'none' } );\n            this.$root.addClass( 'root button dropdown-toggle' )\n                      .attr( 'data-toggle', 'dropdown' )\n                      .tooltip( { title: options.tooltip, placement: 'bottom' } )\n                      .off( 'click' ).on( 'click', function( e ) {\n                            $( '.tooltip' ).hide();\n                            e.preventDefault();\n                            options.onclick && options.onclick();\n                      } );\n            this.$icon.removeClass().addClass( 'icon fa' ).addClass( options.icon );\n            this.$title.removeClass().addClass( 'title' ).html( options.title );\n            options.icon && options.title && this.$icon.addClass( 'ui-margin-right' );\n            this.$menu && this.$menu.remove();\n            if ( this.collection.length > 0 ) {\n                this.$menu = $( '<ul/>' ).addClass( 'menu dropdown-menu' )\n                                         .addClass( 'pull-' + self.model.get( 'pull' ) )\n                                         .attr( 'role', 'menu' );\n                this.$el.append( this.$menu );\n            }\n            this.collection.each( function( submodel ) {\n                var suboptions = submodel.attributes;\n                if ( suboptions.visible ) {\n                    var $link = $( '<a/>' ).addClass( 'dropdown-item' )\n                                           .attr( { href : suboptions.href, target : suboptions.target } )\n                                           .append( $( '<i/>' ).addClass( 'fa' )\n                                                               .addClass( suboptions.icon )\n                                                               .css( 'display', suboptions.icon ? 'inline-block' : 'none' ) )\n                                           .append( suboptions.title )\n                                           .on( 'click', function( e ) {\n                                                if ( suboptions.onclick ) {\n                                                    e.preventDefault();\n                                                    suboptions.onclick();\n                                                }\n                                           } );\n                    self.$menu.append( $( '<li/>' ).append( $link ) );\n                    suboptions.divider && self.$menu.append( $( '<li/>' ).addClass( 'divider' ) );\n                }\n            });\n        },\n\n        /** Add a new menu item */\n        addMenu: function ( options ) {\n            this.collection.add( Utils.merge( options, {\n                title       : '',\n                target      : '',\n                href        : '',\n                onclick     : null,\n                divider     : false,\n                visible     : true,\n                icon        : null,\n                cls         : 'button-menu btn-group'\n            }));\n        }\n    });\n\n    return {\n        ButtonDefault   : ButtonDefault,\n        ButtonLink      : ButtonLink,\n        ButtonIcon      : ButtonIcon,\n        ButtonCheck     : ButtonCheck,\n        ButtonMenu      : ButtonMenu\n    }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-buttons.js","// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n// not appended to the identifier of a nested array.\njQuery.ajaxSettings.traditional = true;\n\n// dependencies\ndefine([\n    'utils/utils',\n    'mvc/grid/grid-model',\n    'mvc/grid/grid-template',\n    'mvc/ui/popup-menu'\n], function(Utils, GridModel, Templates, PopupMenu) {\n\n// grid view\nreturn Backbone.View.extend({\n\n    // model\n    grid: null,\n\n    // Initialize\n    initialize: function(grid_config) {\n        this.dict_format = grid_config.dict_format;\n        var self = this;\n        window.add_tag_to_grid_filter = function( tag_name, tag_value ){\n            // Put tag name and value together.\n            var tag = tag_name + ( tag_value !== undefined && tag_value !== \"\" ? \":\" + tag_value : \"\" );\n            var advanced_search = $( '#advanced-search').is(\":visible\" );\n            if( !advanced_search ){\n                $('#standard-search').slideToggle('fast');\n                $('#advanced-search').slideToggle('fast');\n            }\n            self.add_filter_condition( \"tags\", tag );\n        };\n\n        // set element\n        if ( this.dict_format ) {\n            this.setElement('<div/>');\n            if ( grid_config.url_base && !grid_config.items ) {\n                var url_data = grid_config.url_data || {};\n                _.each(grid_config.filters, function(v, k) {\n                    url_data['f-' + k] = v;\n                });\n                $.ajax({\n                    url     : grid_config.url_base + '?' + $.param( url_data ),\n                    success : function( response ) {\n                        response.embedded = grid_config.embedded;\n                        response.filters  = grid_config.filters;\n                        self.init_grid( response );\n                    }\n                });\n            } else {\n                this.init_grid(grid_config);\n            }\n        } else {\n            this.setElement('#grid-container');\n            this.init_grid(grid_config);\n        }\n\n        // fix padding\n        if (grid_config.use_panels) {\n            $('#center').css ({\n                padding     : '10px',\n                overflow    : 'auto'\n            });\n        }\n    },\n\n    // refresh frames\n    handle_refresh: function (refresh_frames) {\n        if (refresh_frames) {\n            if ($.inArray('history', refresh_frames) > -1) {\n                if( top.Galaxy && top.Galaxy.currHistoryPanel ){\n                    top.Galaxy.currHistoryPanel.loadCurrentHistory();\n                }\n            }\n        }\n    },\n\n    // Initialize\n    init_grid: function(grid_config) {\n        // link grid model\n        this.grid = new GridModel(grid_config);\n\n        // get options\n        var options = this.grid.attributes;\n\n        // handle refresh requests\n        this.handle_refresh(options.refresh_frames);\n\n        // strip protocol and domain\n        var url = this.grid.get('url_base');\n        url = url.replace(/^.*\\/\\/[^\\/]+/, '');\n        this.grid.set('url_base', url);\n\n        // append main template\n        this.$el.html(Templates.grid(options));\n\n        // update div contents\n        this.$el.find('#grid-table-header').html(Templates.header(options));\n        this.$el.find('#grid-table-body').html(Templates.body(options));\n        this.$el.find('#grid-table-footer').html(Templates.footer(options));\n\n        // update message\n        if (options.message) {\n            this.$el.find('#grid-message').html(Templates.message(options));\n            var self = this;\n            if (options.use_hide_message) {\n                setTimeout( function() { self.$el.find('#grid-message').html(''); }, 5000);\n            }\n        }\n\n        // configure elements\n        this.init_grid_elements();\n        this.init_grid_controls();\n\n        // attach global event handler\n        // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n        init_refresh_on_change();\n    },\n\n    // Initialize grid controls\n    init_grid_controls: function() {\n\n        // link\n        var self = this;\n\n        // Initialize grid operation button.\n        this.$el.find('.operation-button').each(function() {\n            $(this).off();\n            $(this).click(function() {\n                self.submit_operation(this);\n                return false;\n            });\n        });\n\n        // Initialize text filters to select text on click and use normal font when user is typing.\n        this.$el.find('input[type=text]').each(function() {\n            $(this).off();\n            $(this).click(function() { $(this).select(); } )\n                   .keyup(function () { $(this).css('font-style', 'normal'); });\n        });\n\n        // Initialize sort links.\n        this.$el.find('.sort-link').each( function() {\n            $(this).off();\n            $(this).click( function() {\n               self.set_sort_condition( $(this).attr('sort_key') );\n               return false;\n            });\n        });\n\n        // Initialize text filters.\n        this.$el.find('.text-filter-form').each( function() {\n            $(this).off();\n            $(this).submit( function() {\n                var column_key = $(this).attr('column_key');\n                var text_input_obj = $('#input-' + column_key + '-filter');\n                var text_input = text_input_obj.val();\n                text_input_obj.val('');\n                self.add_filter_condition(column_key, text_input);\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find('.text-filter-val > a').each( function() {\n            $(this).off();\n            $(this).click( function() {\n                // Remove visible element.\n                $(this).parent().remove();\n\n                // Remove filter condition.\n                self.remove_filter_condition ($(this).attr('filter_key'), $(this).attr('filter_val'));\n\n                // Return\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find('.categorical-filter > a').each( function() {\n            $(this).off();\n            $(this).click( function() {\n                self.set_categorical_filter( $(this).attr('filter_key'), $(this).attr('filter_val') );\n                return false;\n            });\n        });\n\n        // Initialize standard, advanced search toggles.\n        this.$el.find('.advanced-search-toggle').each( function() {\n            $(this).off();\n            $(this).click( function() {\n                self.$el.find('#standard-search').slideToggle('fast');\n                self.$el.find('#advanced-search').slideToggle('fast');\n                return false;\n            });\n        });\n\n        // Add event to check all box\n        this.$el.find('#check_all').off();\n        this.$el.find('#check_all').on('click', function() {\n            self.check_all_items();\n        });\n    },\n\n    // Initialize grid elements.\n    init_grid_elements : function() {\n        // Initialize grid selection checkboxes.\n        this.$el.find('.grid').each( function() {\n            var checkboxes = $(this).find(\"input.grid-row-select-checkbox\");\n            var check_count = $(this).find(\"span.grid-selected-count\");\n            var update_checked = function() {\n                check_count.text( $(checkboxes).filter(\":checked\").length );\n            };\n\n            $(checkboxes).each( function() {\n                $(this).change(update_checked);\n            });\n            update_checked();\n        });\n\n        // Initialize ratings.\n        if (this.$el.find('.community_rating_star').length !== 0)\n            this.$el.find('.community_rating_star').rating({});\n\n        // get options\n        var options = this.grid.attributes;\n        var self = this;\n\n        //\n        // add page click events\n        //\n        this.$el.find('.page-link > a').each( function() {\n            $(this).click( function() {\n               self.set_page( $(this).attr('page_num') );\n               return false;\n            });\n        });\n\n        //\n        // add inbound/outbound events\n        //\n        this.$el.find('.use-target').each( function() {\n            $(this).click( function(e) {\n                self.execute({\n                    href : $(this).attr('href'),\n                    target : $(this).attr('target')\n                });\n                return false;\n\n            });\n        });\n\n        // empty grid?\n        var items_length = options.items.length;\n        if (items_length == 0) {\n            return;\n        }\n\n        // add operation popup menus\n        _.each( options.items, function( item, index ) {\n            var button = self.$( '#grid-' + index + '-popup' ).off();\n            var popup = new PopupMenu( button );\n            _.each( options[ 'operations' ], function( operation ) {\n                self._add_operation( popup, operation, item );\n            });\n        });\n    },\n\n    /** Add an operation to the items menu */\n    _add_operation: function( popup, operation, item ) {\n        var self = this;\n        var settings = item.operation_config[ operation.label ];\n        if ( settings.allowed && operation.allow_popup ) {\n            popup.addItem({\n                html                : operation.label,\n                href                : settings.url_args,\n                target              : settings.target,\n                confirmation_text   : operation.confirm,\n                func                : function( e ) {\n                    e.preventDefault();\n                    var label = $( e.target ).html();\n                    if ( operation.onclick ) {\n                        operation.onclick( item.encode_id );\n                    } else {\n                        self.execute( this.findItemByHtml( label ) );\n                    }\n                }\n            });\n        }\n    },\n\n    // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n    add_filter_condition: function (name, value) {\n        // Do nothing is value is empty.\n        if (value === \"\") {\n            return false;\n        }\n\n        // Add condition to grid.\n        this.grid.add_filter(name, value, true);\n\n        // Add button that displays filter and provides a button to delete it.\n        var t = $(Templates.filter_element(name, value));\n        var self = this;\n        t.click(function() {\n            // Remove visible element.\n            $(this).remove();\n\n            // Remove filter condition.\n            self.remove_filter_condition(name, value);\n        });\n\n        // append to container\n        var container = this.$el.find('#' + name + '-filtering-criteria');\n        container.append(t);\n\n        // execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n    remove_filter_condition: function (name, value) {\n        // Remove filter condition.\n        this.grid.remove_filter(name, value);\n\n        // Execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set sort condition for grid.\n    set_sort_condition: function (col_key) {\n        // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n        // currently sorted column, sort is reversed.\n        var cur_sort = this.grid.get('sort_key');\n        var new_sort = col_key;\n        if (cur_sort.indexOf(col_key) !== -1) {\n            // Reverse sort.\n            if (cur_sort.substring(0, 1) !== '-') {\n                new_sort = '-' + col_key;\n            }\n        }\n\n        // Remove sort arrows elements.\n        this.$el.find('.sort-arrow').remove();\n\n        // Add sort arrow element to new sort column.\n        var sort_arrow = (new_sort.substring(0,1) == '-') ? '&uarr;' : '&darr;';\n        var t = $('<span>' + sort_arrow + '</span>').addClass('sort-arrow');\n\n        // Add to header\n        this.$el.find('#' + col_key + '-header').append(t);\n\n        // Update grid.\n        this.grid.set('sort_key', new_sort);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set new value for categorical filter.\n    set_categorical_filter: function (name, new_value) {\n        // Update filter hyperlinks to reflect new filter value.\n        var category_filter = this.grid.get('categorical_filters')[name],\n            cur_value = this.grid.get('filters')[name];\n        var self = this;\n        this.$el.find('.' + name + '-filter').each( function() {\n            var text = $.trim( $(this).text() );\n            var filter = category_filter[text];\n            var filter_value = filter[name];\n            if (filter_value == new_value) {\n                // Remove filter link since grid will be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                $(this).empty();\n                $(this).addClass('current-filter');\n                $(this).append(text);\n            } else if (filter_value == cur_value) {\n                // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                $(this).empty();\n                var t = $('<a href=\"#\">' + text + '</a>');\n                t.click(function() {\n                    self.set_categorical_filter( name, filter_value );\n                });\n                $(this).removeClass('current-filter');\n                $(this).append(t);\n            }\n        });\n\n        // Update grid.\n        this.grid.add_filter(name, new_value);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set page to view.\n    set_page: function (new_page) {\n        // Update page hyperlink to reflect new page.\n        var self = this;\n        this.$el.find('.page-link').each( function() {\n            var id = $(this).attr('id'),\n                page_num = parseInt( id.split('-')[2], 10 ), // Id has form 'page-link-<page_num>\n                cur_page = self.grid.get('cur_page'),\n                text;\n            if (page_num === new_page) {\n                // Remove link to page since grid will be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                text = $(this).children().text();\n                $(this).empty();\n                $(this).addClass('inactive-link');\n                $(this).text(text);\n            }\n            else if (page_num === cur_page) {\n                // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                text = $(this).text();\n                $(this).empty();\n                $(this).removeClass('inactive-link');\n                var t = $('<a href=\"#\">' + text + '</a>');\n                t.click(function() {\n                    self.set_page(page_num);\n                });\n                $(this).append(t);\n            }\n        });\n\n        if (new_page === 'all') {\n            this.grid.set('cur_page', new_page);\n        } else {\n            this.grid.set('cur_page', parseInt(new_page, 10));\n        }\n        this.execute();\n    },\n\n    // confirmation/submission of operation request\n    submit_operation: function (operation_button, confirmation_text) {\n        // identify operation\n        var operation_name = $(operation_button).val();\n\n        // verify in any item is selected\n        var number_of_checked_ids = this.$el.find('input[name=\"id\"]:checked').length;\n        if (!number_of_checked_ids > 0) {\n            return false;\n        }\n\n        // Check to see if there's grid confirmation text for this operation\n        var operation = _.findWhere(this.grid.attributes.operations, {label: operation_name});\n        if (operation && !confirmation_text){\n            confirmation_text = operation.confirm || '';\n        }\n\n        // collect ids\n        var item_ids = [];\n        this.$el.find('input[name=id]:checked').each(function() {\n            item_ids.push( $(this).val() );\n        });\n\n        // execute operation\n        var options = {\n            operation           : operation_name,\n            id                  : item_ids,\n            confirmation_text   : confirmation_text\n        };\n        if ( operation.target == 'top' ) {\n            options = _.extend( options, {\n                href   : operation.href,\n                target : operation.target\n            });\n        }\n        this.execute( options );\n        return true;\n    },\n\n    check_all_items: function () {\n        var check = this.$('.grid-row-select-checkbox');\n        var state = this.$( '#check_all' ).prop( 'checked' );\n        _.each( check, function( c ) {\n            $( c ).prop( 'checked', state );\n        });\n        this.init_grid_elements();\n    },\n\n    // Go back to page one; this is useful when a filter is applied.\n    go_page_one: function () {\n        // Need to go back to page 1 if not showing all.\n        var cur_page = this.grid.get('cur_page');\n        if (cur_page !== null && cur_page !== undefined && cur_page !== 'all') {\n            this.grid.set('cur_page', 1);\n        }\n    },\n\n    //\n    // execute operations and hyperlink requests\n    //\n    execute: function (options) {\n        // get url\n        var id = null;\n        var href = null;\n        var operation = null;\n        var confirmation_text = null;\n        var target = null;\n\n        // check for options\n        if (options) {\n            // get options\n            href = options.href;\n            operation = options.operation;\n            id = options.id;\n            confirmation_text = options.confirmation_text;\n            target = options.target;\n\n            // check if input contains the operation tag\n            if (href !== undefined && href.indexOf('operation=') != -1) {\n                // Get operation, id in hyperlink's href.\n                var href_parts = href.split(\"?\");\n                if (href_parts.length > 1) {\n                    var href_parms_str = href_parts[1];\n                    var href_parms = href_parms_str.split(\"&\");\n                    for (var index = 0; index < href_parms.length; index++) {\n                        if (href_parms[index].indexOf('operation') != -1) {\n                            // Found operation parm; get operation value.\n                            operation = href_parms[index].split('=')[1];\n                            operation = operation.replace (/\\+/g, ' ');\n                        } else if (href_parms[index].indexOf('id') != -1) {\n                            // Found id parm; get id value.\n                            id = href_parms[index].split('=')[1];\n                        }\n                    }\n                }\n            }\n        }\n\n        // check for operation details\n        if (operation && id) {\n            // show confirmation box\n            if (confirmation_text && confirmation_text != '' && confirmation_text != 'None' && confirmation_text != 'null')\n                if(!confirm(confirmation_text))\n                    return false;\n\n            // use small characters for operation?!\n            operation = operation.toLowerCase();\n\n            // Update grid.\n            this.grid.set({\n                operation: operation,\n                item_ids: id\n            });\n\n            // Do operation. If operation cannot be performed asynchronously, redirect to location.\n            if ( target == 'top' ) {\n                window.top.location = href + '?' + $.param( this.grid.get_url_data() );\n            } else if ( this.grid.can_async_op(operation) || this.dict_format ) {\n                this.update_grid();\n            } else {\n                this.go_to(target, href);\n            }\n\n            // done\n            return false;\n        }\n\n        // refresh grid\n        if (href) {\n            this.go_to(target, href);\n            return false;\n        }\n\n        // refresh grid\n        if (this.grid.get('async') || this.dict_format) {\n            this.update_grid();\n        } else {\n            this.go_to(target, href);\n        }\n\n        // done\n        return false;\n    },\n\n    // go to url\n    go_to: function (target, href) {\n        // get aysnc status\n        var async = this.grid.get('async');\n        this.grid.set('async', false);\n\n        // get slide status\n        var advanced_search = this.$el.find('#advanced-search').is(':visible');\n        this.grid.set('advanced_search', advanced_search);\n\n        // get default url\n        if(!href) {\n            href = this.grid.get('url_base') + '?' + $.param(this.grid.get_url_data());\n        }\n\n        // clear grid of transient request attributes.\n        this.grid.set({\n            operation: undefined,\n            item_ids: undefined,\n            async: async\n        });\n        switch (target) {\n            case 'inbound':\n                // this currently assumes that there is only a single grid shown at a time\n                var $div = $('.grid-header').closest('.inbound');\n                if ($div.length !== 0) {\n                    $div.load(href);\n                    return;\n                }\n                break;\n            case 'top':\n                window.top.location = href;\n                break;\n            default:\n                window.location = href;\n        }\n    },\n\n    // Update grid.\n    update_grid: function () {\n        // If there's an operation, do POST; otherwise, do GET.\n        var method = (this.grid.get('operation') ? 'POST' : 'GET' );\n\n        // Show overlay to indicate loading and prevent user actions.\n        this.$el.find('.loading-elt-overlay').show();\n        var self = this;\n        $.ajax({\n            type: method,\n            url: self.grid.get('url_base'),\n            data: self.grid.get_url_data(),\n            error: function(response) { alert( 'Grid refresh failed' );},\n            success: function(response_text) {\n\n                // backup\n                var embedded = self.grid.get('embedded');\n                var insert = self.grid.get('insert');\n\n                // request new configuration\n                var json = self.dict_format ? response_text : $.parseJSON(response_text);\n\n                // update\n                json.embedded = embedded;\n                json.insert = insert;\n\n                // Initialize new grid config\n                self.init_grid(json);\n\n                // Hide loading overlay.\n                self.$el.find('.loading-elt-overlay').hide();\n            },\n            complete: function() {\n                // Clear grid of transient request attributes.\n                self.grid.set({\n                    operation: undefined,\n                    item_ids: undefined\n                });\n            }\n        });\n    }\n});\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-view.js","// dependencies\ndefine(['utils/utils', 'mvc/ui/ui-portlet', 'mvc/ui/ui-misc'], function(Utils, Portlet, Ui) {\n\n// ui list element\nvar View = Backbone.View.extend({\n    // create portlet to keep track of selected list elements\n    initialize : function(options) {\n        // link this\n        var self = this;\n\n        // initialize options\n        this.options = options;\n        this.name = options.name || 'element';\n        this.multiple = options.multiple || false;\n\n        // create message handler\n        this.message = new Ui.Message();\n\n        // create portlet\n        this.portlet = new Portlet.View({ cls: 'ui-portlet-section' });\n\n        // create select field containing the options which can be inserted into the list\n        this.select = new Ui.Select.View({ optional : options.optional });\n\n        // create insert new list element button\n        this.button = new Ui.ButtonIcon({\n            icon        : 'fa fa-sign-in',\n            tooltip     : 'Insert new ' + this.name,\n            onclick     : function() {\n                self.add({\n                    id      : self.select.value(),\n                    name    : self.select.text()\n                });\n            }\n        });\n\n        // build main element\n        this.setElement(this._template(options));\n        this.$('.ui-list-message').append(this.message.$el);\n        this.$('.ui-list-portlet').append(this.portlet.$el);\n        this.$('.ui-list-button').append(this.button.$el);\n        this.$('.ui-list-select').append(this.select.$el);\n    },\n\n    /** Return/Set currently selected list elements */\n    value: function(val) {\n        // set new value\n        if (val !== undefined) {\n            this.portlet.empty();\n            if ($.isArray(val)) {\n                for (var i in val) {\n                    var v = val[i];\n                    var v_id = null;\n                    var v_name = null;\n                    if ($.type(v) != 'string') {\n                        v_id = v.id;\n                        v_name = v.name;\n                    } else {\n                        v_id = v_name = v;\n                    }\n                    if (v_id != null) {\n                        this.add({\n                            id      : v_id,\n                            name    : v_name\n                        });\n                    }\n                }\n            }\n            this._refresh();\n        }\n        // get current value\n        var lst = [];\n        this.$('.ui-list-id').each(function() {\n            lst.push({\n                id      : $(this).prop('id'),\n                name    : $(this).find('.ui-list-name').html()\n            });\n        });\n        if (lst.length == 0) {\n            return null;\n        }\n        return lst;\n    },\n\n    /** Add row */\n    add: function(options) {\n        var self = this;\n        if (this.$('[id=\"' + options.id + '\"]').length === 0) {\n            if (!Utils.isEmpty(options.id)) {\n                var $el = $(this._templateRow({\n                    id      : options.id,\n                    name    : options.name\n                }));\n                $el.on('click', function() {\n                    $el.remove();\n                    self._refresh();\n                });\n                $el.on('mouseover', function() {\n                    $el.addClass('portlet-highlight');\n                });\n                $el.on('mouseout', function() {\n                    $el.removeClass('portlet-highlight');\n                });\n                this.portlet.append($el);\n                this._refresh();\n            } else {\n                this.message.update({ message: 'Please select a valid ' + this.name + '.', status: 'danger' });\n            }\n        } else {\n            this.message.update({ message: 'This ' + this.name + ' is already in the list.' });\n        }\n    },\n\n    /** Update available options */\n    update: function(options) {\n        this.select.update(options);\n    },\n\n    /** Refresh view */\n    _refresh: function() {\n        if (this.$('.ui-list-id').length > 0) {\n            !this.multiple && this.button.disable();\n            this.$('.ui-list-portlet').show();\n        } else {\n            this.button.enable();\n            this.$('.ui-list-portlet').hide();\n        }\n        this.options.onchange && this.options.onchange();\n    },\n\n    /** Main Template */\n    _template: function(options) {\n        return  '<div class=\"ui-list\">' +\n                    '<div class=\"ui-margin-top\">' +\n                        '<span class=\"ui-list-button\"/>' +\n                        '<span class=\"ui-list-select\"/>' +\n                    '</div>' +\n                    '<div class=\"ui-list-message\"/>' +\n                    '<div class=\"ui-list-portlet\"/>' +\n                '</div>';\n    },\n\n    /** Row Template */\n    _templateRow: function(options) {\n        return  '<div id=\"' + options.id + '\" class=\"ui-list-id\">' +\n                    '<span class=\"ui-list-delete fa fa-trash\"/>' +\n                    '<span class=\"ui-list-name\">' + options.name + '</span>' +\n                '</div>';\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-list.js","/** Base class for options based ui elements **/\ndefine([ 'utils/utils', 'mvc/ui/ui-buttons' ], function( Utils, Buttons ) {\nvar Base = Backbone.View.extend({\n    initialize: function( options ) {\n        var self = this;\n        this.model = options && options.model || new Backbone.Model({\n            visible     : true,\n            data        : [],\n            id          : Utils.uid(),\n            error_text  : 'No options available.',\n            wait_text   : 'Please wait...',\n            multiple    : false,\n            optional    : false,\n            onchange    : function(){}\n        }).set( options );\n        this.listenTo( this.model, 'change:value', this._changeValue, this );\n        this.listenTo( this.model, 'change:wait', this._changeWait, this );\n        this.listenTo( this.model, 'change:data', this._changeData, this );\n        this.listenTo( this.model, 'change:visible', this._changeVisible, this );\n        this.on( 'change', function() { self.model.get( 'onchange' )( self.value() ) } );\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        this.$el.empty()\n                .removeClass()\n                .addClass( 'ui-options' )\n                .append( this.$message   = $( '<div/>' ) )\n                .append( this.$menu      = $( '<div/>' ).addClass( 'ui-options-menu' ) )\n                .append( this.$options   = $( this._template() ) );\n\n        // add select/unselect all button\n        this.all_button = null;\n        if ( this.model.get( 'multiple' ) ) {\n            this.all_button = new Buttons.ButtonCheck({\n                onclick: function() {\n                    self.$( 'input' ).prop( 'checked', self.all_button.value() !== 0 );\n                    self.value( self._getValue() );\n                    self.trigger( 'change' );\n                }\n            });\n            this.$menu.append( this.all_button.$el );\n        }\n\n        // finalize dom\n        this._changeData();\n        this._changeWait();\n        this._changeVisible();\n    },\n\n    /** Update available options */\n    update: function( options ) {\n        this.model.set( 'data', options );\n    },\n\n    _changeData: function() {\n        var self = this;\n        this.$options.empty();\n        if ( this._templateOptions ) {\n            this.$options.append( this._templateOptions( this.model.get( 'data' ) ) );\n        } else {\n            _.each( this.model.get( 'data' ), function( option ) {\n                self.$options.append( $( self._templateOption( option ) )\n                                        .addClass( 'ui-option' )\n                                        .tooltip( { title: option.tooltip, placement: 'bottom' } ) );\n            });\n        }\n        var self = this;\n        this.$( 'input' ).on( 'change', function() {\n            self.value( self._getValue() );\n            self.trigger( 'change' );\n        });\n        this._changeValue();\n        this._changeWait();\n    },\n\n    _changeVisible: function() {\n        this.$el[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n    },\n\n    _changeWait: function() {\n        if ( this.model.get( 'wait' ) ) {\n            if ( this.length() === 0 ) {\n                this._messageShow( this.model.get( 'wait_text' ), 'info' );\n                this.$options.hide();\n                this.$menu.hide();\n            }\n        } else {\n            if ( this.length() === 0 ) {\n                this._messageShow( this.model.get( 'error_text' ), 'danger' );\n                this.$options.hide();\n                this.$menu.hide();\n            } else {\n                this.$message.hide();\n                this.$options.css( 'display', 'inline-block' );\n                this.$menu.show();\n            }\n        }\n    },\n\n    _changeValue: function() {\n        this._setValue( this.model.get( 'value' ) );\n        if ( this._getValue() === null && !this.model.get( 'multiple' ) && !this.model.get( 'optional' ) ) {\n            this._setValue( this.first() );\n        }\n        this.all_button && this.all_button.value( $.isArray( this._getValue() ) ? this._getValue().length : 0, this.length() );\n    },\n\n    /** Return/Set current selection */\n    value: function ( new_value ) {\n        new_value !== undefined && this.model.set( 'value', new_value );\n        return this._getValue();\n    },\n\n    /** Return first available option */\n    first: function() {\n        var options = this.$( 'input' ).first();\n        return options.length > 0 ? options.val() : null;\n    },\n\n    /** Show a spinner indicating that the select options are currently loaded */\n    wait: function() {\n        this.model.set( 'wait', true );\n    },\n\n    /** Hide spinner indicating that the request has been completed */\n    unwait: function() {\n        this.model.set( 'wait', false );\n    },\n\n    /** Returns the number of options */\n    length: function() {\n        return this.$( '.ui-option' ).length;\n    },\n\n    /** Set value to dom */\n    _setValue: function( new_value ) {\n        var self = this;\n        if ( new_value !== undefined ) {\n            this.$( 'input' ).prop( 'checked', false );\n            if ( new_value !== null ) {\n                var values = $.isArray( new_value ) ? new_value : [ new_value ];\n                _.each( values, function( v ) {\n                    self.$( 'input[value=\"' + v + '\"]' ).first().prop( 'checked', true );\n                });\n            }\n        }\n    },\n\n    /** Return current selection */\n    _getValue: function() {\n        var selected = [];\n        this.$( ':checked' ).each( function() {\n            selected.push( $( this ).val() );\n        });\n        if ( Utils.isEmpty( selected ) ) {\n            return null;\n        }\n        return this.model.get( 'multiple' ) ? selected : selected[ 0 ];\n    },\n\n    /** Show message instead if options */\n    _messageShow: function( text, status ) {\n        this.$message.show()\n                     .removeClass()\n                     .addClass( 'ui-message alert alert-' + status )\n                     .html( text );\n    },\n\n    /** Main template function */\n    _template: function() {\n        return $( '<div/>' ).addClass( 'ui-options-list' );\n    }\n});\n\n/** Iconized **/\nvar BaseIcons = Base.extend({\n    _templateOption: function( pair ) {\n        var id = Utils.uid();\n        return  $( '<div/>' ).addClass( 'ui-option' )\n                    .append( $( '<input/>' ).attr( {\n                        id      : id,\n                        type    : this.model.get( 'type' ),\n                        name    : this.model.id,\n                        value   : pair.value } ) )\n                    .append( $( '<label/>' ).addClass( 'ui-options-label' )\n                                            .attr( 'for', id )\n                                            .html( pair.label ) );\n    }\n});\n\n/** Radio button field **/\nvar Radio = {};\nRadio.View = BaseIcons.extend({\n    initialize: function( options ) {\n        options.type = 'radio';\n        BaseIcons.prototype.initialize.call( this, options );\n    }\n});\n\n/** Checkbox options field **/\nvar Checkbox = {};\nCheckbox.View = BaseIcons.extend({\n    initialize: function( options ) {\n        options.type = 'checkbox';\n        options.multiple = true;\n        BaseIcons.prototype.initialize.call( this, options );\n    }\n});\n\n/** Radio button options field styled as classic buttons **/\nvar RadioButton = {};\nRadioButton.View = Base.extend({\n    initialize: function( options ) {\n        Base.prototype.initialize.call( this, options );\n    },\n\n    /** Set current value */\n    _setValue: function ( new_value ) {\n        if ( new_value !== undefined ) {\n            this.$( 'input' ).prop( 'checked', false );\n            this.$( 'label' ).removeClass( 'active' );\n            this.$( '[value=\"' + new_value + '\"]' ).prop( 'checked', true ).closest( 'label' ).addClass( 'active' );\n        }\n    },\n\n    /** Template for a single option */\n    _templateOption: function( pair ) {\n        var $el =  $( '<label/>' ).addClass( 'btn btn-default' );\n        pair.icon && $el.append( $( '<i/>' ).addClass( 'fa' ).addClass( pair.icon ).addClass( !pair.label && 'no-padding' ) );\n        $el.append( $( '<input/>' ).attr( { type: 'radio', name: this.model.id, value: pair.value } ) );\n        pair.label && $el.append( pair.label );\n        return $el;\n    },\n\n    /** Main template function */\n    _template: function() {\n        return $( '<div/>' ).addClass( 'btn-group ui-radiobutton' ).attr( 'data-toggle', 'buttons' );\n    }\n});\n\nreturn {\n    Base        : Base,\n    BaseIcons   : BaseIcons,\n    Radio       : Radio,\n    RadioButton : RadioButton,\n    Checkbox    : Checkbox\n};\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-options.js","/**\n *  This class creates/wraps a default html select field as backbone class.\n */\ndefine([ 'utils/utils', 'mvc/ui/ui-buttons' ], function( Utils, Buttons ) {\nvar View = Backbone.View.extend({\n    initialize: function( options ) {\n        var self = this;\n        this.data  = [];\n        this.data2 = [];\n        this.model = options && options.model || new Backbone.Model({\n            id          : Utils.uid(),\n            cls         : 'ui-select',\n            error_text  : 'No options available',\n            empty_text  : 'Nothing selected',\n            visible     : true,\n            wait        : false,\n            multiple    : false,\n            searchable  : true,\n            optional    : false,\n            disabled    : false,\n            onchange    : function(){},\n            value       : null,\n            individual  : false,\n            pagesize    : 20\n        }).set( options );\n        this.on( 'change', function() { self.model.get( 'onchange' ) && self.model.get( 'onchange' )( self.value() ) } );\n        this.listenTo( this.model, 'change:data', this._changeData, this );\n        this.listenTo( this.model, 'change:disabled', this._changeDisabled, this );\n        this.listenTo( this.model, 'change:wait', this._changeWait, this );\n        this.listenTo( this.model, 'change:visible', this._changeVisible, this );\n        this.listenTo( this.model, 'change:value', this._changeValue, this );\n        this.listenTo( this.model, 'change:multiple change:searchable change:cls change:id', this.render, this );\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        this.model.get( 'searchable' ) ? this._renderSearchable() : this._renderClassic();\n        this.$el.addClass( this.model.get( 'cls' ) )\n                .attr( 'id', this.model.get( 'id' ) );\n        this.$select.empty().addClass( 'select' )\n                    .attr( 'id', this.model.get( 'id' ) + '_select' )\n                    .prop( 'multiple', this.model.get( 'multiple' ) )\n                    .on( 'change', function() {\n                        self.value( self._getValue() );\n                        self.trigger( 'change' );\n                    });\n        this._changeData();\n        this._changeWait();\n        this._changeVisible();\n        this._changeDisabled();\n    },\n\n    /** Renders the classic selection field */\n    _renderClassic: function() {\n        var self = this;\n        this.$el.addClass( this.model.get( 'multiple' ) ? 'ui-select-multiple' : 'ui-select' )\n                .append( this.$select      = $( '<select/>' ) )\n                .append( this.$dropdown    = $( '<div/>' ) )\n                .append( this.$resize      = $( '<div/>' )\n                .append( this.$resize_icon = $( '<i/>' ) ) );\n        if ( this.model.get( 'multiple' ) ) {\n            this.$dropdown.hide();\n            this.$resize_icon.addClass( 'fa fa-angle-double-right fa-rotate-45' ).show();\n            this.$resize.removeClass()\n                        .addClass( 'icon-resize' )\n                        .show()\n                        .off( 'mousedown' ).on( 'mousedown', function( event ) {\n                            var currentY = event.pageY;\n                            var currentHeight = self.$select.height();\n                            self.minHeight = self.minHeight || currentHeight;\n                            $( '#dd-helper' ).show().on( 'mousemove', function( event ) {\n                                self.$select.height( Math.max( currentHeight + ( event.pageY - currentY ), self.minHeight ) );\n                            }).on( 'mouseup mouseleave', function() {\n                                $( '#dd-helper' ).hide().off();\n                            });\n                        });\n        } else {\n            this.$dropdown.show();\n            this.$resize.hide();\n            this.$resize_icon.hide();\n        }\n    },\n\n    /** Renders the default select2 field */\n    _renderSearchable: function() {\n        var self = this;\n        this.$el.append( this.$select   = $( '<div/>' ) )\n                .append( this.$dropdown = $( '<div/>' ) );\n        this.$dropdown.hide();\n        if ( !this.model.get( 'multiple' ) ) {\n            this.$dropdown.show().on( 'click', function() {\n                self.$select.select2 && self.$select.select2( 'open' );\n            });\n        }\n        this.all_button = null;\n        if ( this.model.get( 'multiple' ) && !this.model.get( 'individual' ) ) {\n            this.all_button = new Buttons.ButtonCheck({\n                onclick: function() {\n                    var new_value = [];\n                    self.all_button.value() !== 0 && _.each( self.model.get( 'data' ), function( option ) {\n                        new_value.push( option.value );\n                    });\n                    self.value( new_value );\n                    self.trigger( 'change' );\n                }\n            });\n            this.$el.prepend( this.all_button.$el );\n        }\n    },\n\n    /** Matches a search term with a given text */\n    _match: function( term, text ) {\n        return !term || term == '' || String( text ).toUpperCase().indexOf( term.toUpperCase() ) >= 0\n    },\n\n    /** Updates the selection options */\n    _changeData: function() {\n        var self = this;\n        this.data = [];\n        if ( !this.model.get( 'multiple' ) && this.model.get( 'optional' ) ) {\n            this.data.push( { value: '__null__', label: self.model.get( 'empty_text' ) } );\n        }\n        _.each( this.model.get( 'data' ), function( option ) {\n            self.data.push( option );\n        });\n        if ( this.length() == 0 ) {\n            this.data.push( { value: '__null__', label: this.model.get( 'error_text' ) } );\n        }\n        if ( this.model.get( 'searchable' ) ) {\n            this.data2 = [];\n            _.each( this.data, function( option, index ) {\n                self.data2.push( { order: index, id: option.value, text: option.label, tags: option.tags } );\n            });\n            this.$select.data( 'select2' ) && this.$select.select2( 'destroy' );\n            this.matched_tags = {};\n            this.$select.select2({\n                data            : self.data2,\n                closeOnSelect   : !this.model.get( 'multiple' ),\n                multiple        : this.model.get( 'multiple' ),\n                query           : function( q ) {\n                    self.matched_tags = {};\n                    var pagesize = self.model.get( 'pagesize' );\n                    var results = _.filter( self.data2, function ( e ) {\n                        var found = false;\n                        _.each( e.tags, function( tag ) {\n                            if ( self._match( q.term, tag ) ) {\n                                found = self.matched_tags[ tag ] = true;\n                            }\n                        });\n                        return found || self._match( q.term, e.text );\n                    });\n                    q.callback({\n                        results: results.slice( ( q.page - 1 ) * pagesize, q.page * pagesize ),\n                        more   : results.length >= q.page * pagesize\n                    });\n                },\n                formatResult    : function( result ) {\n                    return _.escape( result.text ) +\n                        '<div class=\"ui-tags\">' +\n                            _.reduce( result.tags, function( memo, tag ) {\n                                if ( self.matched_tags[ tag ] ) {\n                                    return memo + '&nbsp;' +\n                                        '<div class=\"label label-info\">' +\n                                            _.escape( tag ) +\n                                        '</div>'\n                                }\n                                return memo;\n                            }, '' ) +\n                        '</div>';\n                }\n            });\n            this.$( '.select2-container .select2-search input' ).off( 'blur' );\n        } else {\n            this.$select.find( 'option' ).remove();\n            _.each( this.data, function( option ) {\n                self.$select.append( $( '<option/>' ).attr( 'value', option.value ).html( _.escape( option.label ) ) );\n            });\n        }\n        this.model.set( 'disabled', this.length() == 0 );\n        this._changeValue();\n    },\n\n    /** Handles field enabling/disabling, usually used when no options are available */\n    _changeDisabled: function() {\n        if ( this.model.get( 'searchable' ) ) {\n            this.$select.select2( this.model.get( 'disabled' ) ? 'disable' : 'enable' );\n        } else {\n            this.$select.prop( 'disabled', this.model.get( 'disabled' ) );\n        }\n    },\n\n    /** Searchable fields may display a spinner e.g. while waiting for a server response */\n    _changeWait: function() {\n        this.$dropdown.removeClass()\n                      .addClass( 'icon-dropdown fa' )\n                      .addClass( this.model.get( 'wait' ) ? 'fa-spinner fa-spin' : 'fa-caret-down' );\n    },\n\n    /** Handles field visibility */\n    _changeVisible: function() {\n        this.$el[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n        this.$select[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n    },\n\n    /** Synchronizes the model value with the actually selected field value */\n    _changeValue: function() {\n        this._setValue( this.model.get( 'value' ) );\n        if ( this.model.get( 'multiple' ) ) {\n            if ( this.all_button ) {\n                var value = this._getValue();\n                this.all_button.value( $.isArray( value ) ? value.length : 0, this.length() );\n            }\n        } else if ( this._getValue() === null && !this.model.get( 'optional' ) ) {\n            this._setValue( this.first() );\n        }\n    },\n\n    /** Return/Set current selection */\n    value: function ( new_value ) {\n        new_value !== undefined && this.model.set( 'value', new_value );\n        return this._getValue();\n    },\n\n    /** Return the first select option */\n    first: function() {\n        return this.data.length > 0 ? this.data[ 0 ].value : null;\n    },\n\n    /** Check if a value is an existing option */\n    exists: function( value ) {\n        return _.findWhere( this.data, { value: value } );\n    },\n\n    /** Return the label/text of the current selection */\n    text: function () {\n        var v = this._getValue();\n        var d = this.exists( $.isArray( v ) ? v[ 0 ] : v );\n        return d ? d.label : '';\n    },\n\n    /** Show the select field */\n    show: function() {\n        this.model.set( 'visible', true );\n    },\n\n    /** Hide the select field */\n    hide: function() {\n        this.model.set( 'visible', false );\n    },\n\n    /** Show a spinner indicating that the select options are currently loaded */\n    wait: function() {\n        this.model.set( 'wait', true );\n    },\n\n    /** Hide spinner indicating that the request has been completed */\n    unwait: function() {\n        this.model.set( 'wait', false );\n    },\n\n    /** Returns true if the field is disabled */\n    disabled: function() {\n        return this.model.get( 'disabled' );\n    },\n\n    /** Enable the select field */\n    enable: function() {\n        this.model.set( 'disabled', false );\n    },\n\n    /** Disable the select field */\n    disable: function() {\n        this.model.set( 'disabled', true );\n    },\n\n    /** Update all available options at once */\n    add: function( options, sorter ) {\n        _.each( this.model.get( 'data' ), function( v ) {\n            v.keep && !_.findWhere( options, { value: v.value } ) && options.push( v );\n        });\n        sorter && options && options.sort( sorter );\n        this.model.set( 'data', options );\n    },\n\n    /** Update available options */\n    update: function( options ) {\n        this.model.set( 'data', options );\n    },\n\n    /** Set the custom onchange callback function */\n    setOnChange: function( callback ) {\n        this.model.set( 'onchange', callback );\n    },\n\n    /** Number of available options */\n    length: function() {\n        return $.isArray( this.model.get( 'data' ) ) ? this.model.get( 'data' ).length : 0;\n    },\n\n    /** Set value to dom */\n    _setValue: function( new_value ) {\n        var self = this;\n        if( new_value === null || new_value === undefined ) {\n            new_value = '__null__';\n        }\n        if ( this.model.get( 'multiple' ) ) {\n            new_value = $.isArray( new_value ) ? new_value : [ new_value ];\n        } else if ( $.isArray( new_value ) ) {\n            if ( new_value.length > 0 ) {\n                new_value = new_value[ 0 ];\n            } else {\n                new_value = '__null__';\n            }\n        }\n        if ( this.model.get( 'searchable' ) ) {\n            if ( $.isArray( new_value ) ) {\n                var val = [];\n                _.each( new_value, function( v ) {\n                    var d = _.findWhere( self.data2, { id: v } );\n                    d && val.push( d );\n                });\n                new_value = val;\n            } else {\n                var d = _.findWhere( this.data2, { id: new_value } );\n                new_value = d;\n            }\n            this.$select.select2( 'data', new_value );\n        } else {\n            this.$select.val( new_value );\n        }\n    },\n\n    /** Get value from dom */\n    _getValue: function() {\n        var val = null;\n        if ( this.model.get( 'searchable' ) ) {\n            var selected = this.$select.select2( 'data' );\n            if ( selected ) {\n                if ( $.isArray( selected ) ) {\n                    val = [];\n                    selected.sort( function( a, b ) { return a.order - b.order } );\n                    _.each( selected, function( v ) { val.push( v.id ) } );\n                } else {\n                    val = selected.id;\n                }\n            }\n        } else {\n            val = this.$select.val();\n        }\n        return Utils.isEmpty( val ) ? null : val;\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-default.js","define([\n    //jquery\n    //backbone\n], function(){\n// =============================================================================\n/**\n * view for a popup menu\n */\nvar PopupMenu = Backbone.View.extend({\n//TODO: maybe better as singleton off the Galaxy obj\n    /** Cache the desired button element and options, set up the button click handler\n     *  NOTE: attaches this view as HTML/jQ data on the button for later use.\n     */\n    initialize: function( $button, options ){\n        // default settings\n        this.$button = $button;\n        if( !this.$button.length ){\n            this.$button = $( '<div/>' );\n        }\n        this.options = options || [];\n        this.$button.data( 'popupmenu', this );\n\n        // set up button click -> open menu behavior\n        var menu = this;\n        this.$button.click( function( event ){\n            // if there's already a menu open, remove it\n            $( '.popmenu-wrapper' ).remove();\n            menu._renderAndShow( event );\n            return false;\n        });\n    },\n\n    // render the menu, append to the page body at the click position, and set up the 'click-away' handlers, show\n    _renderAndShow: function( clickEvent ){\n        this.render();\n        this.$el.appendTo( 'body' ).css( this._getShownPosition( clickEvent )).show();\n        this._setUpCloseBehavior();\n    },\n\n    // render the menu\n    // this menu doesn't attach itself to the DOM ( see _renderAndShow )\n    render: function(){\n        // render the menu body absolute and hidden, fill with template\n        this.$el.addClass( 'popmenu-wrapper' ).hide()\n            .css({ position : 'absolute' })\n            .html( this.template( this.$button.attr( 'id' ), this.options ));\n\n        // set up behavior on each link/anchor elem\n        if( this.options.length ){\n            var menu = this;\n            //precondition: there should be one option per li\n            this.$el.find( 'li' ).each( function( i, li ){\n                var option = menu.options[i];\n\n                // if the option has 'func', call that function when the anchor is clicked\n                if( option.func ){\n                    $( this ).children( 'a.popupmenu-option' ).click( function( event ){\n                        option.func.call( menu, event, option );\n                        // We must preventDefault otherwise clicking \"cancel\"\n                        // on a purge or something still navigates and causes\n                        // the action.\n                        event.preventDefault();\n                        // bubble up so that an option click will call the close behavior\n                    });\n                }\n            });\n        }\n        return this;\n    },\n\n    template : function( id, options ){\n        return [\n            '<ul id=\"', id, '-menu\" class=\"dropdown-menu\">', this._templateOptions( options ), '</ul>'\n        ].join( '' );\n    },\n\n    _templateOptions : function( options ){\n        if( !options.length ){\n            return '<li>(no options)</li>';\n        }\n        return _.map( options, function( option ){\n            if( option.divider ){\n                return '<li class=\"divider\"></li>';\n            } else if( option.header ){\n                return [ '<li class=\"head\"><a href=\"javascript:void(0);\">', option.html, '</a></li>' ].join( '' );\n            }\n            var href   = option.href || 'javascript:void(0);',\n                target = ( option.target  )?( ' target=\"' + option.target + '\"' ):( '' ),\n                check  = ( option.checked )?( '<span class=\"fa fa-check\"></span>' ):( '' );\n            return [\n                '<li><a class=\"popupmenu-option\" href=\"', href, '\"', target, '>',\n                    check, option.html,\n                '</a></li>'\n            ].join( '' );\n        }).join( '' );\n    },\n\n    // get the absolute position/offset for the menu\n    _getShownPosition : function( clickEvent ){\n\n        // display menu horiz. centered on click...\n        var menuWidth = this.$el.width();\n        var x = clickEvent.pageX - menuWidth / 2 ;\n\n        // adjust to handle horiz. scroll and window dimensions ( draw entirely on visible screen area )\n        x = Math.min( x, $( document ).scrollLeft() + $( window ).width() - menuWidth - 5 );\n        x = Math.max( x, $( document ).scrollLeft() + 5 );\n        return {\n            top: clickEvent.pageY,\n            left: x\n        };\n    },\n\n    // bind an event handler to all available frames so that when anything is clicked\n    // the menu is removed from the DOM and the event handler unbinds itself\n    _setUpCloseBehavior: function(){\n        var menu = this;\n//TODO: alternately: focus hack, blocking overlay, jquery.blockui\n\n        // function to close popup and unbind itself\n        function closePopup( event ){\n            $( document ).off( 'click.close_popup' );\n            if( window && window.parent !== window ){\n                try {\n                    $( window.parent.document ).off( \"click.close_popup\" );\n                } catch( err ){}\n            } else {\n                try {\n                    $( 'iframe#galaxy_main' ).contents().off( \"click.close_popup\" );\n                } catch( err ){}\n            }\n            menu.remove();\n        }\n\n        $( 'html' ).one( \"click.close_popup\", closePopup );\n        if( window && window.parent !== window ){\n            try {\n                $( window.parent.document ).find( 'html' ).one( \"click.close_popup\", closePopup );\n            } catch( err ){}\n        } else {\n            try {\n                $( 'iframe#galaxy_main' ).contents().one( \"click.close_popup\", closePopup );\n            } catch( err ){}\n        }\n    },\n\n    // add a menu option/item at the given index\n    addItem: function( item, index ){\n        // append to end if no index\n        index = ( index >= 0 ) ? index : this.options.length;\n        this.options.splice( index, 0, item );\n        return this;\n    },\n\n    // remove a menu option/item at the given index\n    removeItem: function( index ){\n        if( index >=0 ){\n            this.options.splice( index, 1 );\n        }\n        return this;\n    },\n\n    // search for a menu option by its html\n    findIndexByHtml: function( html ){\n        for( var i = 0; i < this.options.length; i++ ){\n            if( _.has( this.options[i], 'html' ) && ( this.options[i].html === html )){\n                return i;\n            }\n        }\n        return null;\n    },\n\n    // search for a menu option by its html\n    findItemByHtml: function( html ){\n        return this.options[( this.findIndexByHtml( html ))];\n    },\n\n    // string representation\n    toString: function(){\n        return 'PopupMenu';\n    }\n});\n/** shortcut to new for when you don't need to preserve the ref */\nPopupMenu.create = function _create( $button, options ){\n    return new PopupMenu( $button, options );\n};\n\n// -----------------------------------------------------------------------------\n// the following class functions are bridges from the original make_popupmenu and make_popup_menus\n// to the newer backbone.js PopupMenu\n\n/** Create a PopupMenu from simple map initial_options activated by clicking button_element.\n *      Converts initial_options to object array used by PopupMenu.\n *  @param {jQuery|DOMElement} button_element element which, when clicked, activates menu\n *  @param {Object} initial_options map of key -> values, where\n *      key is option text, value is fn to call when option is clicked\n *  @returns {PopupMenu} the PopupMenu created\n */\nPopupMenu.make_popupmenu = function( button_element, initial_options ){\n    var convertedOptions = [];\n    _.each( initial_options, function( optionVal, optionKey ){\n        var newOption = { html: optionKey };\n\n        // keys with null values indicate: header\n        if( optionVal === null ){ // !optionVal? (null only?)\n            newOption.header = true;\n\n        // keys with function values indicate: a menu option\n        } else if( jQuery.type( optionVal ) === 'function' ){\n            newOption.func = optionVal;\n        }\n        //TODO:?? any other special optionVals?\n        // there was no divider option originally\n        convertedOptions.push( newOption );\n    });\n    return new PopupMenu( $( button_element ), convertedOptions );\n};\n\n/** Find all anchors in $parent (using selector) and covert anchors into a PopupMenu options map.\n *  @param {jQuery} $parent the element that contains the links to convert to options\n *  @param {String} selector jq selector string to find links\n *  @returns {Object[]} the options array to initialize a PopupMenu\n */\n//TODO: lose parent and selector, pass in array of links, use map to return options\nPopupMenu.convertLinksToOptions = function( $parent, selector ){\n    $parent = $( $parent );\n    selector = selector || 'a';\n    var options = [];\n    $parent.find( selector ).each( function( elem, i ){\n        var option = {}, $link = $( elem );\n\n        // convert link text to the option text (html) and the href into the option func\n        option.html = $link.text();\n        if( $link.attr( 'href' ) ){\n            var linkHref    = $link.attr( 'href' ),\n                linkTarget  = $link.attr( 'target' ),\n                confirmText = $link.attr( 'confirm' );\n\n            option.func = function(){\n                // if there's a \"confirm\" attribute, throw up a confirmation dialog, and\n                //  if the user cancels - do nothing\n                if( ( confirmText ) && ( !confirm( confirmText ) ) ){ return; }\n\n                // if there's no confirm attribute, or the user accepted the confirm dialog:\n                switch( linkTarget ){\n                    // relocate the center panel\n                    case '_parent':\n                        window.parent.location = linkHref;\n                        break;\n\n                    // relocate the entire window\n                    case '_top':\n                        window.top.location = linkHref;\n                        break;\n\n                    // relocate this panel\n                    default:\n                        window.location = linkHref;\n                }\n            };\n        }\n        options.push( option );\n    });\n    return options;\n};\n\n/** Create a single popupmenu from existing DOM button and anchor elements\n *  @param {jQuery} $buttonElement the element that when clicked will open the menu\n *  @param {jQuery} $menuElement the element that contains the anchors to convert into a menu\n *  @param {String} menuElementLinkSelector jq selector string used to find anchors to be made into menu options\n *  @returns {PopupMenu} the PopupMenu (Backbone View) that can render, control the menu\n */\nPopupMenu.fromExistingDom = function( $buttonElement, $menuElement, menuElementLinkSelector ){\n    $buttonElement = $( $buttonElement );\n    $menuElement = $( $menuElement );\n    var options = PopupMenu.convertLinksToOptions( $menuElement, menuElementLinkSelector );\n    // we're done with the menu (having converted it to an options map)\n    $menuElement.remove();\n    return new PopupMenu( $buttonElement, options );\n};\n\n/** Create all popupmenus within a document or a more specific element\n *  @param {DOMElement} parent the DOM element in which to search for popupmenus to build (defaults to document)\n *  @param {String} menuSelector jq selector string to find popupmenu menu elements (defaults to \"div[popupmenu]\")\n *  @param {Function} buttonSelectorBuildFn the function to build the jq button selector.\n *      Will be passed $menuElement, parent.\n *      (Defaults to return '#' + $menuElement.attr( 'popupmenu' ); )\n *  @returns {PopupMenu[]} array of popupmenus created\n */\nPopupMenu.make_popup_menus = function( parent, menuSelector, buttonSelectorBuildFn ){\n    parent = parent || document;\n    // orig. Glx popupmenu menus have a (non-std) attribute 'popupmenu'\n    //  which contains the id of the button that activates the menu\n    menuSelector = menuSelector || 'div[popupmenu]';\n    // default to (orig. Glx) matching button to menu by using the popupmenu attr of the menu as the id of the button\n    buttonSelectorBuildFn = buttonSelectorBuildFn || function( $menuElement, parent ){\n        return '#' + $menuElement.attr( 'popupmenu' );\n    };\n\n    // aggregate and return all PopupMenus\n    var popupMenusCreated = [];\n    $( parent ).find( menuSelector ).each( function(){\n        var $menuElement    = $( this ),\n            $buttonElement  = $( parent ).find( buttonSelectorBuildFn( $menuElement, parent ) );\n        popupMenusCreated.push( PopupMenu.fromDom( $buttonElement, $menuElement ) );\n        $buttonElement.addClass( 'popup' );\n    });\n    return popupMenusCreated;\n};\n\n\n// =============================================================================\n    return PopupMenu;\n});\n\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/popup-menu.js","/* This class maps the form dom to an api compatible javascript dictionary. */\ndefine([ 'utils/utils' ], function( Utils ) {\n    var Manager = Backbone.Model.extend({\n        initialize: function( app ) {\n            this.app = app;\n        },\n\n        /** Creates a checksum. */\n        checksum: function() {\n            var sum = '';\n            var self = this;\n            this.app.section.$el.find( '.section-row' ).each( function() {\n                var id = $(this).attr( 'id' );\n                var field = self.app.field_list[ id ];\n                if ( field ) {\n                    sum += id + ':' + JSON.stringify( field.value && field.value() ) + ':' + field.collapsed + ';';\n                }\n            });\n            return sum;\n        },\n\n        /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission. */\n        create: function() {\n            var self = this;\n\n            // get raw dictionary from dom\n            var dict = {};\n            this._iterate( this.app.section.$el, dict );\n\n            // add to result dictionary, label elements\n            var result_dict = {};\n            this.flat_dict = {};\n            function add( flat_id, input_id, input_value ) {\n                self.flat_dict[ flat_id ] = input_id;\n                result_dict[ flat_id ] = input_value;\n                self.app.element_list[ input_id ] && self.app.element_list[ input_id ].$el.attr( 'tour_id', flat_id );\n            }\n            // converter between raw dictionary and job dictionary\n            function convert( identifier, head ) {\n                for ( var index in head ) {\n                    var node = head[ index ];\n                    if ( node.input ) {\n                        var input = node.input;\n                        var flat_id = identifier;\n                        if ( identifier != '' ) {\n                            flat_id += '|';\n                        }\n                        flat_id += input.name;\n                        switch ( input.type ) {\n                            case 'repeat':\n                                var section_label = 'section-';\n                                var block_indices = [];\n                                var block_prefix = null;\n                                for ( var block_label in node ) {\n                                    var pos = block_label.indexOf( section_label );\n                                    if ( pos != -1 ) {\n                                        pos += section_label.length;\n                                        block_indices.push( parseInt( block_label.substr( pos ) ));\n                                        if ( !block_prefix ) {\n                                            block_prefix = block_label.substr( 0, pos );\n                                        }\n                                    }\n                                }\n                                block_indices.sort( function( a, b ) { return a - b; });\n                                var index = 0;\n                                for ( var i in block_indices ) {\n                                    convert( flat_id + '_' + index++, node[ block_prefix + block_indices[ i ] ]);\n                                }\n                                break;\n                            case 'conditional':\n                                var value = self.app.field_list[ input.id ].value();\n                                add( flat_id + '|' + input.test_param.name, input.id, value );\n                                var selectedCase = matchCase( input, value );\n                                if ( selectedCase != -1 ) {\n                                    convert( flat_id, head[ input.id + '-section-' + selectedCase ] );\n                                }\n                                break;\n                            case 'section':\n                                convert( !input.flat && flat_id || '', node );\n                                break;\n                            default:\n                                var field = self.app.field_list[ input.id ];\n                                if ( field && field.value ) {\n                                    var value = field.value();\n                                    if ( input.ignore === undefined || input.ignore != value ) {\n                                        if ( field.collapsed && input.collapsible_value ) {\n                                            value = input.collapsible_value;\n                                        }\n                                        add( flat_id, input.id, value );\n                                        if ( input.payload ) {\n                                            for ( var p_id in input.payload ) {\n                                                add( p_id, input.id, input.payload[ p_id ] );\n                                            }\n                                        }\n                                    }\n                                }\n                        }\n                    }\n                }\n            }\n            convert( '', dict );\n            return result_dict;\n        },\n\n        /** Matches flat ids to corresponding input element\n         * @param{string} flat_id - Flat input id to be looked up.\n         */\n        match: function ( flat_id ) {\n            return this.flat_dict && this.flat_dict[ flat_id ];\n        },\n\n        /** Match conditional values to selected cases\n        */\n        matchCase: function( input, value ) {\n            return matchCase( input, value );\n        },\n\n        /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n        */\n        matchModel: function( model, callback ) {\n            var self = this;\n            visitInputs( model.inputs, function( input, name ) {\n                self.flat_dict[ name ] && callback ( input, self.flat_dict[ name ] );\n            });\n        },\n\n        /** Matches identifier from api response to input elements e.g. used to display validation errors\n        */\n        matchResponse: function( response ) {\n            var result = {};\n            var self = this;\n            function search ( id, head ) {\n                if ( typeof head === 'string' ) {\n                    var input_id = self.flat_dict[ id ];\n                    input_id && ( result[ input_id ] = head );\n                } else {\n                    for ( var i in head ) {\n                        var new_id = i;\n                        if ( id !== '' ) {\n                            var separator = '|';\n                            if ( head instanceof Array ) {\n                                separator = '_';\n                            }\n                            new_id = id + separator + new_id;\n                        }\n                        search ( new_id, head[ i ] );\n                    }\n                }\n            }\n            search( '', response );\n            return result;\n        },\n\n        /** Map dom tree to dictionary tree with input elements.\n        */\n        _iterate: function( parent, dict ) {\n            var self = this;\n            var children = $( parent ).children();\n            children.each( function() {\n                var child = this;\n                var id = $( child ).attr( 'id' );\n                if ( $( child ).hasClass( 'section-row' ) ) {\n                    var input = self.app.input_list[ id ];\n                    dict[ id ] = ( input && { input : input } ) || {};\n                    self._iterate( child, dict[ id ] );\n                } else {\n                    self._iterate( child, dict );\n                }\n            });\n        }\n    });\n\n    /** Match conditional values to selected cases\n     * @param{dict}   input     - Definition of conditional input parameter\n     * @param{dict}   value     - Current value\n     */\n    var matchCase = function( input, value ) {\n        if ( input.test_param.type == 'boolean' ) {\n            if ( value == 'true' ) {\n                value = input.test_param.truevalue || 'true';\n            } else {\n                value = input.test_param.falsevalue || 'false';\n            }\n        }\n        for ( var i in input.cases ) {\n            if ( input.cases[ i ].value == value ) {\n                return i;\n            }\n        }\n        return -1;\n    };\n\n    /** Visits tool inputs\n     * @param{dict}   inputs    - Nested dictionary of input elements\n     * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n     */\n    var visitInputs = function( inputs, callback, prefix, context ) {\n        context = $.extend( true, {}, context );\n        _.each( inputs, function ( input ) {\n            if ( input && input.type && input.name ) {\n                context[ input.name ] = input;\n            }\n        });\n        for ( var key in inputs ) {\n            var node = inputs[ key ];\n            node.name = node.name || key;\n            var name = prefix ? prefix + '|' + node.name : node.name;\n            switch ( node.type ) {\n                case 'repeat':\n                    _.each( node.cache, function( cache, j ) {\n                        visitInputs( cache, callback, name + '_' + j, context );\n                    });\n                    break;\n                case 'conditional':\n                    if ( node.test_param ) {\n                        callback( node.test_param, name + '|' + node.test_param.name, context );\n                        var selectedCase = matchCase( node, node.test_param.value );\n                        if ( selectedCase != -1 ) {\n                            visitInputs( node.cases[ selectedCase ].inputs, callback, name, context );\n                        } else {\n                            Galaxy.emit.debug( 'form-data::visitInputs() - Invalid case for ' + name + '.' );\n                        }\n                    } else {\n                        Galaxy.emit.debug( 'form-data::visitInputs() - Conditional test parameter missing for ' + name  + '.' );\n                    }\n                    break;\n                case 'section':\n                    visitInputs( node.inputs, callback, name, context )\n                    break;\n                default:\n                    callback( node, name, context );\n            }\n        }\n    };\n\n    return {\n        Manager         : Manager,\n        visitInputs     : visitInputs\n    }\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-data.js","/** This class creates a ui table element. */\ndefine( [ 'utils/utils' ], function( Utils ) {\n    var View = Backbone.View.extend({\n        initialize : function(options) {\n            this.options = Utils.merge(options, {\n                content     : 'No content available.',\n                onchange    : null,\n                ondblclick  : null,\n                onconfirm   : null,\n                cls         : 'ui-table',\n                selectable  : true,\n                cls_tr      : ''\n            });\n            this.setElement( this._template() );\n            this.$thead     = this.$('thead');\n            this.$tbody     = this.$('tbody');\n            this.$tmessage  = this.$('tmessage');\n            this.row = this._row();\n            this.row_count = 0;\n        },\n\n        events : {\n            'click'     : '_onclick',\n            'dblclick'  : '_ondblclick'\n        },\n\n        /** Add cell to header row */\n        addHeader: function( $el ) {\n            this.row.append( $( '<th/>' ).append( $el ) );\n        },\n\n        /** Append header row to table */\n        appendHeader: function() {\n            this.$thead.append( this.row );\n            this.row = $( '<tr/>' );\n        },\n\n        /** Add cell to row */\n        add: function($el, width, align) {\n            var wrapper = $( '<td/>' );\n            if ( width ) {\n                wrapper.css( 'width', width );\n            }\n            if ( align ) {\n                wrapper.css( 'text-align', align );\n            }\n            this.row.append( wrapper.append( $el ) );\n        },\n        \n        /** Append row to table */\n        append: function( id, fade ) {\n            this._commit( id, fade, false );\n        },\n        \n        /** Prepend row to table */\n        prepend: function( id, fade ) {\n            this._commit( id, fade, true );\n        },\n        \n        /** Helper to get row element */\n        get: function( id ) {\n            return this.$( '#' + id );\n        },\n\n        /** Delete row by id */\n        del: function( id ) {\n            var item = this.$tbody.find( '#' + id );\n            if ( item.length > 0 ) {\n                item.remove();\n                this.row_count--;\n                this._refresh();\n            }\n        },\n\n        /** Delete all rows */\n        delAll: function() {\n            this.$tbody.empty();\n            this.row_count = 0;\n            this._refresh();\n        },\n\n        /** Set a value i.e. selects/highlights a particular row by id */\n        value: function( new_value ) {\n            if ( this.options.selectable ) {\n                this.before = this.$tbody.find( '.current' ).attr( 'id' );\n                if ( new_value !== undefined ) {\n                    this.$tbody.find( 'tr' ).removeClass( 'current' );\n                    if ( new_value ) {\n                        this.$tbody.find( '#' + new_value ).addClass( 'current' );\n                    }\n                }\n                var after = this.$tbody.find( '.current' ).attr( 'id' );\n                if ( after === undefined ) {\n                    return null;\n                } else {\n                    if ( after != this.before && this.options.onchange ) {\n                        this.options.onchange( new_value );\n                    }\n                    return after;\n                }\n            }\n        },\n\n        /** Return the number of rows */\n        size: function() {\n            return this.$tbody.find( 'tr' ).length;\n        },\n\n        /** Helper to append rows */\n        _commit: function( id, fade, prepend ) {\n            this.del( id );\n            this.row.attr( 'id', id );\n            if ( prepend ) {\n                this.$tbody.prepend( this.row );\n            } else {\n                this.$tbody.append( this.row );\n            }\n            if ( fade ) {\n                this.row.hide();\n                this.row.fadeIn();\n            }\n            this.row = this._row();\n            this.row_count++;\n            this._refresh();\n        },\n\n        /** Helper to create new row */\n        _row: function() {\n            return $( '<tr class=\"' + this.options.cls_tr + '\"></tr>' );\n        },\n\n        /** Handles onclick events */\n        _onclick: function(e) {\n            var old_value = this.value();\n            var new_value = $( e.target ).closest( 'tr' ).attr( 'id' );\n            if ( new_value != '' ){\n                if ( new_value && old_value != new_value ) {\n                    if ( this.options.onconfirm ) {\n                        this.options.onconfirm( new_value );\n                    } else {\n                        this.value( new_value );\n                    }\n                }\n            }\n        },\n\n        /** Handles ondblclick events */\n        _ondblclick: function( e ) {\n            var value = this.value();\n            if ( value && this.options.ondblclick ) {\n                this.options.ondblclick( value );\n            }\n        },\n\n        /** Refresh helper */\n        _refresh: function() {\n            if ( this.row_count == 0 ) {\n                this.$tmessage.show();\n            } else {\n                this.$tmessage.hide();\n            }\n        },\n\n        /** Template */\n        _template: function() {\n            return  '<div>' +\n                        '<table class=\"' + this.options.cls + '\">' +\n                            '<thead/>' +\n                            '<tbody/>' +\n                        '</table>' +\n                        '<tmessage>' + this.options.content + '</tmessage>' +\n                    '<div>';\n        }\n    });\n\n    return {\n        View: View\n    }\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-table.js","/**\n    This class creates a form input element wrapper\n*/\ndefine([], function() {\n    return Backbone.View.extend({\n        initialize: function( app, options ) {\n            this.app = app;\n            this.app_options = app.model ? app.model.attributes : {};\n            this.field = options && options.field || new Backbone.View();\n            this.model = options && options.model || new Backbone.Model({\n                text_enable     : this.app_options.text_enable   || 'Enable',\n                text_disable    : this.app_options.text_disable  || 'Disable',\n                cls_enable      : this.app_options.cls_enable    || 'fa fa-caret-square-o-down',\n                cls_disable     : this.app_options.cls_disable   || 'fa fa-caret-square-o-up',\n                always_refresh  : this.app_options.always_refresh\n            }).set( options );\n\n            // set element and link components\n            this.setElement( this._template() );\n            this.$field             = this.$( '.ui-form-field' );\n            this.$info              = this.$( '.ui-form-info' );\n            this.$preview           = this.$( '.ui-form-preview' );\n            this.$collapsible       = this.$( '.ui-form-collapsible' );\n            this.$collapsible_text  = this.$( '.ui-form-collapsible-text' );\n            this.$collapsible_icon  = this.$( '.ui-form-collapsible-icon' );\n            this.$title             = this.$( '.ui-form-title' );\n            this.$title_text        = this.$( '.ui-form-title-text' );\n            this.$error_text        = this.$( '.ui-form-error-text' );\n            this.$error             = this.$( '.ui-form-error' );\n            this.$backdrop          = this.$( '.ui-form-backdrop' );\n\n            // add field element\n            this.$field.prepend( this.field.$el );\n\n            // decide wether to expand or collapse fields\n            var collapsible_value = this.model.get( 'collapsible_value' );\n            this.field.collapsed = collapsible_value !== undefined && JSON.stringify( this.model.get( 'value' ) ) == JSON.stringify( collapsible_value );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n\n            // add click handler\n            var self = this;\n            this.$collapsible.on( 'click', function() {\n                self.field.collapsed = !self.field.collapsed;\n                app.trigger && app.trigger( 'change' );\n                self.render();\n            });\n\n            // hide error on value change\n            if ( this.field.model && !this.model.get( 'always_refresh' ) ) {\n                this.listenTo( this.field.model, 'change:value', function() { self.reset() } );\n            }\n        },\n\n        /** Set backdrop for input element */\n        backdrop: function() {\n            this.model.set( 'backdrop', true );\n        },\n\n        /** Set error text */\n        error: function( text ) {\n            this.model.set( 'error_text', text );\n        },\n\n        /** Reset this view */\n        reset: function() {\n            !this.model.get( 'fixed' ) && this.model.set( 'error_text', null );\n        },\n\n        render: function() {\n            // render help\n            $( '.tooltip' ).hide();\n            var help_text = this.model.get( 'help', '' );\n            var help_argument = this.model.get( 'argument' );\n            if ( help_argument && help_text.indexOf( '(' + help_argument + ')' ) == -1 ) {\n                help_text += ' (' + help_argument + ')';\n            }\n            this.$info.html( help_text );\n            // render visibility\n            this.$el[ this.model.get( 'hidden' ) ? 'hide' : 'show' ]();\n            // render preview view for collapsed fields\n            this.$preview[ ( this.field.collapsed && this.model.get( 'collapsible_preview' ) || this.model.get( 'disabled' ) ) ? 'show' : 'hide' ]()\n                         .html( _.escape( this.model.get( 'text_value' ) ) );\n            // render error messages\n            var error_text = this.model.get( 'error_text' );\n            this.$error[ error_text ? 'show' : 'hide' ]();\n            this.$el[ error_text ? 'addClass' : 'removeClass' ]( 'ui-error' );\n            this.$error_text.html( error_text );\n            // render backdrop\n            this.$backdrop[ this.model.get( 'backdrop' ) ? 'show' : 'hide' ]();\n            // render input field\n            this.field.collapsed || this.model.get( 'disabled' ) ? this.$field.hide() : this.$field.show();\n            // render input field color and style\n            this.field.model && this.field.model.set( { 'color': this.model.get( 'color' ), 'style': this.model.get( 'style' ) } );\n            // render collapsible options\n            if ( !this.model.get( 'disabled' ) && this.model.get( 'collapsible_value' ) !== undefined ) {\n                var collapsible_state = this.field.collapsed ? 'enable' : 'disable';\n                this.$title_text.hide();\n                this.$collapsible.show();\n                this.$collapsible_text.text( this.model.get( 'label' ) );\n                this.$collapsible_icon.removeClass().addClass( 'icon' )\n                                      .addClass( this.model.get( 'cls_' +  collapsible_state ) )\n                                      .attr( 'data-original-title', this.model.get( 'text_' + collapsible_state ) )\n                                      .tooltip( { placement: 'bottom' } );\n            } else {\n                this.$title_text.show().text( this.model.get( 'label' ) );\n                this.$collapsible.hide();\n            }\n        },\n\n        _template: function() {\n            return  $( '<div/>' ).addClass( 'ui-form-element' )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-error ui-error' )\n                                    .append( $( '<span/>' ).addClass( 'fa fa-arrow-down' ) )\n                                    .append( $( '<span/>' ).addClass( 'ui-form-error-text' ) )\n                                 )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-title' )\n                                    .append( $( '<div/>' ).addClass( 'ui-form-collapsible' )\n                                        .append( $( '<i/>' ).addClass( 'ui-form-collapsible-icon' ) )\n                                        .append( $( '<span/>' ).addClass( 'ui-form-collapsible-text' ) )\n                                    )\n                                    .append( $( '<span/>' ).addClass( 'ui-form-title-text' ) )\n                                 )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-field' )\n                                    .append( $( '<span/>' ).addClass( 'ui-form-info' ) )\n                                    .append( $( '<div/>' ).addClass( 'ui-form-backdrop' ) )\n                                 )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-preview' ) );\n        }\n    });\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-input.js","/**\n    This class creates input elements. New input parameter types should be added to the types dictionary.\n*/\ndefine(['utils/utils',\n        'mvc/ui/ui-misc',\n        'mvc/ui/ui-select-content',\n        'mvc/ui/ui-select-library',\n        'mvc/ui/ui-select-ftp',\n        'mvc/ui/ui-color-picker'],\n    function( Utils, Ui, SelectContent, SelectLibrary, SelectFtp, ColorPicker ) {\n\n    // create form view\n    return Backbone.Model.extend({\n        /** Available parameter types */\n        types: {\n            'text'              : '_fieldText',\n            'password'          : '_fieldText',\n            'select'            : '_fieldSelect',\n            'data_column'       : '_fieldSelect',\n            'genomebuild'       : '_fieldSelect',\n            'data'              : '_fieldData',\n            'data_collection'   : '_fieldData',\n            'integer'           : '_fieldSlider',\n            'float'             : '_fieldSlider',\n            'boolean'           : '_fieldBoolean',\n            'drill_down'        : '_fieldDrilldown',\n            'color'             : '_fieldColor',\n            'hidden'            : '_fieldHidden',\n            'hidden_data'       : '_fieldHidden',\n            'baseurl'           : '_fieldHidden',\n            'library_data'      : '_fieldLibrary',\n            'ftpfile'           : '_fieldFtp',\n            'upload'            : '_fieldUpload'\n        },\n\n        /** Returns an input field for a given field type */\n        create: function( input_def ) {\n            var fieldClass = this.types[ input_def.type ];\n            var field = typeof( this[ fieldClass ] ) === 'function' ? this[ fieldClass ].call( this, input_def ) : null;\n            if ( !field ) {\n                field = input_def.options ? this._fieldSelect( input_def ) : this._fieldText( input_def );\n                Galaxy.emit.debug('form-parameters::_addRow()', 'Auto matched field type (' + input_def.type + ').');\n            }\n            input_def.value === undefined && ( input_def.value = null );\n            field.value( input_def.value );\n            return field;\n        },\n\n        /** Data input field */\n        _fieldData: function( input_def ) {\n            return new SelectContent.View({\n                id          : 'field-' + input_def.id,\n                extensions  : input_def.extensions,\n                optional    : input_def.optional,\n                multiple    : input_def.multiple,\n                type        : input_def.type,\n                flavor      : input_def.flavor,\n                data        : input_def.options,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Select/Checkbox/Radio options field */\n        _fieldSelect: function ( input_def ) {\n            // show text field e.g. in workflow editor\n            if( input_def.is_workflow ) {\n                return this._fieldText( input_def );\n            }\n\n            // customize properties\n            if ( input_def.type == 'data_column' ) {\n                input_def.error_text = 'Missing columns in referenced dataset.'\n            }\n\n            // identify available options\n            var data = input_def.data;\n            if( !data ) {\n                data = [];\n                _.each( input_def.options, function( option ) {\n                    data.push( { label: option[ 0 ], value: option[ 1 ] } );\n                });\n            }\n\n            // identify display type\n            var SelectClass = Ui.Select;\n            switch ( input_def.display ) {\n                case 'checkboxes':\n                    SelectClass = Ui.Checkbox;\n                    break;\n                case 'radio':\n                    SelectClass = Ui.Radio;\n                    break;\n                case 'radiobutton':\n                    SelectClass = Ui.RadioButton;\n                    break;\n            }\n\n            // create select field\n            return new SelectClass.View({\n                id          : 'field-' + input_def.id,\n                data        : data,\n                error_text  : input_def.error_text || 'No options available',\n                multiple    : input_def.multiple,\n                optional    : input_def.optional,\n                onchange    : input_def.onchange,\n                individual  : input_def.individual,\n                searchable  : input_def.flavor !== 'workflow'\n            });\n        },\n\n        /** Drill down options field */\n        _fieldDrilldown: function ( input_def ) {\n            // show text field e.g. in workflow editor\n            if( input_def.is_workflow ) {\n                return this._fieldText( input_def );\n            }\n\n            // create drill down field\n            return new Ui.Drilldown.View({\n                id          : 'field-' + input_def.id,\n                data        : input_def.options,\n                display     : input_def.display,\n                optional    : input_def.optional,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Text input field */\n        _fieldText: function( input_def ) {\n            // field replaces e.g. a select field\n            if ( input_def.options && input_def.data ) {\n                input_def.area = input_def.multiple;\n                if ( Utils.isEmpty( input_def.value ) ) {\n                    input_def.value = null;\n                } else {\n                    if ( $.isArray( input_def.value ) ) {\n                        var str_value = '';\n                        for ( var i in input_def.value ) {\n                            str_value += String( input_def.value[ i ] );\n                            if ( !input_def.multiple ) {\n                                break;\n                            }\n                            str_value += '\\n';\n                        }\n                        input_def.value = str_value;\n                    }\n                }\n            }\n            // create input element\n            return new Ui.Input({\n                id          : 'field-' + input_def.id,\n                type        : input_def.type,\n                area        : input_def.area,\n                readonly    : input_def.readonly,\n                placeholder : input_def.placeholder,\n                datalist    : input_def.datalist,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Slider field */\n        _fieldSlider: function( input_def ) {\n            return new Ui.Slider.View({\n                id          : 'field-' + input_def.id,\n                precise     : input_def.type == 'float',\n                is_workflow : input_def.is_workflow,\n                min         : input_def.min,\n                max         : input_def.max,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Hidden field */\n        _fieldHidden: function( input_def ) {\n            return new Ui.Hidden({\n                id          : 'field-' + input_def.id,\n                info        : input_def.info\n            });\n        },\n\n        /** Boolean field */\n        _fieldBoolean: function( input_def ) {\n            return new Ui.RadioButton.View({\n                id          : 'field-' + input_def.id,\n                data        : [ { label : 'Yes', value : 'true'  },\n                                { label : 'No',  value : 'false' }],\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Color picker field */\n        _fieldColor: function( input_def ) {\n            return new ColorPicker({\n                id          : 'field-' + input_def.id,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Library dataset field */\n        _fieldLibrary: function( input_def ) {\n            return new SelectLibrary.View({\n                id          : 'field-' + input_def.id,\n                optional    : input_def.optional,\n                multiple    : input_def.multiple,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** FTP file field */\n        _fieldFtp: function( input_def ) {\n            return new SelectFtp.View({\n                id          : 'field-' + input_def.id,\n                optional    : input_def.optional,\n                multiple    : input_def.multiple,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Upload file field */\n        _fieldUpload: function( input_def ) {\n            return new Ui.Upload({\n                id          : 'field-' + input_def.id,\n                onchange    : input_def.onchange\n            });\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-parameters.js","/** This class creates a ui component which enables the dynamic creation of portlets */\ndefine( [ 'utils/utils', 'mvc/ui/ui-portlet', 'mvc/ui/ui-misc' ],\nfunction( Utils, Portlet, Ui ) {\n    var View = Backbone.View.extend({\n        initialize: function( options ) {\n            this.list = {};\n            this.options = Utils.merge( options, {\n                title       : 'Repeat',\n                empty_text  : 'Not available.',\n                max         : null,\n                min         : null\n            });\n            this.button_new = new Ui.ButtonIcon({\n                icon    : 'fa-plus',\n                title   : 'Insert ' + this.options.title,\n                tooltip : 'Add new ' + this.options.title + ' block',\n                cls     : 'ui-button-icon ui-clear-float form-repeat-add',\n                onclick : function() { options.onnew && options.onnew() }\n            });\n            this.setElement( $( '<div/>' ).append( this.$list = $( '<div/>' ) )\n                                          .append( $( '<div/>' ).append( this.button_new.$el ) ) );\n        },\n\n        /** Number of repeat blocks */\n        size: function() {\n            return _.size( this.list );\n        },\n\n        /** Add new repeat block */\n        add: function( options ) {\n            if ( !options.id || this.list[ options.id ] ) {\n                Galaxy.emit.debug( 'form-repeat::add()', 'Duplicate or invalid repeat block id.' );\n                return;\n            }\n            var button_delete = new Ui.ButtonIcon({\n                icon    : 'fa-trash-o',\n                tooltip : 'Delete this repeat block',\n                cls     : 'ui-button-icon-plain form-repeat-delete',\n                onclick : function() { options.ondel && options.ondel() }\n            });\n            var portlet = new Portlet.View({\n                id              : options.id,\n                title           : 'placeholder',\n                cls             : options.cls || 'ui-portlet-repeat',\n                operations      : { button_delete: button_delete }\n            });\n            portlet.append( options.$el );\n            portlet.$el.addClass( 'section-row' ).hide();\n            this.list[ options.id ] = portlet;\n            this.$list.append( portlet.$el.fadeIn( 'fast' ) );\n            this.options.max > 0 && this.size() >= this.options.max && this.button_new.disable();\n            this._refresh();\n        },\n\n        /** Delete repeat block */\n        del: function( id ) {\n            if ( !this.list[ id ] ) {\n                Galaxy.emit.debug( 'form-repeat::del()', 'Invalid repeat block id.' );\n                return;\n            }\n            this.$list.find( '#' + id ).remove();\n            delete this.list[ id ];\n            this.button_new.enable();\n            this._refresh();\n        },\n\n        /** Remove all */\n        delAll: function() {\n            for( var id in this.list ) {\n                this.del( id );\n            }\n        },\n\n        /** Hides add/del options */\n        hideOptions: function() {\n            this.button_new.$el.hide();\n            _.each( this.list, function( portlet ) { portlet.hideOperation( 'button_delete' ) } );\n            _.isEmpty( this.list ) && this.$el.append( $( '<div/>' ).addClass( 'ui-form-info' ).html( this.options.empty_text ) );\n        },\n\n        /** Refresh view */\n        _refresh: function() {\n            var index = 0;\n            for ( var id in this.list ) {\n                var portlet = this.list[ id ];\n                portlet.title( ++index + ': ' + this.options.title );\n                portlet[ this.size() > this.options.min ? 'showOperation' : 'hideOperation' ]( 'button_delete' );\n            }\n        }\n    });\n\n    return {\n        View : View\n    }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-repeat.js","/**\n    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n*/\ndefine([ 'utils/utils', 'mvc/ui/ui-misc', 'mvc/ui/ui-portlet', 'mvc/form/form-repeat', 'mvc/form/form-input', 'mvc/form/form-parameters' ],\nfunction( Utils, Ui, Portlet, Repeat, InputElement, Parameters ) {\n    var View = Backbone.View.extend({\n        initialize: function( app, options ) {\n            this.app = app;\n            this.inputs = options.inputs;\n            this.parameters = new Parameters();\n            this.setElement( $( '<div/>' ) );\n            this.render();\n        },\n\n        /** Render section view */\n        render: function() {\n            var self = this;\n            this.$el.empty();\n            _.each( this.inputs, function( input ) { self.add( input ) } );\n        },\n\n        /** Add a new input element */\n        add: function( input ) {\n            var input_def = jQuery.extend( true, {}, input );\n            input_def.id = input.id = Utils.uid();\n            this.app.input_list[ input_def.id ] = input_def;\n            switch( input_def.type ) {\n                case 'conditional':\n                    this._addConditional( input_def );\n                    break;\n                case 'repeat':\n                    this._addRepeat( input_def );\n                    break;\n                case 'section':\n                    this._addSection( input_def );\n                    break;\n                default:\n                    this._addRow( input_def );\n            }\n        },\n\n        /** Add a conditional block */\n        _addConditional: function( input_def ) {\n            var self = this;\n            input_def.test_param.id = input_def.id;\n            this.app.model.get( 'sustain_conditionals' ) && ( input_def.test_param.disabled = true );\n            var field = this._addRow( input_def.test_param );\n\n            // set onchange event for test parameter\n            field.model && field.model.set( 'onchange', function( value ) {\n                var selectedCase = self.app.data.matchCase( input_def, value );\n                for ( var i in input_def.cases ) {\n                    var case_def = input_def.cases[ i ];\n                    var section_row = self.$( '#' + input_def.id + '-section-' + i );\n                    var nonhidden = false;\n                    for ( var j in case_def.inputs ) {\n                        if ( !case_def.inputs[ j ].hidden ) {\n                            nonhidden = true;\n                            break;\n                        }\n                    }\n                    if ( i == selectedCase && nonhidden ) {\n                        section_row.fadeIn( 'fast' );\n                    } else {\n                        section_row.hide();\n                    }\n                }\n                self.app.trigger( 'change' );\n            });\n\n            // add conditional sub sections\n            for ( var i in input_def.cases ) {\n                var sub_section = new View( this.app, { inputs: input_def.cases[ i ].inputs } );\n                this._append( sub_section.$el.addClass( 'ui-form-section' ), input_def.id + '-section-' + i );\n            }\n\n            // trigger refresh on conditional input field after all input elements have been created\n            field.trigger( 'change' );\n        },\n\n        /** Add a repeat block */\n        _addRepeat: function( input_def ) {\n            var self = this;\n            var block_index = 0;\n\n            // create repeat block element\n            var repeat = new Repeat.View({\n                title           : input_def.title || 'Repeat',\n                min             : input_def.min,\n                max             : input_def.max,\n                onnew           : function() { create( input_def.inputs ); self.app.trigger( 'change' ); }\n            });\n\n            // helper function to create new repeat blocks\n            function create ( inputs ) {\n                var sub_section_id = input_def.id + '-section-' + ( block_index++ );\n                var sub_section = new View( self.app, { inputs: inputs } );\n                repeat.add( { id      : sub_section_id,\n                              $el     : sub_section.$el,\n                              ondel   : function() { repeat.del( sub_section_id ); self.app.trigger( 'change' ); } } );\n            }\n\n            //\n            // add parsed/minimum number of repeat blocks\n            //\n            var n_cache = _.size( input_def.cache );\n            for ( var i = 0; i < Math.max( Math.max( n_cache, input_def.min || 0 ), input_def.default || 0 ); i++ ) {\n                create( i < n_cache ? input_def.cache[ i ] : input_def.inputs );\n            }\n\n            // hide options\n            this.app.model.get( 'sustain_repeats' ) && repeat.hideOptions();\n\n            // create input field wrapper\n            var input_element = new InputElement( this.app, {\n                label   : input_def.title || input_def.name,\n                help    : input_def.help,\n                field   : repeat\n            });\n            this._append( input_element.$el, input_def.id );\n        },\n\n        /** Add a customized section */\n        _addSection: function( input_def ) {\n            var portlet = new Portlet.View({\n                title               : input_def.title || input_def.name,\n                cls                 : 'ui-portlet-section',\n                collapsible         : true,\n                collapsible_button  : true,\n                collapsed           : !input_def.expanded\n            });\n            portlet.append( new View( this.app, { inputs: input_def.inputs } ).$el );\n            portlet.append( $( '<div/>' ).addClass( 'ui-form-info' ).html( input_def.help ) );\n            this.app.on( 'expand', function( input_id ) { ( portlet.$( '#' + input_id ).length > 0 ) && portlet.expand(); } );\n            this._append( portlet.$el, input_def.id );\n        },\n\n        /** Add a single input field element */\n        _addRow: function( input_def ) {\n            var self = this;\n            var id = input_def.id;\n            input_def.onchange = input_def.onchange || function() { self.app.trigger( 'change', id ) };\n            var field = this.parameters.create( input_def );\n            this.app.field_list[ id ] = field;\n            var input_element = new InputElement( this.app, {\n                name                : input_def.name,\n                label               : input_def.hide_label ? '' : input_def.label || input_def.name,\n                value               : input_def.value,\n                text_value          : input_def.text_value,\n                collapsible_value   : input_def.collapsible_value,\n                collapsible_preview : input_def.collapsible_preview,\n                help                : input_def.help,\n                argument            : input_def.argument,\n                disabled            : input_def.disabled,\n                color               : input_def.color,\n                style               : input_def.style,\n                backdrop            : input_def.backdrop,\n                hidden              : input_def.hidden,\n                fixed               : input_def.fixed,\n                field               : field\n            });\n            this.app.element_list[ id ] = input_element;\n            this._append( input_element.$el, input_def.id );\n            return field;\n        },\n\n        /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n        _append: function( $el, id ) {\n            this.$el.append( $el.addClass( 'section-row' ).attr( 'id', id ) );\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-section.js","// dependencies\ndefine([], function() {\n\n// grid model\nreturn Backbone.Model.extend({\n    defaults: {\n        url_base: '',\n        async: false,\n        async_ops: [],\n        categorical_filters: [],\n        filters: {},\n        sort_key: null,\n        show_item_checkboxes: false,\n        advanced_search: false,\n        cur_page: 1,\n        num_pages: 1,\n        operation: undefined,\n        item_ids: undefined\n    },\n\n    /**\n     * Return true if operation can be done asynchronously.\n     */\n    can_async_op: function(op) {\n        return _.indexOf(this.attributes.async_ops, op) !== -1;\n    },\n\n    /**\n     * Add filtering criterion.\n     */\n    add_filter: function(key, value, append) {\n        // Update URL arg with new condition.            \n        if (append) {\n            // Update or append value.\n            var cur_val = this.attributes.filters[key],\n                new_val;\n            if (cur_val === null || cur_val === undefined) {\n                new_val = value;\n            } \n            else if (typeof(cur_val) == 'string') {\n                if (cur_val == 'All') {\n                    new_val = value;\n                } else {\n                    // Replace string with array.\n                    var values = [];\n                    values[0] = cur_val;\n                    values[1] = value;\n                    new_val = values;   \n                }\n            } \n            else {\n                // Current value is an array.\n                new_val = cur_val;\n                new_val.push(value);\n            }\n            this.attributes.filters[key] = new_val;\n        } \n        else {\n            // Replace value.\n            this.attributes.filters[key] = value;\n        }\n    },\n\n    /**\n     * Remove filtering criterion.\n     */\n    remove_filter: function(key, condition) {\n        var cur_val = this.attributes.filters[key];\n        if (cur_val === null || cur_val === undefined) {\n            return false;            \n        }\n\n        if (typeof(cur_val) === 'string') {\n            // overwrite/remove condition.\n            this.attributes.filters[key] = '';\n        } else {\n            // filter contains an array of conditions.\n            var condition_index = _.indexOf(cur_val, condition);\n            if (condition_index !== -1) {\n                cur_val[condition_index] = '';\n            }\n        }\n    },\n\n    /**\n     * Returns URL data for obtaining a new grid.\n     */\n    get_url_data: function() {\n        var url_data = {\n            async: this.attributes.async,\n            sort: this.attributes.sort_key,\n            page: this.attributes.cur_page,\n            show_item_checkboxes: this.attributes.show_item_checkboxes,\n            advanced_search: this.attributes.advanced_search\n        };\n\n        // Add operation, item_ids only if they have values.\n        if (this.attributes.operation) {\n            url_data.operation = this.attributes.operation;\n        }\n        if (this.attributes.item_ids) {\n            url_data.id = this.attributes.item_ids;\n        }\n\n        // Add filter arguments to data, placing \"f-\" in front of all arguments.\n        var self = this;\n        _.each(_.pairs(self.attributes.filters), function(k) {\n            url_data['f-' + k[0]] = k[1];\n        });\n        return url_data;\n    },\n    \n    // Return URL for obtaining a new grid\n    get_url: function (args) {\n        return this.get('url_base') + '?' + $.param(this.get_url_data()) + '&' + $.param(args);\n    }\n    \n});\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-model.js","// dependencies\ndefine(['utils/utils'], function(Utils) {\n\n// grid view templates\nreturn {\n    // template\n    grid: function(options) {\n        var tmpl = '';\n        if (options.embedded) {\n            tmpl = this.grid_header(options) + this.grid_table(options);\n        } else {\n            tmpl = '<div class=\"loading-elt-overlay\"></div>' +\n                    '<table>' +\n                        '<tr>' +\n                            '<td width=\"75%\">' +\n                                this.grid_header(options) +\n                            '</td>' +\n                            '<td></td>' +\n                            '<td></td>' +\n                        '</tr>' +\n                        '<tr>' +\n                            '<td width=\"100%\" id=\"grid-message\" valign=\"top\"></td>' +\n                            '<td></td>' +\n                            '<td></td>' +\n                        '</tr>' +\n                    '</table>' +\n                    this.grid_table(options);\n        }\n       \n        // add info text\n        if (options.info_text) {\n            tmpl += '<br><div class=\"toolParamHelp\" style=\"clear: both;\">' + options.info_text + '</div>';\n        }\n       \n        // return\n        return tmpl;\n    },\n    \n    // template\n    grid_table: function(options) {\n        return  '<form method=\"post\" onsubmit=\"return false;\">' +\n                    '<table id=\"grid-table\" class=\"grid\">' +\n                        '<thead id=\"grid-table-header\"></thead>' +\n                        '<tbody id=\"grid-table-body\"></tbody>' +\n                        '<tfoot id=\"grid-table-footer\"></tfoot>' +\n                    '</table>' +\n                '</form>';\n    },\n    \n    // template\n    grid_header: function(options) {\n        var tmpl =  '<div class=\"grid-header\">';\n        if (!options.embedded) {\n            tmpl +=     '<h2>' + options.title + '</h2>';\n        }\n        if (options.global_actions) {\n            tmpl +=     '<ul class=\"manage-table-actions\">';\n            var show_popup = (options.global_actions.length >= 3);\n            if (show_popup) {\n                tmpl +=     '<li><a class=\"action-button\" id=\"popup-global-actions\" class=\"menubutton\">Actions</a></li>' +\n                            '<div popupmenu=\"popup-global-actions\">';\n            }\n            for (var i in options.global_actions) {\n                var action = options.global_actions[i];\n                tmpl +=         '<li>' +\n                                    '<a class=\"action-button use-target\" target=\"' + action.target + '\" href=\"' + action.url_args + '\" onclick=\"return false;\" >' + action.label + '</a>' +\n                                '</li>';\n            }\n            if (show_popup) {\n                tmpl +=     '</div>';\n            }\n            tmpl +=     '</ul>';\n        }\n        if (options.insert) {\n            tmpl +=     options.insert;\n        }\n       \n        // add grid filters\n        tmpl +=     this.grid_filters(options);\n        tmpl += '</div>'\n        \n        // return template\n        return tmpl;\n    },\n\n    // template\n    header: function(options) {\n        \n        // start\n        var tmpl =      '<tr>';\n        \n        // add checkbox\n        if (options.show_item_checkboxes) {\n            tmpl +=         '<th>';\n            if (options.items.length > 0) {\n                tmpl +=         '<input type=\"checkbox\" id=\"check_all\" name=select_all_checkbox value=\"true\">' +\n                                '<input type=\"hidden\" name=select_all_checkbox value=\"true\">';\n            }\n            tmpl +=         '</th>';\n        }\n        \n        // create header elements\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.visible) {\n                tmpl +=     '<th id=\"' + column.key + '-header\">';\n                if (column.href) {\n                    tmpl +=     '<a href=\"' + column.href + '\" class=\"sort-link\" sort_key=\"' + column.key + '\">' + column.label + '</a>';\n                } else {\n                    tmpl +=     column.label;\n                }\n                tmpl +=         '<span class=\"sort-arrow\">' + column.extra + '</span>' +\n                            '</th>';\n            }\n        }\n        \n        // finalize\n        tmpl +=        '</tr>';\n        \n        // return template\n        return tmpl;\n    },\n    \n    // template\n    body: function(options) {\n        // initialize\n        var tmpl = '';\n        var num_rows_rendered = 0;\n        var items_length = options.items.length;\n        \n        // empty grid?\n        if (items_length == 0) {\n            // No results.\n            tmpl += '<tr><td colspan=\"100\"><em>No Items</em></td></tr>';\n            num_rows_rendered = 1;\n        }\n        \n        // create rows\n        for (var i in options.items) {\n        \n            // encode ids\n            var item = options.items[i];\n            var encoded_id = item.encode_id;\n            var popupmenu_id = 'grid-' + i + '-popup';\n            \n            // Tag current\n            tmpl += '<tr ';\n            if (options.current_item_id == item.id) {\n                tmpl += 'class=\"current\"';\n            }\n            tmpl += '>';\n            \n            // Item selection column\n            if (options.show_item_checkboxes) {\n                tmpl += '<td style=\"width: 1.5em;\">' +\n                            '<input type=\"checkbox\" name=\"id\" value=\"' + encoded_id + '\" id=\"' + encoded_id + '\" class=\"grid-row-select-checkbox\" />' +\n                        '</td>';\n            }\n            \n            // Data columns\n            for (var j in options.columns) {\n                var column = options.columns[j];\n                if (column.visible) {\n                    // Nowrap\n                    var nowrap = '';\n                    if (column.nowrap) {\n                        nowrap = 'style=\"white-space:nowrap;\"';\n                    }\n                    \n                    // get column settings\n                    var column_settings = item.column_config[column.label];\n                    \n                    // load attributes\n                    var link = column_settings.link;\n                    var value = column_settings.value;\n                    var target = column_settings.target;\n                        \n                    // unescape value\n                    if (jQuery.type( value ) === 'string') {\n                        value = value.replace(/\\/\\//g, '/');\n                    }\n                    \n                    // Attach popup menu?\n                    var id = '';\n                    var cls = '';\n                    if (column.attach_popup) {\n                        id = 'grid-' + i + '-popup';\n                        cls = 'menubutton';\n                        if (link != '') {\n                            cls += ' split';\n                        }\n                        cls += ' popup';\n                    }\n                    \n                    // Check for row wrapping\n                    tmpl += '<td ' + nowrap + '>';\n                \n                    // Link\n                    if (link) {\n                        if (options.operations.length != 0) {\n                            tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\" style=\"float: left;\">';\n                        }\n                        tmpl += '<a class=\"menubutton-label use-target\" target=\"' + target + '\" href=\"' + link + '\" onclick=\"return false;\">' + value + '</a>';\n                        if (options.operations.length != 0) {\n                            tmpl += '</div>';\n                        }\n                    } else {\n                        tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\"><label id=\"' + column.label_id_prefix + encoded_id + '\" for=\"' + encoded_id + '\">' + (value || '') + '</label></div>';\n                    }\n                    tmpl += '</td>';\n                }\n            }\n            tmpl += '</tr>';\n            num_rows_rendered++;\n        }\n        return tmpl;\n    },\n\n    // template\n    footer: function(options) {\n    \n        // create template string\n        var tmpl = '';\n        \n        // paging\n        if (options.use_paging && options.num_pages > 1) {\n            // get configuration\n            var num_page_links      = options.num_page_links;\n            var cur_page_num        = options.cur_page_num;\n            var num_pages           = options.num_pages;\n            \n            // First pass on min page.\n            var page_link_range     = num_page_links / 2;\n            var min_page            = cur_page_num - page_link_range\n            var min_offset          = 0;\n            if (min_page <= 0) {\n                // Min page is too low.\n                min_page = 1;\n                min_offset = page_link_range - ( cur_page_num - min_page );\n            }\n            \n            // Set max page.\n            var max_range = page_link_range + min_offset;\n            var max_page = cur_page_num + max_range;\n            var max_offset;\n            if (max_page <= num_pages) {\n                // Max page is fine.\n                max_offset = 0;\n            } else {\n                // Max page is too high.\n                max_page = num_pages;\n                // +1 to account for the +1 in the loop below.\n                max_offset = max_range - ( max_page + 1 - cur_page_num );\n            }\n            \n            // Second and final pass on min page to add any unused\n            // offset from max to min.\n            if (max_offset != 0) {\n                min_page -= max_offset\n                if (min_page < 1) {\n                    min_page = 1\n                }\n            }\n            \n            // template header\n            tmpl += '<tr id=\"page-links-row\">';\n            if (options.show_item_checkboxes) {\n                tmpl += '<td></td>';\n            }\n            tmpl +=     '<td colspan=\"100\">' +\n                            '<span id=\"page-link-container\">' +\n                                'Page:';\n            \n            if (min_page > 1) {\n                tmpl +=         '<span class=\"page-link\" id=\"page-link-1\"><a href=\"javascript:void(0);\" page_num=\"1\" onclick=\"return false;\">1</a></span> ...';\n            }\n            \n            // create page urls\n            for (var page_index = min_page; page_index < max_page + 1; page_index++) {\n                \n                if (page_index == options.cur_page_num) {\n                    tmpl +=     '<span class=\"page-link inactive-link\" id=\"page-link-' + page_index + '\">' + page_index + '</span>';\n                } else {\n                    tmpl +=     '<span class=\"page-link\" id=\"page-link-' + page_index + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + page_index + '\">' + page_index + '</a></span>';\n                }\n            }\n            \n            // show last page\n            if (max_page < num_pages) {\n                    tmpl +=     '...' +\n                                '<span class=\"page-link\" id=\"page-link-' + num_pages + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + num_pages + '\">' + num_pages + '</a></span>';\n            }\n            tmpl +=         '</span>';\n            \n            // Show all link\n            tmpl +=         '<span class=\"page-link\" id=\"show-all-link-span\"> | <a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"all\">Show All</a></span>' +\n                        '</td>' +\n                    '</tr>';\n        }\n        \n        // Grid operations for multiple items.\n        if (options.show_item_checkboxes) {\n            // start template\n            tmpl += '<tr>' +\n                        '<input type=\"hidden\" id=\"operation\" name=\"operation\" value=\"\">' +\n                        '<td></td>' +\n                        '<td colspan=\"100\">' +\n                            'For <span class=\"grid-selected-count\"></span> selected items: ';\n            \n            // configure buttons for operations\n            for (var i in options.operations) {\n                var operation = options.operations[i];\n                if (operation.allow_multiple) {\n                    tmpl += '<input type=\"button\" value=\"' + operation.label + '\" class=\"operation-button action-button\">&nbsp;';\n                }\n            }\n            \n            // finalize template\n            tmpl +=     '</td>' +\n                    '</tr>';\n        }\n    \n        // count global operations\n        var found_global = false;\n        for (i in options.operations) {\n            if (options.operations[i].global_operation) {\n                found_global = true;\n                break;\n            }\n        }\n    \n        // add global operations\n        if (found_global) {\n            tmpl += '<tr>' +\n                        '<td colspan=\"100\">';\n            for (i in options.operations) {\n                var operation = options.operations[i];\n                if (operation.global_operation) {\n                    tmpl += '<a class=\"action-button\" href=\"' + operation.global_operation + '\">' + operation.label + '</a>';\n                }\n            }\n            tmpl +=     '</td>' +\n                    '</tr>';\n        }\n        \n        // add legend\n        if (options.legend) {\n            tmpl += '<tr>' +\n                        '<td colspan=\"100\">' + options.legend + '</td>' +\n                    '</tr>';\n        }\n        \n        // return\n        return tmpl;\n    },\n        \n    // template\n    message: function(options) {\n        var status = options.status == 'success' ? 'done' : options.status;\n        return  '<p>' +\n                    '<div class=\"' + status + 'message transient-message\">' + _.escape( options.message ) + '</div>' +\n                    '<div style=\"clear: both\"></div>' +\n                '</p>';\n    },\n    \n    // template\n    grid_filters: function (options) {\n    \n        // get filters\n        var default_filter_dict = options.default_filter_dict;\n        var filters = options.filters;\n\n        // show advanced search if flag set or if there are filters for advanced search fields\n        var advanced_search_display = 'none';\n        if (options.advanced_search) {\n            advanced_search_display = 'block';\n        }\n        \n        // identify columns with advanced filtering\n        var show_advanced_search_link = false;\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == 'advanced') {\n                var column_key = column.key;\n                var f_key = filters[column_key];\n                var d_key = default_filter_dict[column_key];\n                if (f_key && d_key && f_key != d_key) {\n                    advanced_search_display = 'block';\n                }\n                show_advanced_search_link = true;\n            }\n        }\n        \n        // hide standard search if advanced is shown\n        var standard_search_display = 'block';\n        if (advanced_search_display == 'block') {\n            standard_search_display = 'none';\n        }\n\n        //\n        // standard search\n        //\n        var tmpl =  '<div id=\"standard-search\" style=\"display: ' + standard_search_display + ';\">' +\n                        '<table>' +\n                            '<tr>' +\n                                '<td style=\"padding: 0;\">' +\n                                    '<table>';\n        \n        // add standard filters\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == 'standard') {\n                tmpl +=             this.grid_column_filter(options, column);\n            }\n        }\n        \n        // finalize standard search\n        tmpl +=                     '</table>' +\n                                '</td>' +\n                            '</tr>' +\n                            '<tr>' +\n                                '<td>';\n                \n        // show advanced search link in standard display\n        if (show_advanced_search_link) {\n            tmpl +=                 '<a href=\"\" class=\"advanced-search-toggle\">Advanced Search</a>';\n        }\n        \n        // finalize standard search display\n        tmpl +=                 '</td>' +\n                            '</tr>' +\n                        '</table>' +\n                    '</div>';\n    \n        //\n        // advanced search\n        //\n        tmpl +=     '<div id=\"advanced-search\" style=\"display: ' + advanced_search_display + '; margin-top: 5px; border: 1px solid #ccc;\">' +\n                        '<table>' +\n                            '<tr>' +\n                                '<td style=\"text-align: left\" colspan=\"100\">' +\n                                    '<a href=\"\" class=\"advanced-search-toggle\">Close Advanced Search</a>' +\n                                '</td>' +\n                            '</tr>';\n        \n        // add advanced filters\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == 'advanced') {\n                tmpl +=             this.grid_column_filter(options, column);\n            }\n        }\n        \n        // finalize advanced search template\n        tmpl +=         '</table>' +\n                    '</div>';\n\n        // return template\n        return tmpl;\n    },\n    \n    // template\n    grid_column_filter: function(options, column) {\n        \n        // collect parameters\n        var default_filter_dict = options.default_filter_dict;\n        var filters = options.filters;\n        var column_label = column.label;\n        var column_key = column.key;\n        if (column.filterable == 'advanced') {\n            column_label = column_label.toLowerCase();\n        }\n        \n        // start\n        var tmpl =      '<tr>';\n        \n        if (column.filterable == 'advanced') {\n            tmpl +=         '<td align=\"left\" style=\"padding-left: 10px\">' + column_label + ':</td>';\n        }\n        tmpl +=             '<td style=\"padding-bottom: 1px;\">';\n        if (column.is_text) {\n            tmpl +=             '<form class=\"text-filter-form\" column_key=\"' + column_key + '\" action=\"' + options.url + '\" method=\"get\" >';\n            // Carry forward filtering criteria with hidden inputs.\n            for (i in options.columns) {\n                var temp_column = options.columns[i];\n                var filter_value = filters[temp_column.key];\n                if (filter_value) {\n                    if (filter_value != 'All') {\n                        if (temp_column.is_text) {\n                            filter_value = JSON.stringify( filter_value )\n                        }\n                        tmpl +=     '<input type=\"hidden\" id=\"' + temp_column.key + '\" name=\"f-' + temp_column.key + '\" value=\"' + filter_value + '\"/>';\n                    }\n                }\n            }\n            // Print current filtering criteria and links to delete.\n            tmpl +=                 '<span id=\"' + column_key + '-filtering-criteria\">';\n            \n            // add filters\n            var column_filter = filters[column_key];\n            if (column_filter) {\n                // identify type\n                var type = jQuery.type(column_filter);\n                \n                // single filter value\n                if (type == 'string') {\n                    if (column_filter != 'All') {\n                        // append template\n                        tmpl +=         this.filter_element(column_key, column_filter);\n                    }\n                }\n                \n                // multiple filter values\n                if (type == 'array') {\n                    for (var i in column_filter ) {\n                        // get filter\n                        var filter = column_filter[i];\n                        \n                        // copy filters and remove entry\n                        var params = column_filter;\n                        params = params.slice(i);\n\n                        // append template\n                        tmpl +=         this.filter_element(column_key, filter);\n                    }\n                }\n            }\n            \n            // close span\n            tmpl +=                 '</span>';\n            \n            // Set value, size of search input field. Minimum size is 20 characters.\n            var value = '';\n            if (column.filterable == 'standard') {\n                value = column.label.toLowerCase();\n                var size = value.length;\n                if (size < 20) {\n                    size = 20;\n                }\n                // +4 to account for space after placeholder\n                size = size + 4;\n            }\n            \n            // print input field for column\n            tmpl +=                 '<span class=\"search-box\">' +\n                                        '<input class=\"search-box-input\" id=\"input-' + column_key + '-filter\" name=\"f-' + column_key + '\" type=\"text\" placeholder=\"' + value + '\" size=\"' + size + '\"/>' +\n                                        '<button type=\"submit\" style=\"background: transparent; border: none; padding: 4px; margin: 0px;\">' +\n                                            '<i class=\"fa fa-search\"></i>' +\n                                        '</button>' +\n                                    '</span>' +\n                                '</form>';\n        } else {\n            // filter criteria\n            tmpl +=             '<span id=\"' + column_key + '-filtering-criteria\">';\n            \n            // add category filters\n            var seperator = false;\n            for (var cf_label in options.categorical_filters[column_key]) {\n                // get category filter\n                var cf = options.categorical_filters[column_key][cf_label];\n                \n                // each filter will have only a single argument, so get that single argument\n                var cf_key = '';\n                var cf_arg = '';\n                for (var key in cf) {\n                    cf_key = key;\n                    cf_arg = cf[key];\n                }\n                \n                // add seperator\n                if (seperator) {\n                    tmpl += ' | ';\n                }\n                seperator = true;\n                \n                // add category\n                var filter = filters[column_key];\n                if (filter && cf[column_key] && filter == cf_arg) {\n                    tmpl +=         '<span class=\"categorical-filter ' + column_key + '-filter current-filter\">' + cf_label + '</span>';\n                } else {\n                    tmpl +=         '<span class=\"categorical-filter ' + column_key + '-filter\">' +\n                                        '<a href=\"javascript:void(0);\" filter_key=\"' + cf_key + '\" filter_val=\"' + cf_arg + '\">' + cf_label + '</a>' +\n                                    '</span>';\n                }\n            }\n            tmpl +=             '</span>';\n        }\n        tmpl +=             '</td>' +\n                        '</tr>';\n        \n        // return template\n        return tmpl;\n    },\n    \n    // template for filter items\n    filter_element: function(filter_key, filter_value) {\n        filter_value = Utils.sanitize(filter_value);\n        return  '<span class=\"text-filter-val\">' + filter_value +\n                    '<a href=\"javascript:void(0);\" filter_key=\"' + filter_key + '\" filter_val=\"' + filter_value + '\">' +\n                        '<i class=\"fa fa-times\" style=\"padding-left: 5px; padding-bottom: 6px;\"/>' +\n                    '</a>' +\n                '</span>';\n\n    }\n};\n\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-template.js","/** Renders the color picker used e.g. in the tool form **/\ndefine(['utils/utils'], function( Utils ) {\n    return Backbone.View.extend({\n        colors: {\n            standard: ['c00000','ff0000','ffc000','ffff00','92d050','00b050','00b0f0','0070c0','002060','7030a0'],\n            base    : ['ffffff','000000','eeece1','1f497d','4f81bd','c0504d','9bbb59','8064a2','4bacc6','f79646'],\n            theme   :[['f2f2f2','7f7f7f','ddd9c3','c6d9f0','dbe5f1','f2dcdb','ebf1dd','e5e0ec','dbeef3','fdeada'],\n                      ['d8d8d8','595959','c4bd97','8db3e2','b8cce4','e5b9b7','d7e3bc','ccc1d9','b7dde8','fbd5b5'],\n                      ['bfbfbf','3f3f3f','938953','548dd4','95b3d7','d99694','c3d69b','b2a2c7','92cddc','fac08f'],\n                      ['a5a5a5','262626','494429','17365d','366092','953734','76923c','5f497a','31859b','e36c09'],\n                      ['7f7f7e','0c0c0c','1d1b10','0f243e','244061','632423','4f6128','3f3151','205867','974806']]\n        },\n\n        initialize : function( options ) {\n            this.options = Utils.merge( options, {} );\n            this.setElement( this._template() );\n            this.$panel = this.$( '.ui-color-picker-panel' );\n            this.$view = this.$( '.ui-color-picker-view' );\n            this.$value = this.$( '.ui-color-picker-value' );\n            this.$header = this.$( '.ui-color-picker-header' );\n            this._build();\n            this.visible = false;\n            this.value( this.options.value );\n            this.$boxes = this.$( '.ui-color-picker-box' );\n            var self = this;\n            this.$boxes.on( 'click', function() {\n                self.value( $( this ).css( 'background-color' ) );\n                self.$header.trigger( 'click' );\n            } );\n            this.$header.on( 'click', function() {\n                self.visible = !self.visible;\n                if ( self.visible ) {\n                    self.$view.fadeIn( 'fast' );\n                } else {\n                    self.$view.fadeOut( 'fast' );\n                }\n            } );\n        },\n\n        /** Get/set value */\n        value : function ( new_val ) {\n            if ( new_val !== undefined && new_val !== null ) {\n                this.$value.css( 'background-color', new_val );\n                this.$( '.ui-color-picker-box' ).empty();\n                this.$( this._getValue() ).html( this._templateCheck() );\n                this.options.onchange && this.options.onchange( new_val );\n            }\n            return this._getValue();\n        },\n\n        /** Get value from dom */\n        _getValue: function() {\n            var rgb = this.$value.css( 'background-color' );\n            rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n            if ( rgb ) {\n                function hex( x ) {\n                    return ( '0' + parseInt( x ).toString( 16 ) ).slice( -2 );\n                }\n                return '#' + hex( rgb[ 1] ) + hex( rgb[ 2 ] ) + hex( rgb[ 3 ] );\n            } else {\n                return null;\n            }\n        },\n\n        /** Build color panel */\n        _build: function() {\n            this._content( { colors : this.colors.base } );\n            for ( var i in this.colors.theme ) {\n                var line_def = {};\n                if ( i == 0 ) {\n                    line_def[ 'bottom' ] = true;\n                } else if ( i != this.colors.theme.length - 1 ) {\n                    line_def[ 'top' ]     = true;\n                    line_def[ 'bottom' ]  = true;\n                } else {\n                    line_def[ 'top' ]     = true;\n                }\n                line_def[ 'colors' ] = this.colors.theme[ i ];\n                this._content( line_def );\n            }\n            this._content( { colors : this.colors.standard } );\n        },\n\n        /** Create content */\n        _content: function( options ) {\n            var colors   = options.colors;\n            var $content = $( this._templateContent() );\n            var $line = $content.find( '.line' );\n            this.$panel.append( $content );\n            for ( var i in colors ) {\n                var $box = $( this._templateBox( colors[ i ] ) );\n                if ( options.top ) {\n                    $box.css( 'border-top', 'none' );\n                    $box.css( 'border-top-left-radius', '0px' );\n                    $box.css( 'border-top-right-radius', '0px' );\n                }\n                if ( options.bottom ) {\n                    $box.css( 'border-bottom', 'none' );\n                    $box.css( 'border-bottom-left-radius', '0px' );\n                    $box.css( 'border-bottom-right-radius', '0px' );\n                }\n                $line.append( $box );\n            }\n            return $content;\n        },\n\n        /** Check icon */\n        _templateCheck: function() {\n            return  '<div class=\"ui-color-picker-check fa fa-check\"/>';\n        },\n\n        /** Content template */\n        _templateContent: function() {\n            return  '<div class=\"ui-color-picker-content\">' +\n                        '<div class=\"line\"/>' +\n                    '</div>';\n        },\n\n        /** Box template */\n        _templateBox: function( color ) {\n            return '<div id=\"' + color + '\" class=\"ui-color-picker-box\" style=\"background-color: #' + color + ';\"/>';\n        },\n\n        /** Main template */\n        _template: function() {\n            return  '<div class=\"ui-color-picker\">' +\n                        '<div class=\"ui-color-picker-header\">' +\n                            '<div class=\"ui-color-picker-value\"/>' +\n                            '<div class=\"ui-color-picker-label\">Select a color</div>' +\n                        '</div>' +\n                        '<div class=\"ui-color-picker-view ui-input\">' +\n                            '<div class=\"ui-color-picker-panel\"/>' +\n                        '</div>'\n                    '</div>';\n        }\n    });\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-color-picker.js","/** This class creates/wraps a drill down element. */\ndefine([ 'utils/utils', 'mvc/ui/ui-options' ], function( Utils, Options ) {\n\nvar View = Options.BaseIcons.extend({\n    initialize: function( options ) {\n        options.type     = options.display || 'checkbox';\n        options.multiple = ( options.type == 'checkbox' );\n        Options.BaseIcons.prototype.initialize.call( this, options );\n    },\n\n    /** Set states for selected values */\n    _setValue: function ( new_value ) {\n        Options.BaseIcons.prototype._setValue.call( this, new_value );\n        if ( new_value !== undefined && new_value !== null && this.header_index ) {\n            var self = this;\n            var values = $.isArray( new_value ) ? new_value : [ new_value ];\n            _.each( values, function( v ) {\n                var list = self.header_index[ v ];\n                _.each( list, function( element ) {\n                    self._setState( element, true );\n                });\n            });\n        }\n    },\n\n    /** Expand/collapse a sub group */\n    _setState: function ( header_id, is_expanded ) {\n        var $button = this.$( '.button-' + header_id );\n        var $subgroup = this.$( '.subgroup-' + header_id );\n        $button.data( 'is_expanded', is_expanded );\n        if ( is_expanded ) {\n            $subgroup.show();\n            $button.removeClass( 'fa-plus-square' ).addClass( 'fa-minus-square' );\n        } else {\n            $subgroup.hide();\n            $button.removeClass( 'fa-minus-square' ).addClass( 'fa-plus-square' );\n        }\n    },\n\n    /** Template to create options tree */\n    _templateOptions: function() {\n        var self = this;\n        this.header_index = {};\n\n        // attach event handler\n        function attach( $el, header_id ) {\n            var $button = $el.find( '.button-' + header_id );\n            $button.on( 'click', function() {\n                self._setState( header_id, !$button.data( 'is_expanded' ) );\n            });\n        }\n\n        // recursive function which iterates through options\n        function iterate ( $tmpl, options, header ) {\n            header = header || [];\n            for (var i in options ) {\n                var level = options[ i ];\n                var has_options = level.options && level.options.length > 0;\n                var new_header = header.slice( 0 );\n                self.header_index[ level.value ] = new_header.slice( 0 );\n                var $group = $( '<div/>' );\n                if ( has_options ) {\n                    var header_id = Utils.uid();\n                    var $button = $( '<span/>' ).addClass( 'button-' + header_id ).addClass( 'ui-drilldown-button fa fa-plus-square' );\n                    var $subgroup = $( '<div/>' ).addClass( 'subgroup-' + header_id ).addClass( 'ui-drilldown-subgroup' );\n                    $group.append( $( '<div/>' )\n                                        .append( $button )\n                                        .append( self._templateOption( { label: level.name, value: level.value } ) ) );\n                    new_header.push( header_id );\n                    iterate ( $subgroup, level.options, new_header );\n                    $group.append( $subgroup );\n                    attach( $group, header_id );\n                } else {\n                    $group.append( self._templateOption( { label: level.name, value: level.value } ) );\n                }\n                $tmpl.append( $group );\n            }\n        }\n\n        // iterate through options and create dom\n        var $tmpl = $( '<div/>' );\n        iterate( $tmpl, this.model.get( 'data' ) );\n        return $tmpl;\n    },\n\n    /** Template for drill down view */\n    _template: function() {\n        return $( '<div/>' ).addClass( 'ui-options-list drilldown-container' ).attr( 'id', this.model.id );\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-drilldown.js","define([ 'utils/utils', 'mvc/ui/ui-misc', 'mvc/ui/ui-select-default' ], function( Utils, Ui, Select ) {\n\n/** Batch mode variations */\nvar Batch = { DISABLED: 'disabled', ENABLED: 'enabled', LINKED: 'linked' };\n\n/** List of available content selectors options */\nvar Configurations = {\n    data: [\n        { src: 'hda',  icon: 'fa-file-o',   tooltip: 'Single dataset',       multiple: false,   batch: Batch.DISABLED   },\n        { src: 'hda',  icon: 'fa-files-o',  tooltip: 'Multiple datasets',    multiple: true,    batch: Batch.LINKED     },\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.LINKED     } ],\n    data_multiple: [\n        { src: 'hda',  icon: 'fa-files-o',  tooltip: 'Multiple datasets',    multiple: true,    batch: Batch.DISABLED   },\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collections',  multiple: true,    batch: Batch.DISABLED   } ],\n    data_collection: [\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.DISABLED   } ],\n    workflow_data: [\n        { src: 'hda',  icon: 'fa-file-o',   tooltip: 'Single dataset',       multiple: false,   batch: Batch.DISABLED   } ],\n    workflow_data_multiple: [\n        { src: 'hda',  icon: 'fa-files-o',  tooltip: 'Multiple datasets',    multiple: true,    batch: Batch.DISABLED   } ],\n    workflow_data_collection: [\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.DISABLED   } ],\n    module_data: [\n        { src: 'hda',  icon: 'fa-file-o',   tooltip: 'Single dataset',       multiple: false,   batch: Batch.DISABLED   },\n        { src: 'hda',  icon: 'fa-files-o',  tooltip: 'Multiple datasets',    multiple: true,    batch: Batch.ENABLED    } ],\n    module_data_collection: [\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.DISABLED   },\n        { src: 'hdca', icon: 'fa-folder',   tooltip: 'Multiple collections', multiple: true,    batch: Batch.ENABLED    } ]\n};\n\n/** View for hda and hdca content selector ui elements */\nvar View = Backbone.View.extend({\n    initialize : function( options ) {\n        var self = this;\n        this.model = options && options.model || new Backbone.Model({\n            src_labels  : { 'hda' : 'dataset', 'hdca': 'dataset collection' },\n            pagelimit   : 100,\n            statustimer : 1000\n        }).set( options );\n        this.setElement( $( '<div/>' ).addClass( 'ui-select-content' ) );\n        this.button_product = new Ui.RadioButton.View( {\n            value       : 'false',\n            data        : [ { icon: 'fa fa-chain', value: 'false',\n                              tooltip: 'Linked inputs will be run in matched order with other datasets e.g. use this for matching forward and reverse reads.' },\n                            { icon: 'fa fa-chain-broken',  value: 'true',\n                              tooltip: 'Unlinked dataset inputs will be run against *all* other inputs.' } ] } );\n        var $batch_div = $( '<div/>' ).addClass( 'ui-form-info' )\n                            .append( $( '<i/>' ).addClass( 'fa fa-sitemap' ) )\n                            .append( $( '<span/>' ).html( 'This is a batch mode input field. Separate jobs will be triggered for each dataset selection.' ) );\n        this.$batch = {\n            linked  : $batch_div.clone(),\n            enabled : $batch_div.clone().append( $( '<div/>' )\n                                                    .append( $( '<div/>' ).addClass( 'ui-form-title' ).html( 'Batch options:' ) )\n                                                    .append( this.button_product.$el ) )\n                                                    .append( $( '<div/>' ).css( 'clear', 'both' ) )\n        };\n\n        // add drag-drop event handlers\n        this.$el.on( 'dragenter', function( e ) { this.lastenter = e.target; self.$el.addClass( 'ui-dragover' ); } )\n                .on( 'dragover',  function( e ) { e.preventDefault(); } )\n                .on( 'dragleave', function( e ) { this.lastenter === e.target && self.$el.removeClass( 'ui-dragover' ); } )\n                .on( 'drop',      function( e ) { self._handleDrop( e ); } );\n\n        // track current history elements\n        this.history = {};\n\n        // add listeners\n        this.listenTo( this.model, 'change:data', this._changeData, this );\n        this.listenTo( this.model, 'change:wait', this._changeWait, this );\n        this.listenTo( this.model, 'change:current', this._changeCurrent, this );\n        this.listenTo( this.model, 'change:value', this._changeValue, this );\n        this.listenTo( this.model, 'change:type change:optional change:multiple change:extensions', this._changeType, this );\n        this.render();\n\n        // add change event\n        this.on( 'change', function() { options.onchange && options.onchange( self.value() ) } );\n    },\n\n    render: function() {\n        this._changeType();\n        this._changeValue();\n        this._changeWait();\n    },\n\n    /** Indicate that select fields are being updated */\n    wait: function() {\n        this.model.set( 'wait', true );\n    },\n\n    /** Indicate that the options update has been completed */\n    unwait: function() {\n        this.model.set( 'wait', false );\n    },\n\n    /** Update data representing selectable options */\n    update: function( options ) {\n        this.model.set( 'data', options );\n    },\n\n    /** Return the currently selected dataset values */\n    value: function ( new_value ) {\n        new_value !== undefined && this.model.set( 'value', new_value );\n        var current = this.model.get( 'current' );\n        if ( this.config[ current ] ) {\n            var id_list = this.fields[ current ].value();\n            if (id_list !== null) {\n                id_list = $.isArray( id_list ) ? id_list : [ id_list ];\n                if ( id_list.length > 0 ) {\n                    var result = this._batch( { values: [] } );\n                    for ( var i in id_list ) {\n                        var details = this.history[ id_list[ i ] + '_' + this.config[ current ].src ];\n                        if ( details ) {\n                            result.values.push( details );\n                        } else {\n                            Galaxy.emit.debug( 'ui-select-content::value()', 'Requested details not found for \\'' + id_list[ i ] + '\\'.'  );\n                            return null;\n                        }\n                    }\n                    result.values.sort( function( a, b ) { return a.hid - b.hid } );\n                    return result;\n                }\n            }\n        } else {\n            Galaxy.emit.debug( 'ui-select-content::value()', 'Invalid value/source \\'' + new_value + '\\'.'  );\n        }\n        return null;\n    },\n\n    /** Change of current select field */\n    _changeCurrent: function() {\n        var self = this;\n        _.each( this.fields, function( field, i ) {\n            if ( self.model.get( 'current' ) == i ) {\n                field.$el.show();\n                _.each( self.$batch, function( $batchfield, batchmode ) {\n                    $batchfield[ self.config[ i ].batch == batchmode ? 'show' : 'hide' ]();\n                });\n                self.button_type.value( i );\n            } else {\n                field.$el.hide();\n            }\n        });\n    },\n\n    /** Change of type */\n    _changeType: function() {\n        var self = this;\n\n        // identify selector type identifier i.e. [ flavor ]_[ type ]_[ multiple ]\n        var config_id = ( this.model.get( 'flavor' ) ? this.model.get( 'flavor' ) + '_' : '' ) +\n                        String( this.model.get( 'type' ) ) + ( this.model.get( 'multiple' ) ? '_multiple' : '' );\n        if ( Configurations[ config_id ] ) {\n            this.config = Configurations[ config_id ];\n        } else {\n            this.config = Configurations[ 'data' ];\n            Galaxy.emit.debug( 'ui-select-content::_changeType()', 'Invalid configuration/type id \\'' + config_id + '\\'.'  );\n        }\n\n        // prepare extension component of error message\n        var data = self.model.get( 'data' );\n        var extensions = Utils.textify( this.model.get( 'extensions' ) );\n        var src_labels = this.model.get( 'src_labels' );\n\n        // build views\n        this.fields = [];\n        this.button_data = [];\n        _.each( this.config, function( c, i ) {\n            self.button_data.push({\n                value   : i,\n                icon    : c.icon,\n                tooltip : c.tooltip\n            });\n            self.fields.push(\n                new Select.View({\n                    optional    : self.model.get( 'optional' ),\n                    multiple    : c.multiple,\n                    searchable  : !c.multiple || ( data && data[ c.src ] && data[ c.src ].length > self.model.get( 'pagelimit' ) ),\n                    individual  : true,\n                    error_text  : 'No ' + ( extensions ? extensions + ' ' : '' ) + ( src_labels[ c.src ] || 'content' ) + ' available.',\n                    onchange    : function() {\n                        self.trigger( 'change' );\n                    }\n                })\n            );\n        });\n        this.button_type = new Ui.RadioButton.View({\n            value   : this.model.get( 'current' ),\n            data    : this.button_data,\n            onchange: function( value ) {\n                self.model.set( 'current', value );\n                self.trigger( 'change' );\n            }\n        });\n\n        // append views\n        this.$el.empty();\n        var button_width = 0;\n        if ( this.fields.length > 1 ) {\n            this.$el.append( this.button_type.$el );\n            button_width = Math.max( 0, this.fields.length * 36 ) + 'px';\n        }\n        _.each( this.fields, function( field ) {\n            self.$el.append( field.$el.css( { 'margin-left': button_width } ) );\n        });\n        _.each( this.$batch, function( $batchfield, batchmode ) {\n            self.$el.append( $batchfield.css( { 'margin-left': button_width } ) );\n        });\n        this.model.set( 'current', 0 );\n        this._changeCurrent();\n        this._changeData();\n    },\n\n    /** Change of wait flag */\n    _changeWait: function() {\n        var self = this;\n        _.each( this.fields, function( field ) { field[ self.model.get( 'wait' ) ? 'wait' : 'unwait' ]() } );\n    },\n\n    /** Change of available options */\n    _changeData: function() {\n        var options = this.model.get( 'data' );\n        var self = this;\n        var select_options = {};\n        _.each( options, function( items, src ) {\n            select_options[ src ] = [];\n            _.each( items, function( item ) {\n                select_options[ src ].push({\n                    hid  : item.hid,\n                    keep : item.keep,\n                    label: item.hid + ': ' + item.name,\n                    value: item.id,\n                    tags : item.tags\n                });\n                self.history[ item.id + '_' + src ] = item;\n            });\n        });\n        _.each( this.config, function( c, i ) {\n            select_options[ c.src ] && self.fields[ i ].add( select_options[ c.src ], function( a, b ) { return b.hid - a.hid } );\n        });\n    },\n\n    /** Change of incoming value */\n    _changeValue: function () {\n        var new_value = this.model.get( 'value' );\n        if ( new_value && new_value.values && new_value.values.length > 0 ) {\n            // create list with content ids\n            var list = [];\n            _.each( new_value.values, function( value ) {\n                list.push( value.id );\n            });\n            // sniff first suitable field type from config list\n            var src = new_value.values[ 0 ].src;\n            var multiple = new_value.values.length > 1;\n            for( var i = 0; i < this.config.length; i++ ) {\n                var field = this.fields[ i ];\n                var c = this.config[ i ];\n                if ( c.src == src && [ multiple, true ].indexOf( c.multiple ) !== -1 ) {\n                    this.model.set( 'current', i );\n                    field.value( list );\n                    break;\n                }\n            }\n        } else {\n            _.each( this.fields, function( field ) {\n                field.value( null );\n            });\n        }\n    },\n\n    /** Handles drop events e.g. from history panel */\n    _handleDrop: function( ev ) {\n        try {\n            var data      = this.model.get( 'data' );\n            var current   = this.model.get( 'current' );\n            var config    = this.config[ current ];\n            var field     = this.fields[ current ];\n            var drop_data = JSON.parse( ev.originalEvent.dataTransfer.getData( 'text' ) )[ 0 ];\n            var new_id    = drop_data.id;\n            var new_src   = drop_data.history_content_type == 'dataset' ? 'hda' : 'hdca';\n            var new_value = { id: new_id, src: new_src };\n            if ( data && _.findWhere( data[ new_src ], new_value ) ) {\n                if ( config.src == new_src ) {\n                    var current_value = field.value();\n                    if ( current_value && config.multiple ) {\n                        if ( current_value.indexOf( new_id ) == -1 ) {\n                            current_value.push( new_id );\n                        }\n                    } else {\n                        current_value = new_id;\n                    }\n                    field.value( current_value );\n                } else {\n                    this.model.set( 'value', { values: [ new_value ] } );\n                    this.model.trigger( 'change:value' );\n                }\n                this.trigger( 'change' );\n                this._handleDropStatus( 'success' );\n            } else {\n                this._handleDropStatus( 'danger' );\n            }\n        } catch( e ) {\n            this._handleDropStatus( 'danger' );\n        }\n    },\n\n    /** Highlight drag result */\n    _handleDropStatus: function( status ) {\n        var self = this;\n        this.$el.removeClass( 'ui-dragover' ).addClass( 'ui-dragover-' + status );\n        setTimeout( function() { self.$el.removeClass( 'ui-dragover-' + status ) }, this.model.get( 'statustimer' ) );\n    },\n\n    /** Assists in identifying the batch mode */\n    _batch: function( result ) {\n        result[ 'batch' ] = false;\n        var current = this.model.get( 'current' );\n        var config = this.config[ current ];\n        if ( config.src == 'hdca' && !config.multiple ) {\n            var hdca = this.history[ this.fields[ current ].value() + '_hdca' ];\n            if ( hdca && hdca.map_over_type ) {\n                result[ 'batch' ] = true;\n            }\n        }\n        if ( config.batch == Batch.LINKED || config.batch == Batch.ENABLED ) {\n            result[ 'batch' ] = true;\n            if ( config.batch == Batch.ENABLED && this.button_product.value() === 'true' ) {\n                result[ 'product' ] = true;\n            }\n        }\n        return result;\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-content.js","// dependencies\ndefine(['utils/utils', 'mvc/ui/ui-list'],\n        function(Utils, List) {\n\n/**\n * FTP file selector\n */\nvar View = Backbone.View.extend({\n    // initialize\n    initialize : function(options) {\n        // link this\n        var self = this;\n\n        // create ui-list view to keep track of selected ftp files\n        this.ftpfile_list = new List.View({\n            name        : 'file',\n            optional    : options.optional,\n            multiple    : options.multiple,\n            onchange    : function() {\n                options.onchange && options.onchange(self.value());\n            }\n        });\n\n        // create elements\n        this.setElement(this.ftpfile_list.$el);\n\n        // initial fetch of ftps\n        Utils.get({\n            url     : Galaxy.root + 'api/remote_files',\n            success : function(response) {\n                var data = [];\n                for (var i in response) {\n                    data.push({\n                        value   : response[i]['path'],\n                        label   : response[i]['path']\n                    });\n                }\n                self.ftpfile_list.update(data);\n            }\n        });\n    },\n\n    /** Return/Set currently selected ftp datasets */\n    value: function(val) {\n        return this.ftpfile_list.value(val);\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-ftp.js","// dependencies\ndefine(['utils/utils', 'mvc/ui/ui-misc', 'mvc/ui/ui-table', 'mvc/ui/ui-list'],\n        function(Utils, Ui, Table, List) {\n\n// collection of libraries\nvar Libraries = Backbone.Collection.extend({\n    url: Galaxy.root + 'api/libraries?deleted=false'\n});\n\n// collection of dataset\nvar LibraryDatasets = Backbone.Collection.extend({\n    initialize: function() {\n        var self = this;\n        this.config = new Backbone.Model({ library_id: null });\n        this.config.on('change', function() {\n            self.fetch({ reset: true });\n        });\n    },\n    url: function() {\n        return Galaxy.root + 'api/libraries/' + this.config.get('library_id') + '/contents';\n    }\n});\n\n// hda/hdca content selector ui element\nvar View = Backbone.View.extend({\n    // initialize\n    initialize : function(options) {\n        // link this\n        var self = this;\n\n        // collections\n        this.libraries  = new Libraries();\n        this.datasets   = new LibraryDatasets();\n\n        // link app and options\n        this.options = options;\n\n        // select field for the library\n        // TODO: Remove this once the library API supports searching for library datasets\n        this.library_select = new Ui.Select.View({\n            onchange    : function(value) {\n                self.datasets.config.set('library_id', value);\n            }\n        });\n\n        // create ui-list view to keep track of selected data libraries\n        this.dataset_list = new List.View({\n            name        : 'dataset',\n            optional    : options.optional,\n            multiple    : options.multiple,\n            onchange    : function() {\n                self.trigger('change');\n            }\n        });\n\n        // add reset handler for fetched libraries\n        this.libraries.on('reset', function() {\n            var data = [];\n            self.libraries.each(function(model) {\n                data.push({\n                    value   : model.id,\n                    label   : model.get('name')\n                });\n            });\n            self.library_select.update(data);\n        });\n\n        // add reset handler for fetched library datasets\n        this.datasets.on('reset', function() {\n            var data = [];\n            var library_current = self.library_select.text();\n            if (library_current !== null) {\n                self.datasets.each(function(model) {\n                    if (model.get('type') === 'file') {\n                        data.push({\n                            value   : model.id,\n                            label   : model.get('name')\n                        });\n                    }\n                });\n            }\n            self.dataset_list.update(data);\n        });\n\n        // add change event. fires on trigger\n        this.on('change', function() {\n            options.onchange && options.onchange(self.value());\n        });\n\n        // create elements\n        this.setElement(this._template());\n        this.$('.library-select').append(this.library_select.$el);\n        this.$el.append(this.dataset_list.$el);\n\n        // initial fetch of libraries\n        this.libraries.fetch({\n            reset: true,\n            success: function() {\n                self.library_select.trigger('change');\n                if (self.options.value !== undefined) {\n                    self.value(self.options.value);\n                }\n            }\n        });\n    },\n\n    /** Return/Set currently selected library datasets */\n    value: function(val) {\n        return this.dataset_list.value(val);\n    },\n\n    /** Template */\n    _template: function() {\n        return  '<div class=\"ui-select-library\">' +\n                    '<div class=\"library ui-margin-bottom\">' +\n                        '<span class=\"library-title\">Select Library</span>' +\n                        '<span class=\"library-select\"/>' +\n                    '</div>' +\n                '</div>';\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-library.js","define([ 'utils/utils' ], function( Utils ) {\n    var View = Backbone.View.extend({\n        initialize : function( options ) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model({\n                id       : Utils.uid(),\n                min      : null,\n                max      : null,\n                step     : null,\n                precise  : false,\n                split    : 10000,\n                value    : null,\n                onchange : function(){}\n            }).set( options );\n\n            // create new element\n            this.setElement( this._template() );\n            this.$el.attr( 'id', this.model.id );\n            this.$text   = this.$( '.ui-form-slider-text' );\n            this.$slider = this.$( '.ui-form-slider-element' );\n\n            // add text field event\n            var pressed = [];\n            this.$text.on( 'change', function () {\n                self.value( $( this ).val() );\n            }).on( 'keyup', function( e ) {\n                pressed[e.which] = false;\n            }).on( 'keydown', function ( e ) {\n                var v = e.which;\n                pressed[ v ] = true;\n                if ( self.model.get( 'is_workflow' ) && pressed[ 16 ] && v == 52 ) {\n                    self.value( '$' );\n                    event.preventDefault();\n                } else if (!( v == 8 || v == 9 || v == 13 || v == 37 || v == 39 || ( v >= 48 && v <= 57 && !pressed[ 16 ] ) || ( v >= 96 && v <= 105 )\n                    || ( ( v == 190 || v == 110 ) && $( this ).val().indexOf( '.' ) == -1 && self.model.get( 'precise' ) )\n                    || ( ( v == 189 || v == 109 ) && $( this ).val().indexOf( '-' ) == -1 )\n                    || self._isParameter( $( this ).val() )\n                    || pressed[ 91 ] || pressed[ 17 ] ) ) {\n                    event.preventDefault();\n                }\n            });\n\n            // build slider, cannot be rebuild in render\n            var opts = this.model.attributes;\n            this.has_slider = opts.max !== null && opts.min !== null && opts.max > opts.min;\n            var step = opts.step;\n            if ( !step ) {\n                if ( opts.precise && this.has_slider ) {\n                    step = ( opts.max - opts.min ) / opts.split;\n                } else {\n                    step = 1.0;\n                }\n            }\n            if ( this.has_slider ) {\n                this.$text.addClass( 'ui-form-slider-left' );\n                this.$slider.slider( { min: opts.min, max: opts.max, step: step } )\n                            .on( 'slide', function ( event, ui ) { self.value( ui.value ) } );\n            } else {\n                this.$slider.hide();\n            }\n\n            // add listeners\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render: function() {\n            var value = this.model.get( 'value' );\n            this.has_slider && this.$slider.slider( 'value', value );\n            value !== this.$text.val() && this.$text.val( value );\n        },\n\n        /** Set and return the current value */\n        value : function ( new_val ) {\n            var options = this.model.attributes;\n            if ( new_val !== undefined ) {\n                if ( new_val !== null && new_val !== '' && !this._isParameter( new_val ) ) {\n                    isNaN( new_val ) && ( new_val = 0 );\n                    !options.precise && ( new_val = Math.round( new_val ) );\n                    options.max !== null && ( new_val = Math.min( new_val, options.max ) );\n                    options.min !== null && ( new_val = Math.max( new_val, options.min ) );\n                }\n                this.model.set( 'value', new_val );\n                this.model.trigger( 'change' );\n                options.onchange( new_val );\n            }\n            return this.model.get( 'value' );\n        },\n\n        /** Return true if the field contains a workflow parameter i.e. $('name') */\n        _isParameter: function( value ) {\n            return this.model.get( 'is_workflow' ) && String( value ).substring( 0, 1 ) === '$';\n        },\n\n        /** Slider template */\n        _template: function() {\n            return  '<div class=\"ui-form-slider\">' +\n                        '<input class=\"ui-form-slider-text\" type=\"text\"/>' +\n                        '<div class=\"ui-form-slider-element\"/>' +\n                    '</div>';\n        }\n    });\n\n    return {\n        View : View\n    };\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-slider.js","var jQuery = require( 'jquery' ),\n    $ = jQuery,\n    QUERY_STRING = require( 'utils/query-string-parsing' ),\n    Ui = require( 'mvc/ui/ui-misc' );\n\nvar Router = Backbone.Router.extend({\n    // TODO: not many client routes at this point - fill and remove from server.\n    // since we're at root here, this may be the last to be routed entirely on the client.\n    initialize : function( page, options ){\n        this.page = page;\n        this.options = options;\n    },\n\n    /** helper to push a new navigation state */\n    push: function( url, data ) {\n        data = data || {};\n        data.__identifer = Math.random().toString( 36 ).substr( 2 );\n        if ( !$.isEmptyObject( data ) ) {\n            url += url.indexOf( '?' ) == -1 ? '?' : '&';\n            url += $.param( data , true );\n        }\n        Galaxy.params = {};\n        this.navigate( url, { 'trigger': true } );\n    },\n\n    /** override to parse query string into obj and send to each route */\n    execute: function( callback, args, name ){\n        Galaxy.debug( 'router execute:', callback, args, name );\n        var queryObj = QUERY_STRING.parse( args.pop() );\n        args.push( queryObj );\n        if( callback ){\n            if ( this.authenticate( args, name ) ) {\n                callback.apply( this, args );\n            } else {\n                this.access_denied();\n            }\n        }\n    },\n\n    authenticate: function( args, name ) {\n        return true;\n    },\n\n    access_denied: function() {\n        this.page.display( new Ui.Message( { status: 'danger', message: 'You must be logged in with proper credentials to make this request.', persistent: true } ) );\n    }\n});\n\nmodule.exports = Router\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/layout/router.js","/** Generic form view */\ndefine( [ 'mvc/form/form-view', 'mvc/ui/ui-misc' ], function( Form, Ui ) {\n\n    var View = Backbone.View.extend({\n\n        initialize: function( options ) {\n            this.model = new Backbone.Model( options );\n            this.url = this.model.get( 'url' );\n            this.redirect = this.model.get( 'redirect' );\n            this.setElement( '<div/>' );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            $.ajax({\n                url     : Galaxy.root + this.url,\n                type    : 'GET'\n            }).done( function( response ) {\n                var options = $.extend( {}, self.model.attributes, response );\n                var form = new Form({\n                    title  : options.title,\n                    message: options.message,\n                    status : options.status || 'warning',\n                    icon   : options.icon,\n                    inputs : options.inputs,\n                    buttons: {\n                        'submit': new Ui.Button({\n                            tooltip  : options.submit_tooltip,\n                            title    : options.submit_title || 'Save',\n                            icon     : options.submit_icon || 'fa-save',\n                            cls      : 'btn btn-primary ui-clear-float',\n                            onclick  : function() { self._submit( form ) }\n                        })\n                    }\n                });\n                self.$el.empty().append( form.$el );\n            }).fail( function( response ) {\n                self.$el.empty().append( new Ui.Message({\n                    message     : 'Failed to load resource ' + self.url + '.',\n                    status      : 'danger',\n                    persistent  : true\n                }).$el );\n            });\n        },\n\n        _submit: function( form ) {\n            var self = this;\n            $.ajax( {\n                url         : Galaxy.root + self.url,\n                data        : JSON.stringify( form.data.create() ),\n                type        : 'PUT',\n                contentType : 'application/json'\n            }).done( function( response ) {\n                var success_message = { message: response.message, status: 'success', persistent: false };\n                if ( self.redirect ) {\n                    window.location = Galaxy.root + self.redirect + '?' + $.param( success_message );\n                } else {\n                    form.data.matchModel( response, function ( input, input_id ) {\n                        form.field_list[ input_id ].value( input.value );\n                    });\n                    self._showMessage( form, success_message );\n                }\n            }).fail( function( response ) {\n                self._showMessage( form, { message: response.responseJSON.err_msg, status: 'danger', persistent: false } );\n            });\n        },\n\n        _showMessage: function( form, options ) {\n            var $panel = form.$el.parents().filter(function() {\n                return [ 'auto', 'scroll' ].indexOf( $( this ).css( 'overflow' ) ) != -1;\n            }).first();\n            $panel.animate( { scrollTop : 0 }, 500 );\n            form.message.update( options );\n        }\n    });\n\n    return {\n        View  : View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-wrapper.js","var _l = require( 'utils/localization' );\n\nvar AdminPanel = Backbone.View.extend({\n    initialize: function( page, options ) {\n        var self = this;\n        this.page       = page;\n        this.root       = options.root;\n        this.config     = options.config;\n        this.settings   = options.settings;\n        this.message    = options.message;\n        this.status     = options.status;\n        this.model = new Backbone.Model({\n            title   : _l( 'Administration' )\n        });\n        this.categories = new Backbone.Collection([{\n            title : 'Server',\n            items : [ {\n                title   : 'Data types registry',\n                url     : 'admin/view_datatypes_registry'\n            },{\n                title   : 'Data tables registry',\n                url     : 'admin/view_tool_data_tables'\n            },{\n                title   : 'Display applications',\n                url     : 'admin/display_applications'\n            },{\n                title   : 'Manage jobs',\n                url     : 'admin/jobs'\n            } ]\n        },{\n            title : 'Tools and Tool Shed',\n            items : [ {\n                title   : 'Search Tool Shed',\n                url     : 'admin_toolshed/browse_tool_sheds',\n                enabled : self.settings.is_tool_shed_installed\n            },{\n                title   : 'Search Tool Shed (Beta)',\n                url     : 'admin_toolshed/browse_toolsheds',\n                enabled : self.settings.is_tool_shed_installed && self.config.enable_beta_ts_api_install\n            },{\n                title   : 'Monitor installing repositories',\n                url     : 'admin_toolshed/monitor_repository_installation?installing_repository_ids=' + self.settings.installing_repository_ids,\n                enabled : self.settings.installing_repository_ids\n            },{\n                title   : 'Manage installed tools',\n                url     : 'admin_toolshed/browse_repositories',\n                enabled : self.settings.is_repo_installed\n            },{\n                title   : 'Reset metadata',\n                url     : 'admin_toolshed/reset_metadata_on_selected_installed_repositories',\n                enabled : self.settings.is_repo_installed\n            },{\n                title   : 'Download local tool',\n                url     : 'admin/package_tool'\n            },{\n                title   : 'Tool lineage',\n                url     : 'admin/tool_versions',\n                target  : '__use_router__'\n            },{\n                title   : 'Reload a tool\\'s configuration',\n                url     : 'admin/reload_tool'\n            },{\n                title   : 'Review tool migration stages',\n                url     : 'admin/review_tool_migration_stages'\n            },{\n                title   : 'View Tool Error Logs',\n                url     : 'admin/tool_errors'\n            },{\n                title   : 'Manage Display Whitelist',\n                url     : 'admin/sanitize_whitelist'\n            },{\n                title   : 'Manage Tool Dependencies',\n                url     : 'admin/manage_tool_dependencies'\n            } ]\n        },{\n            title : 'User Management',\n            items : [ {\n                title   : 'Users',\n                url     : 'admin/users',\n                target  : '__use_router__'\n            },{\n                title   : 'Groups',\n                url     : 'admin/groups',\n                target  : '__use_router__'\n            },{\n                title   : 'Roles',\n                url     : 'admin/roles',\n                target  : '__use_router__'\n            },{\n                title   : 'API keys',\n                url     : 'userskeys/all_users'\n            },{\n                title   : 'Impersonate a user',\n                url     : 'admin/impersonate',\n                enabled : self.config.allow_user_impersonation\n            } ]\n        },{\n            title : 'Data',\n            items : [ {\n                title   : 'Quotas',\n                url     : 'admin/quotas',\n                target  : '__use_router__',\n                enabled : self.config.enable_quotas\n            },{\n                title   : 'Data libraries',\n                url     : 'library_admin/browse_libraries'\n            },{\n                title   : 'Roles',\n                url     : 'admin/roles',\n                target  : '__use_router__'\n            },{\n                title   : 'Local data',\n                url     : 'data_manager'\n            } ]\n        },{\n            title : 'Form Definitions',\n            items : [ {\n                title   : 'Form definitions',\n                url     : 'forms/browse_form_definitions'\n            } ]\n        },{\n            title : 'Sample Tracking',\n            items : [ {\n                title   : 'Sequencers and external services',\n                url     : 'external_service/browse_external_services'\n            },{\n                title   : 'Request types',\n                url     : 'request_type/browse_request_types'\n            },{\n                title   : 'Sequencing requests',\n                url     : 'requests_admin/browse_requests'\n            },{\n                title   : 'Find samples',\n                url     : 'requests_common/find_samples?cntrller=requests_admin'\n            } ]\n        }]);\n        this.setElement( this._template() );\n    },\n\n    render : function() {\n        var self = this;\n        this.$el.empty();\n        this.categories.each( function( category ) {\n            var $section = $( self._templateSection( category.attributes ) );\n            var $entries = $section.find( '.ui-side-section-body' );\n            _.each( category.get( 'items' ), function( item ) {\n                if ( item.enabled === undefined || item.enabled ) {\n                    var $link = $( '<a/>' ).attr( { href : self.root + item.url } ).text( _l( item.title ) );\n                    if ( item.target == '__use_router__' ) {\n                        $link.on( 'click', function( e ) { e.preventDefault(); self.page.router.push( item.url ); } );\n                    } else {\n                        $link.attr( 'target', 'galaxy_main' );\n                    }\n                    $entries.append( $( '<div/>' ).addClass( 'ui-side-section-body-title' ).append( $link ) );\n                }\n            });\n            self.$el.append( $section );\n        });\n        this.page.$( '#galaxy_main' ).prop( 'src', this.root + 'admin/center?message=' + this.message + '&status=' + this.status );\n    },\n\n    _templateSection : function( options ) {\n        return [\n            '<div>',\n                '<div class=\"ui-side-section-title\">' + _l( options.title ) + '</div>',\n                '<div class=\"ui-side-section-body\"/>',\n            '</div>'\n        ].join('');\n    },\n\n    _template : function() {\n        return '<div class=\"ui-side-panel\"/>';\n    },\n\n    toString : function() { return 'adminPanel' }\n});\n\nmodule.exports = AdminPanel;\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/apps/panels/admin-panel.js"],"sourceRoot":""}